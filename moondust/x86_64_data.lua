local x86_64 = _G.x86_64 or require('moondust.x86_64')
local map = {
	['fsubrp'] = {
		[''] = {
			func = function(op1) return "\xDE\xE1" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"DE", "E1"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fsubrp",
		},
		['st(i)'] = {
			func = function(op1) return "\xDE" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"DE", "E0+i"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fsubrp",
		},
	},
	['fabs'] = {
		[''] = {
			func = function(op1) return "\xD9\xE1" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "E1"},
			metadata = "FPU              C0=U C1=0 C2=U C3=U",
			operands = {""},
			name = "fabs",
		},
	},
	['vpextrd'] = {
		['m32,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m32", "xmm", "ub"},
			encoding = "MRI-T1S",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "16", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"m32", "xmm", "u8"},
			name = "vpextrd",
		},
		['r64[3:0],xmm,u8'] = {
			func = function(op1, op2, op3) return "\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[3:0]", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64[3:0], xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "16", "/r", "ib"},
			metadata = "AVX512_DQ X64",
			operands = {"r64[3:0]", "xmm", "u8"},
			name = "vpextrd",
		},
		['m64,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m64", "xmm", "ub"},
			encoding = "MRI-T1S",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "16", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"m64", "xmm", "u8"},
			name = "vpextrd",
		},
		['r64[3:0],xmm,i8'] = {
			func = function(op1, op2, op3) return "\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[3:0]", "xmm", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64[3:0], xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "16", "/r", "ib"},
			metadata = "AVX512_DQ X64",
			operands = {"r64[3:0]", "xmm", "i8"},
			name = "vpextrd",
		},
		['r32[3:0],xmm,i8'] = {
			func = function(op1, op2, op3) return "\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32[3:0]", "xmm", "ib"},
			encoding = "MRI-T1S",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "16", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"r32[3:0]", "xmm", "i8"},
			name = "vpextrd",
		},
	},
	['vbroadcastsd'] = {
		['ymm,xmm'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm",
			opcode = {"VEX.256.66.0F38.W0", "19", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm"},
			name = "vbroadcastsd",
		},
		['ymm,m32'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, m32/m64",
			opcode = {"VEX.256.66.0F38.W0", "19", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m32"},
			name = "vbroadcastsd",
		},
		['zmm {kz},m32'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W1", "19", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m32"},
			name = "vbroadcastsd",
		},
		['zmm {kz},m64'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m64"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W1", "19", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m64"},
			name = "vbroadcastsd",
		},
		['ymm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm[7:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W1", "19", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm[7:0]"},
			name = "vbroadcastsd",
		},
		['zmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "xmm[7:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W1", "19", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "xmm[7:0]"},
			name = "vbroadcastsd",
		},
		['ymm,m64'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, m32/m64",
			opcode = {"VEX.256.66.0F38.W0", "19", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m64"},
			name = "vbroadcastsd",
		},
		['ymm {kz},m32'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W1", "19", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m32"},
			name = "vbroadcastsd",
		},
		['ymm {kz},m64'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m64"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W1", "19", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m64"},
			name = "vbroadcastsd",
		},
	},
	['vaddss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "58", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			name = "vaddss",
		},
		['xmm,xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "58", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			name = "vaddss",
		},
		['xmm {kz},xmm[15:4],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "58", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m64 {er}"},
			name = "vaddss",
		},
		['xmm,xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "58", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m32"},
			name = "vaddss",
		},
		['xmm,xmm[15:4],m64'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "58", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m64"},
			name = "vaddss",
		},
		['xmm {kz},xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "58", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			name = "vaddss",
		},
	},
	['cmovle'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4E", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r32", "m32"},
			name = "cmovle",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4E", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r32", "r32"},
			name = "cmovle",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4E", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r32", "m64"},
			name = "cmovle",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4E", "/r"},
			metadata = "CMOV X64         ZF=R SF=R OF=R",
			operands = {"r64", "m64"},
			name = "cmovle",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4E", "/r"},
			metadata = "CMOV X64         ZF=R SF=R OF=R",
			operands = {"r64", "m32"},
			name = "cmovle",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4E", "/r"},
			metadata = "CMOV X64         ZF=R SF=R OF=R",
			operands = {"r64", "r64"},
			name = "cmovle",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4E", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r16", "r16"},
			name = "cmovle",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4E", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r16", "m16"},
			name = "cmovle",
		},
	},
	['vfnmadd132sd'] = {
		['xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3) return "\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "9D", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfnmadd132sd",
		},
		['xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "9D", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfnmadd132sd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "9D", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfnmadd132sd",
		},
		['xmm[7:0] {kz},xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "9D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			name = "vfnmadd132sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "9D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			name = "vfnmadd132sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "9D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			name = "vfnmadd132sd",
		},
	},
	['vpmaskmovd'] = {
		['m128,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x8E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128", "xmm", "xmm"},
			encoding = "MVR",
			has_relative = false,
			operands2 = "X:m128, xmm, xmm",
			opcode = {"VEX.NDS.128.66.0F38.W0", "8E", "/r"},
			metadata = "AVX2",
			operands = {"m128", "xmm", "xmm"},
			name = "vpmaskmovd",
		},
		['m256,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x8E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256", "ymm", "ymm"},
			encoding = "MVR",
			has_relative = false,
			operands2 = "X:m256, ymm, ymm",
			opcode = {"VEX.NDS.256.66.0F38.W0", "8E", "/r"},
			metadata = "AVX2",
			operands = {"m256", "ymm", "ymm"},
			name = "vpmaskmovd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x8C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, m128",
			opcode = {"VEX.NDS.128.66.0F38.W0", "8C", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmaskmovd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x8C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "8C", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmaskmovd",
		},
	},
	['lddqu'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xF2\x0F\xF0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, m128",
			opcode = {"F2", "0F", "F0", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "m128"},
			name = "lddqu",
		},
	},
	['psubusb'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xD8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "D8", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "psubusb",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xD8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "D8", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "psubusb",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xD8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "D8", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "psubusb",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xD8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "D8", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psubusb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xD8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "D8", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psubusb",
		},
	},
	['vphadduwd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xD6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "D6", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vphadduwd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xD6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "D6", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vphadduwd",
		},
	},
	['vpshrdq'] = {
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vpshrdq",
		},
		['ymm {kz},ymm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b64", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "b64", "u8"},
			name = "vpshrdq",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vpshrdq",
		},
		['xmm {kz},xmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "b64", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "b64", "u8"},
			name = "vpshrdq",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vpshrdq",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vpshrdq",
		},
		['zmm {kz},zmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b64", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "b64", "u8"},
			name = "vpshrdq",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vpshrdq",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vpshrdq",
		},
	},
	['vcvttpd2udq'] = {
		['xmm[7:0] {kz},m128'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.0F.W1", "78", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0] {kz}", "m128"},
			name = "vcvttpd2udq",
		},
		['ymm {kz},m512'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.0F.W1", "78", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "m512"},
			name = "vcvttpd2udq",
		},
		['xmm[7:0] {kz},b64'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.0F.W1", "78", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0] {kz}", "b64"},
			name = "vcvttpd2udq",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.0F.W1", "78", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vcvttpd2udq",
		},
		['ymm {kz},zmm'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.0F.W1", "78", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "zmm"},
			name = "vcvttpd2udq",
		},
		['ymm {kz},b64 {sae}'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64 {sae}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.0F.W1", "78", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "b64 {sae}"},
			name = "vcvttpd2udq",
		},
		['xmm {kz},ymm'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.0F.W1", "78", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "ymm"},
			name = "vcvttpd2udq",
		},
		['xmm[7:0] {kz},xmm'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.0F.W1", "78", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0] {kz}", "xmm"},
			name = "vcvttpd2udq",
		},
		['xmm {kz},m256'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.0F.W1", "78", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m256"},
			name = "vcvttpd2udq",
		},
	},
	['vexpandps'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x88"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W0", "88", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vexpandps",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x88"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W0", "88", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vexpandps",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x88"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W0", "88", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vexpandps",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x88"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W0", "88", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vexpandps",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x88"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W0", "88", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vexpandps",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x88"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W0", "88", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vexpandps",
		},
	},
	['cmpxchg8b'] = {
		['m32'] = {
			func = function(op1) return "\x0F\xC7"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:m32/m64, X:<edx>, X:<eax>, <ecx>, <ebx>",
			opcode = {"0F", "C7", "/1"},
			metadata = "CMPXCHG8B        _XLock Volatile ZF=W",
			operands = {"m32"},
			name = "cmpxchg8b",
		},
		['m64'] = {
			func = function(op1) return "\x0F\xC7"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:m32/m64, X:<edx>, X:<eax>, <ecx>, <ebx>",
			opcode = {"0F", "C7", "/1"},
			metadata = "CMPXCHG8B        _XLock Volatile ZF=W",
			operands = {"m64"},
			name = "cmpxchg8b",
		},
	},
	['vrcp14ps'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "4C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vrcp14ps",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "4C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vrcp14ps",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "4C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vrcp14ps",
		},
		['zmm {kz},b32'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W0", "4C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32"},
			name = "vrcp14ps",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "4C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vrcp14ps",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "4C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vrcp14ps",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W0", "4C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vrcp14ps",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "4C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vrcp14ps",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W0", "4C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vrcp14ps",
		},
	},
	['divss'] = {
		['xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "5E", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "xmm[3:0]"},
			name = "divss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "5E", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m32"},
			name = "divss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "5E", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m64"},
			name = "divss",
		},
	},
	['pfmax'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xA4" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "A4"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pfmax",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xA4" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "A4"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pfmax",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xA4" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "A4"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pfmax",
		},
	},
	['vfmadd231sd'] = {
		['xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3) return "\xB9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "B9", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfmadd231sd",
		},
		['xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xB9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "B9", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfmadd231sd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xB9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "B9", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfmadd231sd",
		},
		['xmm[7:0] {kz},xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xB9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "B9", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			name = "vfmadd231sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xB9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "B9", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			name = "vfmadd231sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xB9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "B9", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			name = "vfmadd231sd",
		},
	},
	['cvttpd2dq'] = {
		['xmm[7:0],xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm/m128",
			opcode = {"66", "0F", "E6", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "xmm"},
			name = "cvttpd2dq",
		},
		['xmm[7:0],m128'] = {
			func = function(op1, op2) return "\x66\x0F\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm/m128",
			opcode = {"66", "0F", "E6", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m128"},
			name = "cvttpd2dq",
		},
	},
	['vphadddq'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xCB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "CB", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vphadddq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xCB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "CB", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vphadddq",
		},
	},
	['vphaddd'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x02"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "02", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vphaddd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x02"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "02", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vphaddd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x02"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "02", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vphaddd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x02"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "02", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vphaddd",
		},
	},
	['vpcmpeqd'] = {
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vpcmpeqd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "76", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpcmpeqd",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "76", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "m512"},
			name = "vpcmpeqd",
		},
		['k {k},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "b32"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "b32"},
			name = "vpcmpeqd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "76", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpcmpeqd",
		},
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vpcmpeqd",
		},
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "76", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vpcmpeqd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "76", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpcmpeqd",
		},
		['k {k},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "b32"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "b32"},
			name = "vpcmpeqd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "76", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpcmpeqd",
		},
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vpcmpeqd",
		},
		['k {k},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "b32"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "76", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "b32"},
			name = "vpcmpeqd",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vpcmpeqd",
		},
	},
	['pcmpeqb'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x74"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "74", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "pcmpeqb",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x74"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "74", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "pcmpeqb",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x74"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "74", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "pcmpeqb",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x74"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "74", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pcmpeqb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x74"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "74", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pcmpeqb",
		},
	},
	['vreduceps'] = {
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "56", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vreduceps",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "56", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vreduceps",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "56", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vreduceps",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "56", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vreduceps",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "56", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vreduceps",
		},
		['zmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b32", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "56", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "b32", "u8"},
			name = "vreduceps",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "56", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vreduceps",
		},
		['xmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b32", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "56", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "b32", "u8"},
			name = "vreduceps",
		},
		['ymm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b32", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "56", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "b32", "u8"},
			name = "vreduceps",
		},
	},
	['div'] = {
		['m8'] = {
			func = function(op1) return "\xF6"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:<ax>, r8/m8",
			opcode = {"F6", "/6"},
			metadata = "ANY              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"m8"},
			name = "div",
		},
		['r8'] = {
			func = function(op1) return "\xF6"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:<ax>, r8/m8",
			opcode = {"F6", "/6"},
			metadata = "ANY              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"r8"},
			name = "div",
		},
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:<rdx>, X:<rax>, r64/m32/m64",
			opcode = {"REX.W", "F7", "/6"},
			metadata = "X64              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"m32"},
			name = "div",
		},
		['r16'] = {
			func = function(op1) return "\x66\xF7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:<dx>, x:<ax>, r16/m16",
			opcode = {"66", "F7", "/6"},
			metadata = "ANY              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"r16"},
			name = "div",
		},
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:<rdx>, X:<rax>, r64/m32/m64",
			opcode = {"REX.W", "F7", "/6"},
			metadata = "X64              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"r64"},
			name = "div",
		},
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:<rdx>, X:<rax>, r64/m32/m64",
			opcode = {"REX.W", "F7", "/6"},
			metadata = "X64              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"m64"},
			name = "div",
		},
		['r32'] = {
			func = function(op1) return "\xF7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:<edx>, X:<eax>, r32/m32/m64",
			opcode = {"F7", "/6"},
			metadata = "ANY              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"r32"},
			name = "div",
		},
		['m16'] = {
			func = function(op1) return "\x66\xF7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:<dx>, x:<ax>, r16/m16",
			opcode = {"66", "F7", "/6"},
			metadata = "ANY              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"m16"},
			name = "div",
		},
	},
	['vscalefsd'] = {
		['xmm {kz},xmm[15:8],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "2D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m64 {er}"},
			name = "vscalefsd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "2D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			name = "vscalefsd",
		},
		['xmm {kz},xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "2D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			name = "vscalefsd",
		},
	},
	['sarx'] = {
		['r64,m64,r64'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64", "r64"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, r64",
			opcode = {"VEX.NDS.LZ.F3.0F38.W1", "F7", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "m64", "r64"},
			name = "sarx",
		},
		['r32,r32,r32'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "r32"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, r32",
			opcode = {"VEX.NDS.LZ.F3.0F38.W0", "F7", "/r"},
			metadata = "BMI2",
			operands = {"r32", "r32", "r32"},
			name = "sarx",
		},
		['r32,m32,r32'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32", "r32"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, r32",
			opcode = {"VEX.NDS.LZ.F3.0F38.W0", "F7", "/r"},
			metadata = "BMI2",
			operands = {"r32", "m32", "r32"},
			name = "sarx",
		},
		['r64,r64,r64'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "r64"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, r64",
			opcode = {"VEX.NDS.LZ.F3.0F38.W1", "F7", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "r64", "r64"},
			name = "sarx",
		},
		['r32,m64,r32'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64", "r32"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, r32",
			opcode = {"VEX.NDS.LZ.F3.0F38.W0", "F7", "/r"},
			metadata = "BMI2",
			operands = {"r32", "m64", "r32"},
			name = "sarx",
		},
		['r64,m32,r64'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32", "r64"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, r64",
			opcode = {"VEX.NDS.LZ.F3.0F38.W1", "F7", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "m32", "r64"},
			name = "sarx",
		},
	},
	['vpermi2b'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "75", "/r"},
			metadata = "AVX512_VBMI",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermi2b",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "75", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermi2b",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "75", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermi2b",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "75", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermi2b",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "75", "/r"},
			metadata = "AVX512_VBMI",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermi2b",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "75", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermi2b",
		},
	},
	['wrmsr'] = {
		[''] = {
			func = function() return "\x0F\x30" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:<edx>,R:<eax>,R:<ecx>",
			opcode = {"0F", "30"},
			metadata = "ANY              Volatile PRIVILEGE=L0 MSR=W",
			operands = {},
			name = "wrmsr",
		},
	},
	['rcr'] = {
		['m16,u8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/3", "ib"},
			metadata = "ANY CF=X OF=X",
			operands = {"m16", "u8"},
			name = "rcr",
		},
		['m8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/3"},
			metadata = "ANY CF=X OF=X",
			operands = {"m8", "1"},
			name = "rcr",
		},
		['m32,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/3", "ib"},
			metadata = "X64 CF=X OF=X",
			operands = {"m32", "u8"},
			name = "rcr",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/3", "ib"},
			metadata = "ANY CF=X OF=X",
			operands = {"m8", "u8"},
			name = "rcr",
		},
		['r8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/3"},
			metadata = "ANY CF=X OF=X",
			operands = {"r8", "cl"},
			name = "rcr",
		},
		['r16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/3"},
			metadata = "ANY CF=X OF=X",
			operands = {"r16", "cl"},
			name = "rcr",
		},
		['m16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/3"},
			metadata = "ANY CF=X OF=X",
			operands = {"m16", "cl"},
			name = "rcr",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\xC1"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib/ub",
			opcode = {"C1", "/3", "ib"},
			metadata = "ANY CF=X OF=X",
			operands = {"r32", "i8"},
			name = "rcr",
		},
		['r32,cl'] = {
			func = function(op1, op2) return "\xD3"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, cl",
			opcode = {"D3", "/3"},
			metadata = "ANY CF=X OF=X",
			operands = {"r32", "cl"},
			name = "rcr",
		},
		['r32,1'] = {
			func = function(op1, op2) return "\xD1"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, 1",
			opcode = {"D1", "/3"},
			metadata = "ANY CF=X OF=X",
			operands = {"r32", "1"},
			name = "rcr",
		},
		['m64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/3"},
			metadata = "X64 CF=X OF=X",
			operands = {"m64", "cl"},
			name = "rcr",
		},
		['m64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/3"},
			metadata = "X64 CF=X OF=X",
			operands = {"m64", "1"},
			name = "rcr",
		},
		['r16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/3"},
			metadata = "ANY CF=X OF=X",
			operands = {"r16", "1"},
			name = "rcr",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/3", "ib"},
			metadata = "X64 CF=X OF=X",
			operands = {"r64", "i8"},
			name = "rcr",
		},
		['r64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/3"},
			metadata = "X64 CF=X OF=X",
			operands = {"r64", "cl"},
			name = "rcr",
		},
		['r64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/3"},
			metadata = "X64 CF=X OF=X",
			operands = {"r64", "1"},
			name = "rcr",
		},
		['m64,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/3", "ib"},
			metadata = "X64 CF=X OF=X",
			operands = {"m64", "u8"},
			name = "rcr",
		},
		['m8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/3"},
			metadata = "ANY CF=X OF=X",
			operands = {"m8", "cl"},
			name = "rcr",
		},
		['m32,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/3"},
			metadata = "X64 CF=X OF=X",
			operands = {"m32", "1"},
			name = "rcr",
		},
		['r8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/3"},
			metadata = "ANY CF=X OF=X",
			operands = {"r8", "1"},
			name = "rcr",
		},
		['m32,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/3"},
			metadata = "X64 CF=X OF=X",
			operands = {"m32", "cl"},
			name = "rcr",
		},
		['m16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/3"},
			metadata = "ANY CF=X OF=X",
			operands = {"m16", "1"},
			name = "rcr",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/3", "ib"},
			metadata = "ANY CF=X OF=X",
			operands = {"r16", "i8"},
			name = "rcr",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/3", "ib"},
			metadata = "ANY CF=X OF=X",
			operands = {"r8", "i8"},
			name = "rcr",
		},
	},
	['fcomip'] = {
		['st(i)'] = {
			func = function(op1) return "\xDF" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "R:st(i)",
			opcode = {"DF", "F0+i"},
			metadata = "FPU_POP          C1=0 ZF=W PF=W CF=W",
			operands = {"st(i)"},
			name = "fcomip",
		},
	},
	['paddw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xFD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "FD", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "paddw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xFD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "FD", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "paddw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xFD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "FD", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "paddw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xFD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "FD", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "paddw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xFD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "FD", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "paddw",
		},
	},
	['vpsrlvq'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "45", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsrlvq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "45", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsrlvq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "45", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsrlvq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W1", "45", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsrlvq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W1", "45", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsrlvq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "45", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpsrlvq",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "45", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsrlvq",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W1", "45", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsrlvq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "45", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpsrlvq",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W1", "45", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsrlvq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "45", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpsrlvq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "45", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsrlvq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "45", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsrlvq",
		},
	},
	['vtestps'] = {
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x0E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~ymm, ~ymm/m256",
			opcode = {"VEX.256.66.0F38.W0", "0E", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"ymm", "ymm"},
			name = "vtestps",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x0E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~ymm, ~ymm/m256",
			opcode = {"VEX.256.66.0F38.W0", "0E", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"ymm", "m256"},
			name = "vtestps",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~xmm, ~xmm/m128",
			opcode = {"VEX.128.66.0F38.W0", "0E", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "m128"},
			name = "vtestps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~xmm, ~xmm/m128",
			opcode = {"VEX.128.66.0F38.W0", "0E", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "xmm"},
			name = "vtestps",
		},
	},
	['vaddsubps'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xD0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.F2.0F.WIG", "D0", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vaddsubps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xD0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.F2.0F.WIG", "D0", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vaddsubps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.F2.0F.WIG", "D0", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vaddsubps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.F2.0F.WIG", "D0", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vaddsubps",
		},
	},
	['lfs'] = {
		['r64,m16_64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xB4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m16_64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, m16_64",
			opcode = {"REX.W", "0F", "B4", "/r"},
			metadata = "X64              Volatile",
			operands = {"r64", "m16_64"},
			name = "lfs",
		},
		['r16,m16_16'] = {
			func = function(op1, op2) return "\x66\x0F\xB4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16_16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, m16_16",
			opcode = {"66", "0F", "B4", "/r"},
			metadata = "ANY              Volatile",
			operands = {"r16", "m16_16"},
			name = "lfs",
		},
		['r32,m16_32'] = {
			func = function(op1, op2) return "\x0F\xB4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m16_32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, m16_32",
			opcode = {"0F", "B4", "/r"},
			metadata = "ANY              Volatile",
			operands = {"r32", "m16_32"},
			name = "lfs",
		},
	},
	['vmovdqa'] = {
		['ymm,m256'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.66.0F.WIG", "6F", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vmovdqa",
		},
		['m256,ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256", "ymm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:ymm/m256, ymm",
			opcode = {"VEX.256.66.0F.WIG", "7F", "/r"},
			metadata = "AVX",
			operands = {"m256", "ymm"},
			name = "vmovdqa",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:ymm/m256, ymm",
			opcode = {"VEX.256.66.0F.WIG", "7F", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vmovdqa",
		},
		['m128,xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"VEX.128.66.0F.WIG", "7F", "/r"},
			metadata = "AVX",
			operands = {"m128", "xmm"},
			name = "vmovdqa",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.66.0F.WIG", "6F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vmovdqa",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"VEX.128.66.0F.WIG", "7F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vmovdqa",
		},
	},
	['fstsw'] = {
		['ax'] = {
			func = function(op1) return "\x9B\xDF\xE0" end,
			real_operands = {"ax"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "w:ax",
			opcode = {"9B", "DF", "E0"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {"ax"},
			name = "fstsw",
		},
		['m16'] = {
			func = function(op1) return "\x9B\xDD"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m16",
			opcode = {"9B", "DD", "/7"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {"m16"},
			name = "fstsw",
		},
	},
	['cmovno'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "41", "/r"},
			metadata = "CMOV             OF=R",
			operands = {"r32", "m32"},
			name = "cmovno",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "41", "/r"},
			metadata = "CMOV             OF=R",
			operands = {"r32", "r32"},
			name = "cmovno",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "41", "/r"},
			metadata = "CMOV             OF=R",
			operands = {"r32", "m64"},
			name = "cmovno",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "41", "/r"},
			metadata = "CMOV X64         OF=R",
			operands = {"r64", "m64"},
			name = "cmovno",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "41", "/r"},
			metadata = "CMOV X64         OF=R",
			operands = {"r64", "m32"},
			name = "cmovno",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "41", "/r"},
			metadata = "CMOV X64         OF=R",
			operands = {"r64", "r64"},
			name = "cmovno",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "41", "/r"},
			metadata = "CMOV             OF=R",
			operands = {"r16", "r16"},
			name = "cmovno",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "41", "/r"},
			metadata = "CMOV             OF=R",
			operands = {"r16", "m16"},
			name = "cmovno",
		},
	},
	['cqo'] = {
		[''] = {
			func = function() return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x99" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:<rdx>, <rax>",
			opcode = {"REX.W", "99"},
			metadata = "X64",
			operands = {},
			name = "cqo",
		},
	},
	['shl'] = {
		['m16,u8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/4", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "u8"},
			name = "shl",
		},
		['m8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "1"},
			name = "shl",
		},
		['m32,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/4", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "u8"},
			name = "shl",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/4", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "u8"},
			name = "shl",
		},
		['r8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "cl"},
			name = "shl",
		},
		['r16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "cl"},
			name = "shl",
		},
		['m16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "cl"},
			name = "shl",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\xC1"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib/ub",
			opcode = {"C1", "/4", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "i8"},
			name = "shl",
		},
		['r32,cl'] = {
			func = function(op1, op2) return "\xD3"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, cl",
			opcode = {"D3", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "cl"},
			name = "shl",
		},
		['r32,1'] = {
			func = function(op1, op2) return "\xD1"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, 1",
			opcode = {"D1", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "1"},
			name = "shl",
		},
		['m64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/4"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "cl"},
			name = "shl",
		},
		['m64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/4"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "1"},
			name = "shl",
		},
		['r16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "1"},
			name = "shl",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/4", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "i8"},
			name = "shl",
		},
		['r64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/4"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "cl"},
			name = "shl",
		},
		['r64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/4"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "1"},
			name = "shl",
		},
		['m64,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/4", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "u8"},
			name = "shl",
		},
		['m8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "cl"},
			name = "shl",
		},
		['m32,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/4"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "1"},
			name = "shl",
		},
		['r8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "1"},
			name = "shl",
		},
		['m32,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/4"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "cl"},
			name = "shl",
		},
		['m16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "1"},
			name = "shl",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/4", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "i8"},
			name = "shl",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/4", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "i8"},
			name = "shl",
		},
	},
	['bswap'] = {
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F"..string.char(0xC8 + x86_64.reginfo[op1.reg].index) end,
			real_operands = {"r64"},
			encoding = "O",
			has_relative = false,
			operands2 = "X:r64",
			opcode = {"REX.W", "0F", "C8+r"},
			metadata = "X64",
			operands = {"r64"},
			name = "bswap",
		},
		['r32'] = {
			func = function(op1) return "\x0F"..string.char(0xC8 + x86_64.reginfo[op1.reg].index) end,
			real_operands = {"r32"},
			encoding = "O",
			has_relative = false,
			operands2 = "X:r32",
			opcode = {"0F", "C8+r"},
			metadata = "ANY",
			operands = {"r32"},
			name = "bswap",
		},
	},
	['vfnmsub213ss'] = {
		['xmm[3:0] {kz},xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "AF", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			name = "vfnmsub213ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "AF", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			name = "vfnmsub213ss",
		},
		['xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3) return "\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "AF", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfnmsub213ss",
		},
		['xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "AF", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfnmsub213ss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "AF", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfnmsub213ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "AF", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			name = "vfnmsub213ss",
		},
	},
	['vfmaddss'] = {
		['xmm[3:0],xmm[3:0],m32,xmm[3:0]'] = {
			func = function(op1, op2, op3, op4) return "\x6a"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32", "xmm[3:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64, xmm[3:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6a", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32", "xmm[3:0]"},
			name = "vfmaddss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3, op4) return "\x6a"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "6a", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfmaddss",
		},
		['xmm[3:0],xmm[3:0],m64,xmm[3:0]'] = {
			func = function(op1, op2, op3, op4) return "\x6a"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64", "xmm[3:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64, xmm[3:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6a", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64", "xmm[3:0]"},
			name = "vfmaddss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3, op4) return "\x6a"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64, xmm[3:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6a", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfmaddss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3, op4) return "\x6a"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "6a", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfmaddss",
		},
	},
	['pmaxsw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xEE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "EE", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m32"},
			name = "pmaxsw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xEE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "EE", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m64"},
			name = "pmaxsw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xEE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "EE", "/r"},
			metadata = "MMX2",
			operands = {"mm", "mm"},
			name = "pmaxsw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xEE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "EE", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pmaxsw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xEE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "EE", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pmaxsw",
		},
	},
	['sha1msg2'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x38\xCA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "xmm, xmm/m128",
			opcode = {"0F", "38", "CA", "/r"},
			metadata = "SHA",
			operands = {"xmm", "m128"},
			name = "sha1msg2",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x38\xCA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "xmm, xmm/m128",
			opcode = {"0F", "38", "CA", "/r"},
			metadata = "SHA",
			operands = {"xmm", "xmm"},
			name = "sha1msg2",
		},
	},
	['vcmpsd'] = {
		['xmm,xmm[15:8],xmm[7:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm[15:8]", "xmm[7:0]", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64, ib/ub",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "C2", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "xmm[7:0]", "i8"},
			name = "vcmpsd",
		},
		['xmm,xmm[15:8],m64,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm[15:8]", "m64", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64, ib/ub",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "C2", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m64", "u8"},
			name = "vcmpsd",
		},
		['xmm,xmm[15:8],m32,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm[15:8]", "m32", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64, ib/ub",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "C2", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m32", "u8"},
			name = "vcmpsd",
		},
		['k {kz},xmm,xmm[7:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "xmm", "xmm[7:0]", "ib"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:k {kz}, xmm, xmm[7:0]/m32/m64, ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "C2", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {kz}", "xmm", "xmm[7:0]", "i8"},
			name = "vcmpsd",
		},
		['k {kz},xmm,m32,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "xmm", "m32", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:k {kz}, xmm, xmm[7:0]/m32/m64, ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "C2", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {kz}", "xmm", "m32", "ub {sae}"},
			name = "vcmpsd",
		},
		['k {kz},xmm,m64,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "xmm", "m64", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:k {kz}, xmm, xmm[7:0]/m32/m64, ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "C2", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {kz}", "xmm", "m64", "ub {sae}"},
			name = "vcmpsd",
		},
	},
	['cmovpe'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4A", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r32", "m32"},
			name = "cmovpe",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4A", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r32", "r32"},
			name = "cmovpe",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4A", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r32", "m64"},
			name = "cmovpe",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4A", "/r"},
			metadata = "CMOV X64         PF=R",
			operands = {"r64", "m64"},
			name = "cmovpe",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4A", "/r"},
			metadata = "CMOV X64         PF=R",
			operands = {"r64", "m32"},
			name = "cmovpe",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4A", "/r"},
			metadata = "CMOV X64         PF=R",
			operands = {"r64", "r64"},
			name = "cmovpe",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4A", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r16", "r16"},
			name = "cmovpe",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4A", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r16", "m16"},
			name = "cmovpe",
		},
	},
	['iretw'] = {
		[''] = {
			func = function(op1) return "\x66\xCF" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"66", "CF"},
			metadata = "ANY              Control=Return OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {""},
			name = "iretw",
		},
	},
	['setge'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9D", "/r"},
			metadata = "ANY              SF=R OF=R",
			operands = {"m8"},
			name = "setge",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9D", "/r"},
			metadata = "ANY              SF=R OF=R",
			operands = {"r8"},
			name = "setge",
		},
	},
	['vrndscaless'] = {
		['xmm {kz},xmm[15:4],xmm[3:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x0A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]", "ib"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W0", "0A", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]", "i8"},
			name = "vrndscaless",
		},
		['xmm {kz},xmm[15:4],m64,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x0A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W0", "0A", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m64", "ub {sae}"},
			name = "vrndscaless",
		},
		['xmm {kz},xmm[15:4],m32,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x0A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W0", "0A", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m32", "ub {sae}"},
			name = "vrndscaless",
		},
	},
	['daa'] = {
		[''] = {
			func = function() return "\x27" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "x:<ax>",
			opcode = {"27"},
			metadata = "X86 Deprecated   OF=U SF=W ZF=W AF=W PF=W CF=W",
			operands = {},
			name = "daa",
		},
	},
	['ltr'] = {
		['m16'] = {
			func = function(op1) return "\x0F\x00"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r16/m16",
			opcode = {"0F", "00", "/3"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {"m16"},
			name = "ltr",
		},
		['r16'] = {
			func = function(op1) return "\x0F\x00"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r16/m16",
			opcode = {"0F", "00", "/3"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {"r16"},
			name = "ltr",
		},
	},
	['vpmaxsw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xEE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "EE", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmaxsw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xEE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "EE", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmaxsw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xEE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "EE", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmaxsw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xEE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "EE", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmaxsw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xEE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "EE", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpmaxsw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xEE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "EE", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmaxsw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xEE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "EE", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmaxsw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xEE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "EE", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpmaxsw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xEE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "EE", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmaxsw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xEE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "EE", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmaxsw",
		},
	},
	['vpclmulqdq'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x44"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.WIG", "44", "/r", "ib"},
			metadata = "AVX512_F-VL VPCLMULQDQ",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vpclmulqdq",
		},
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x44"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.WIG", "44", "/r", "ib"},
			metadata = "AVX512_F-VL VPCLMULQDQ",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vpclmulqdq",
		},
		['zmm,zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x44"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm", "zmm", "m512", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.WIG", "44", "/r", "ib"},
			metadata = "AVX512_F    VPCLMULQDQ",
			operands = {"zmm", "zmm", "m512", "u8"},
			name = "vpclmulqdq",
		},
		['zmm,zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x44"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm", "zmm", "zmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.WIG", "44", "/r", "ib"},
			metadata = "AVX512_F    VPCLMULQDQ",
			operands = {"zmm", "zmm", "zmm", "i8"},
			name = "vpclmulqdq",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x44"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.WIG", "44", "/r", "ib"},
			metadata = "AVX512_F-VL VPCLMULQDQ",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vpclmulqdq",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x44"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.WIG", "44", "/r", "ib"},
			metadata = "AVX512_F-VL VPCLMULQDQ",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vpclmulqdq",
		},
	},
	['cvtss2si'] = {
		['r32,xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "2D", "/r"},
			metadata = "SSE",
			operands = {"r32", "xmm[3:0]"},
			name = "cvtss2si",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "2D", "/r"},
			metadata = "SSE",
			operands = {"r32", "m64"},
			name = "cvtss2si",
		},
		['r64,xmm[3:0]'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF3\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64",
			opcode = {"REX.W", "F3", "0F", "2D", "/r"},
			metadata = "SSE X64",
			operands = {"r64", "xmm[3:0]"},
			name = "cvtss2si",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64",
			opcode = {"REX.W", "F3", "0F", "2D", "/r"},
			metadata = "SSE X64",
			operands = {"r64", "m64"},
			name = "cvtss2si",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64",
			opcode = {"REX.W", "F3", "0F", "2D", "/r"},
			metadata = "SSE X64",
			operands = {"r64", "m32"},
			name = "cvtss2si",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "2D", "/r"},
			metadata = "SSE",
			operands = {"r32", "m32"},
			name = "cvtss2si",
		},
	},
	['fwait'] = {
		[''] = {
			func = function(op1) return "\xDB" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"DB"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {""},
			name = "fwait",
		},
	},
	['vminpd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64 {sae}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "5D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vminpd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vminpd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vminpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "5D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vminpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "5D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vminpd",
		},
		['zmm {kz},zmm,b64 {sae}'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {sae}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64 {sae}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "5D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {sae}"},
			name = "vminpd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64 {sae}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "5D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vminpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "5D", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vminpd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vminpd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "5D", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vminpd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vminpd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vminpd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vminpd",
		},
	},
	['vblendvps'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "4A", "/r", "/is4"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vblendvps",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "4A", "/r", "/is4"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vblendvps",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "4A", "/r", "/is4"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vblendvps",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "4A", "/r", "/is4"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vblendvps",
		},
	},
	['tzmsk'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r32", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/4"},
			metadata = "TBM",
			operands = {"r32", "m32"},
			name = "tzmsk",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r32", "r32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/4"},
			metadata = "TBM",
			operands = {"r32", "r32"},
			name = "tzmsk",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r32", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/4"},
			metadata = "TBM",
			operands = {"r32", "m64"},
			name = "tzmsk",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r64", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/4"},
			metadata = "TBM X64",
			operands = {"r64", "m64"},
			name = "tzmsk",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r64", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/4"},
			metadata = "TBM X64",
			operands = {"r64", "m32"},
			name = "tzmsk",
		},
		['r64,r64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r64", "r64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/4"},
			metadata = "TBM X64",
			operands = {"r64", "r64"},
			name = "tzmsk",
		},
	},
	['cmpxchg16b'] = {
		['m128'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xC7"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m128"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:m128, X:<rdx>, X:<rax>, <rcx>, <rbx>",
			opcode = {"REX.W", "0F", "C7", "/1"},
			metadata = "CMPXCHG16B X64   _XLock Volatile ZF=W",
			operands = {"m128"},
			name = "cmpxchg16b",
		},
	},
	['movsldup'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xF3\x0F\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"F3", "0F", "12", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "m128"},
			name = "movsldup",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xF3\x0F\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"F3", "0F", "12", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "xmm"},
			name = "movsldup",
		},
	},
	['vmovshdup'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.F3.0F.W0", "16", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vmovshdup",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.F3.0F.W0", "16", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vmovshdup",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.F3.0F.WIG", "16", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vmovshdup",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.F3.0F.W0", "16", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vmovshdup",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.F3.0F.W0", "16", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vmovshdup",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.F3.0F.W0", "16", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vmovshdup",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.F3.0F.W0", "16", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vmovshdup",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.F3.0F.WIG", "16", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vmovshdup",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.F3.0F.WIG", "16", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vmovshdup",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.F3.0F.WIG", "16", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vmovshdup",
		},
	},
	['vpmadd52huq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xB5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "B5", "/r"},
			metadata = "AVX512_IFMA",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmadd52huq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xB5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "B5", "/r"},
			metadata = "AVX512_IFMA-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmadd52huq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xB5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "B5", "/r"},
			metadata = "AVX512_IFMA-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmadd52huq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xB5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "B5", "/r"},
			metadata = "AVX512_IFMA-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpmadd52huq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xB5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "B5", "/r"},
			metadata = "AVX512_IFMA-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpmadd52huq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\xB5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "B5", "/r"},
			metadata = "AVX512_IFMA",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpmadd52huq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xB5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "B5", "/r"},
			metadata = "AVX512_IFMA",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmadd52huq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xB5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "B5", "/r"},
			metadata = "AVX512_IFMA-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmadd52huq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xB5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "B5", "/r"},
			metadata = "AVX512_IFMA-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmadd52huq",
		},
	},
	['int'] = {
		['i8'] = {
			func = function(op1) return "\xCD"..x86_64.encode_int("int8_t", op1) end,
			real_operands = {"ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "ib/ub",
			opcode = {"CD", "ib"},
			metadata = "ANY              Volatile",
			operands = {"i8"},
			name = "int",
		},
		['u8'] = {
			func = function(op1) return "\xCD"..x86_64.encode_int("int8_t", op1) end,
			real_operands = {"ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "ib/ub",
			opcode = {"CD", "ib"},
			metadata = "ANY              Volatile",
			operands = {"u8"},
			name = "int",
		},
	},
	['vpermt2q'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "7E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermt2q",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "7E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermt2q",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "7E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermt2q",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "7E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpermt2q",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "7E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpermt2q",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "7E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpermt2q",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "7E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermt2q",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "7E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermt2q",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "7E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermt2q",
		},
	},
	['xsaveopt64'] = {
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xAE"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"REX.W", "0F", "AE", "/6"},
			metadata = "XSAVEOPT X64     Volatile XCR=R",
			operands = {"m32"},
			name = "xsaveopt64",
		},
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xAE"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"REX.W", "0F", "AE", "/6"},
			metadata = "XSAVEOPT X64     Volatile XCR=R",
			operands = {"m64"},
			name = "xsaveopt64",
		},
	},
	['cwd'] = {
		[''] = {
			func = function() return "\x66\x99" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "w:<dx>, <ax>",
			opcode = {"66", "99"},
			metadata = "ANY",
			operands = {},
			name = "cwd",
		},
	},
	['packuswb'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x67"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "67", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "packuswb",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x67"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "67", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "packuswb",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x67"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "67", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "packuswb",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x67"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "67", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "packuswb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x67"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "67", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "packuswb",
		},
	},
	['vfnmsubps'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "7C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vfnmsubps",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "7C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vfnmsubps",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vfnmsubps",
		},
		['ymm,ymm,ymm,m256'] = {
			func = function(op1, op2, op3, op4) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "m256"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "7C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "m256"},
			name = "vfnmsubps",
		},
		['xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "7C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "m128"},
			name = "vfnmsubps",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vfnmsubps",
		},
	},
	['hsubpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "7D", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "m128"},
			name = "hsubpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "7D", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "xmm"},
			name = "hsubpd",
		},
	},
	['vpshldd'] = {
		['xmm {kz},xmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "b32", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "b32", "u8"},
			name = "vpshldd",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vpshldd",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vpshldd",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vpshldd",
		},
		['ymm {kz},ymm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b32", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "b32", "u8"},
			name = "vpshldd",
		},
		['zmm {kz},zmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b32", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "b32", "u8"},
			name = "vpshldd",
		},
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vpshldd",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vpshldd",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vpshldd",
		},
	},
	['scasq'] = {
		[''] = {
			func = function() return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xAF" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:<rax>, X:<es:zdi>",
			opcode = {"REX.W", "AF"},
			metadata = "X64 _Rep         OF=W SF=W ZF=W AF=W PF=W CF=W DF=R",
			operands = {},
			name = "scasq",
		},
	},
	['popfd'] = {
		[''] = {
			func = function(op1) return "\x9D" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"9D"},
			metadata = "X86              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {""},
			name = "popfd",
		},
	},
	['v4fnmaddps'] = {
		['zmm {kz},zmm,zmm,zmm,zmm,m128'] = {
			func = function(op1, op2, op3, op4, op5, op6) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "zmm", "zmm", "m128"},
			encoding = "RM-T1_4X",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm, zmm, zmm, m128",
			opcode = {"EVEX.DDS.512.F2.0F38.W0", "AA", "/r"},
			metadata = "AVX512_4FMAPS",
			operands = {"zmm {kz}", "zmm", "zmm", "zmm", "zmm", "m128"},
			name = "v4fnmaddps",
		},
	},
	['vpternlogq'] = {
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.DDS.512.66.0F3A.W1", "25", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vpternlogq",
		},
		['ymm {kz},ymm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.DDS.256.66.0F3A.W1", "25", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64", "u8"},
			name = "vpternlogq",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.DDS.128.66.0F3A.W1", "25", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vpternlogq",
		},
		['xmm {kz},xmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.DDS.128.66.0F3A.W1", "25", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64", "u8"},
			name = "vpternlogq",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.DDS.256.66.0F3A.W1", "25", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vpternlogq",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.DDS.512.66.0F3A.W1", "25", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vpternlogq",
		},
		['zmm {kz},zmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.DDS.512.66.0F3A.W1", "25", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64", "u8"},
			name = "vpternlogq",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.DDS.128.66.0F3A.W1", "25", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vpternlogq",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.DDS.256.66.0F3A.W1", "25", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vpternlogq",
		},
	},
	['vcvtsi2ss'] = {
		['xmm,xmm[15:4],r32'] = {
			func = function(op1, op2, op3) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "r32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], r32/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "2A", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm[15:4]", "r32"},
			name = "vcvtsi2ss",
		},
		['xmm,xmm[15:4],m64'] = {
			func = function(op1, op2, op3) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], r64/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.W1", "2A", "/r"},
			metadata = "AVX X64",
			operands = {"xmm", "xmm[15:4]", "m64"},
			name = "vcvtsi2ss",
		},
		['xmm,xmm[15:4],r64'] = {
			func = function(op1, op2, op3) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "r64"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], r64/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W1", "2A", "/r"},
			metadata = "AVX512_F X64",
			operands = {"xmm", "xmm[15:4]", "r64"},
			name = "vcvtsi2ss",
		},
		['xmm,xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], r64/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W1", "2A", "/r"},
			metadata = "AVX512_F X64",
			operands = {"xmm", "xmm[15:4]", "m32"},
			name = "vcvtsi2ss",
		},
		['xmm,xmm[15:4],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], r64/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W1", "2A", "/r"},
			metadata = "AVX512_F X64",
			operands = {"xmm", "xmm[15:4]", "m64 {er}"},
			name = "vcvtsi2ss",
		},
	},
	['pcmpestrm'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x60"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<xmm0>,<eax>,<edx>",
			opcode = {"66", "0F", "3A", "60", "/r", "ib"},
			metadata = "SSE4_2 OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "xmm", "i8"},
			name = "pcmpestrm",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x60"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<xmm0>,<eax>,<edx>",
			opcode = {"66", "0F", "3A", "60", "/r", "ib"},
			metadata = "SSE4_2 OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "m128", "u8"},
			name = "pcmpestrm",
		},
	},
	['setne'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x95"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "95", "/r"},
			metadata = "ANY              ZF=R",
			operands = {"m8"},
			name = "setne",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x95"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "95", "/r"},
			metadata = "ANY              ZF=R",
			operands = {"r8"},
			name = "setne",
		},
	},
	['aesdeclast'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "DF", "/r"},
			metadata = "AESNI",
			operands = {"xmm", "m128"},
			name = "aesdeclast",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "DF", "/r"},
			metadata = "AESNI",
			operands = {"xmm", "xmm"},
			name = "aesdeclast",
		},
	},
	['vmovsldup'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.F3.0F.W0", "12", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vmovsldup",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.F3.0F.W0", "12", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vmovsldup",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.F3.0F.WIG", "12", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vmovsldup",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.F3.0F.W0", "12", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vmovsldup",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.F3.0F.W0", "12", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vmovsldup",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.F3.0F.W0", "12", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vmovsldup",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.F3.0F.W0", "12", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vmovsldup",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.F3.0F.WIG", "12", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vmovsldup",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.F3.0F.WIG", "12", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vmovsldup",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.F3.0F.WIG", "12", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vmovsldup",
		},
	},
	['vpcmpw'] = {
		['k {k},ymm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "b64", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "3F", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "b64", "u8"},
			name = "vpcmpw",
		},
		['k {k},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "m256", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "3F", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "m256", "u8"},
			name = "vpcmpw",
		},
		['k {k},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x3F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "3F", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "ymm", "i8"},
			name = "vpcmpw",
		},
		['k {k},zmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "b64", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "3F", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "b64", "u8"},
			name = "vpcmpw",
		},
		['k {k},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "m128", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "3F", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "m128", "u8"},
			name = "vpcmpw",
		},
		['k {k},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x3F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "3F", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "xmm", "i8"},
			name = "vpcmpw",
		},
		['k {k},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "m512", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "3F", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "m512", "u8"},
			name = "vpcmpw",
		},
		['k {k},xmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "b64", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "3F", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "b64", "u8"},
			name = "vpcmpw",
		},
		['k {k},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x3F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "3F", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "zmm", "i8"},
			name = "vpcmpw",
		},
	},
	['vrsqrtps'] = {
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.0F.WIG", "52", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vrsqrtps",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.0F.WIG", "52", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vrsqrtps",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.0F.WIG", "52", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vrsqrtps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.0F.WIG", "52", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vrsqrtps",
		},
	},
	['vpmovqb'] = {
		['m16 {kz},xmm'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m16 {kz}", "xmm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[1:0]/m16 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "32", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m16 {kz}", "xmm"},
			name = "vpmovqb",
		},
		['m64 {kz},zmm'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "zmm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "32", "/r"},
			metadata = "AVX512_F",
			operands = {"m64 {kz}", "zmm"},
			name = "vpmovqb",
		},
		['xmm[1:0],xmm'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[1:0]", "xmm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[1:0]/m16 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "32", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[1:0]", "xmm"},
			name = "vpmovqb",
		},
		['xmm[3:0],ymm'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "ymm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "32", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[3:0]", "ymm"},
			name = "vpmovqb",
		},
		['m32,zmm'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "zmm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "32", "/r"},
			metadata = "AVX512_F",
			operands = {"m32", "zmm"},
			name = "vpmovqb",
		},
		['m64 {kz},ymm'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "ymm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "32", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "ymm"},
			name = "vpmovqb",
		},
		['xmm[7:0],zmm'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "zmm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "32", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0]", "zmm"},
			name = "vpmovqb",
		},
		['m32,ymm'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "ymm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "32", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "ymm"},
			name = "vpmovqb",
		},
	},
	['vxorpd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "57", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vxorpd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "57", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vxorpd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "57", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vxorpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "57", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vxorpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "57", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vxorpd",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "57", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vxorpd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "57", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vxorpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "57", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vxorpd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "57", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vxorpd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "57", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vxorpd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "57", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vxorpd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "57", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vxorpd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "57", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vxorpd",
		},
	},
	['sldt'] = {
		['m16'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\x00"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r64/m16",
			opcode = {"REX.W", "0F", "00", "/0"},
			metadata = "X64 Volatile",
			operands = {"m16"},
			name = "sldt",
		},
		['r32'] = {
			func = function(op1) return "\x0F\x00"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r32/m16",
			opcode = {"0F", "00", "/0"},
			metadata = "ANY Volatile",
			operands = {"r32"},
			name = "sldt",
		},
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\x00"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r64/m16",
			opcode = {"REX.W", "0F", "00", "/0"},
			metadata = "X64 Volatile",
			operands = {"r64"},
			name = "sldt",
		},
		['r16'] = {
			func = function(op1) return "\x66\x0F\x00"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r16/m16",
			opcode = {"66", "0F", "00", "/0"},
			metadata = "ANY Volatile",
			operands = {"r16"},
			name = "sldt",
		},
	},
	['aad'] = {
		['i8'] = {
			func = function(op1) return "\xD5"..x86_64.encode_int("int8_t", op1) end,
			real_operands = {"ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:<ax>, ib/ub",
			opcode = {"D5", "ib"},
			metadata = "X86 Deprecated   OF=U SF=W ZF=W AF=U PF=W CF=U",
			operands = {"i8"},
			name = "aad",
		},
		['u8'] = {
			func = function(op1) return "\xD5"..x86_64.encode_int("int8_t", op1) end,
			real_operands = {"ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:<ax>, ib/ub",
			opcode = {"D5", "ib"},
			metadata = "X86 Deprecated   OF=U SF=W ZF=W AF=U PF=W CF=U",
			operands = {"u8"},
			name = "aad",
		},
	},
	['cvtss2sd'] = {
		['xmm[7:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "5A", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "xmm[3:0]"},
			name = "cvtss2sd",
		},
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "5A", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m64"},
			name = "cvtss2sd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "5A", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m32"},
			name = "cvtss2sd",
		},
	},
	['emms'] = {
		[''] = {
			func = function(op1) return "\x0F\x77" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "77"},
			metadata = "MMX Volatile",
			operands = {""},
			name = "emms",
		},
	},
	['call'] = {
		['m16'] = {
			func = function(op1) return "\x66\xFF"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r16/m16",
			opcode = {"66", "FF", "/2"},
			metadata = "X86              Control=Call OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"m16"},
			name = "call",
		},
		['r16'] = {
			func = function(op1) return "\x66\xFF"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r16/m16",
			opcode = {"66", "FF", "/2"},
			metadata = "X86              Control=Call OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"r16"},
			name = "call",
		},
		['i32'] = {
			func = function(op1) return "\xE8"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"E8", "cd"},
			metadata = "ANY              Control=Call OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"string"},
			name = "call",
		},
		['r32'] = {
			func = function(op1) return "\xFF"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r32/m32/m64",
			opcode = {"FF", "/2"},
			metadata = "X86              Control=Call OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"r32"},
			name = "call",
		},
		['m32'] = {
			func = function(op1) return "\xFF"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r64/m32/m64",
			opcode = {"FF", "/2"},
			metadata = "X64              Control=Call OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"m32"},
			name = "call",
		},
		['string'] = {
			func = function(op1) return "\xE8"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"E8", "cd"},
			metadata = "ANY              Control=Call OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"string"},
			name = "call",
		},
		['i16'] = {
			func = function(op1) return "\x66\xE8"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "E8", "cw"},
			metadata = "X86              Control=Call OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"string"},
			name = "call",
		},
		['r64'] = {
			func = function(op1) return "\xFF"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r64/m32/m64",
			opcode = {"FF", "/2"},
			metadata = "X64              Control=Call OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"r64"},
			name = "call",
		},
		['m64'] = {
			func = function(op1) return "\xFF"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r64/m32/m64",
			opcode = {"FF", "/2"},
			metadata = "X64              Control=Call OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"m64"},
			name = "call",
		},
	},
	['setae'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "93", "/r"},
			metadata = "ANY              CF=R",
			operands = {"m8"},
			name = "setae",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "93", "/r"},
			metadata = "ANY              CF=R",
			operands = {"r8"},
			name = "setae",
		},
	},
	['vmovq'] = {
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.F3.0F.W1", "7E", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0]", "m64"},
			name = "vmovq",
		},
		['r64,xmm[7:0]'] = {
			func = function(op1, op2) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, xmm[7:0]",
			opcode = {"VEX.128.66.0F.W1", "7E", "/r"},
			metadata = "AVX X64",
			operands = {"r64", "xmm[7:0]"},
			name = "vmovq",
		},
		['m32,xmm[7:0]'] = {
			func = function(op1, op2) return "\x7E"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, xmm[7:0]",
			opcode = {"VEX.128.66.0F.W1", "7E", "/r"},
			metadata = "AVX X64",
			operands = {"m32", "xmm[7:0]"},
			name = "vmovq",
		},
		['xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\xD6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64, xmm[7:0]",
			opcode = {"VEX.128.66.0F.WIG", "D6", "/r"},
			metadata = "AVX",
			operands = {"xmm[7:0]", "xmm[7:0]"},
			name = "vmovq",
		},
		['m64,xmm[7:0]'] = {
			func = function(op1, op2) return "\x7E"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, xmm[7:0]",
			opcode = {"VEX.128.66.0F.W1", "7E", "/r"},
			metadata = "AVX X64",
			operands = {"m64", "xmm[7:0]"},
			name = "vmovq",
		},
		['xmm[7:0],r64'] = {
			func = function(op1, op2) return "\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "r64"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm[7:0], r64/m32/m64",
			opcode = {"EVEX.128.66.0F.W1", "6E", "/r"},
			metadata = "AVX512_F X64",
			operands = {"xmm[7:0]", "r64"},
			name = "vmovq",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.F3.0F.W1", "7E", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0]", "m32"},
			name = "vmovq",
		},
	},
	['vpmovzxbq'] = {
		['xmm,xmm[1:0]'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[1:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[1:0]/m16",
			opcode = {"VEX.128.66.0F38.WIG", "32", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[1:0]"},
			name = "vpmovzxbq",
		},
		['xmm {kz},m16'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m16"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[1:0]/m16",
			opcode = {"EVEX.128.66.0F38.WIG", "32", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m16"},
			name = "vpmovzxbq",
		},
		['ymm,m32'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[3:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "32", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m32"},
			name = "vpmovzxbq",
		},
		['zmm {kz},m32'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m32"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.WIG", "32", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m32"},
			name = "vpmovzxbq",
		},
		['xmm {kz},xmm[1:0]'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[1:0]"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[1:0]/m16",
			opcode = {"EVEX.128.66.0F38.WIG", "32", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[1:0]"},
			name = "vpmovzxbq",
		},
		['ymm {kz},xmm[3:0]'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm[3:0]"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "32", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm[3:0]"},
			name = "vpmovzxbq",
		},
		['zmm {kz},m64'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m64"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.WIG", "32", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m64"},
			name = "vpmovzxbq",
		},
		['xmm,m16'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[1:0]/m16",
			opcode = {"VEX.128.66.0F38.WIG", "32", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m16"},
			name = "vpmovzxbq",
		},
		['zmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "xmm[7:0]"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.WIG", "32", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "xmm[7:0]"},
			name = "vpmovzxbq",
		},
		['ymm {kz},m64'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m64"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "32", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m64"},
			name = "vpmovzxbq",
		},
		['ymm {kz},m32'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m32"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "32", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m32"},
			name = "vpmovzxbq",
		},
		['ymm,xmm[3:0]'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[3:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "32", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm[3:0]"},
			name = "vpmovzxbq",
		},
		['ymm,m64'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[3:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "32", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m64"},
			name = "vpmovzxbq",
		},
	},
	['cvttsd2si'] = {
		['r32,xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "2C", "/r"},
			metadata = "SSE2",
			operands = {"r32", "xmm[7:0]"},
			name = "cvttsd2si",
		},
		['r64,xmm[7:0]'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF2\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64",
			opcode = {"REX.W", "F2", "0F", "2C", "/r"},
			metadata = "SSE2 X64",
			operands = {"r64", "xmm[7:0]"},
			name = "cvttsd2si",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF2\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64",
			opcode = {"REX.W", "F2", "0F", "2C", "/r"},
			metadata = "SSE2 X64",
			operands = {"r64", "m64"},
			name = "cvttsd2si",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\xF2\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "2C", "/r"},
			metadata = "SSE2",
			operands = {"r32", "m32"},
			name = "cvttsd2si",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF2\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64",
			opcode = {"REX.W", "F2", "0F", "2C", "/r"},
			metadata = "SSE2 X64",
			operands = {"r64", "m32"},
			name = "cvttsd2si",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\xF2\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "2C", "/r"},
			metadata = "SSE2",
			operands = {"r32", "m64"},
			name = "cvttsd2si",
		},
	},
	['vfnmadd213ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "AC", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfnmadd213ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "AC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfnmadd213ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "AC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfnmadd213ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "AC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfnmadd213ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "AC", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfnmadd213ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "AC", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfnmadd213ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "AC", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfnmadd213ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "AC", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfnmadd213ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "AC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfnmadd213ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "AC", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfnmadd213ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "AC", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfnmadd213ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "AC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfnmadd213ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "AC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfnmadd213ps",
		},
	},
	['clc'] = {
		[''] = {
			func = function(op1) return "\xF8" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"F8"},
			metadata = "ANY              CF=0",
			operands = {""},
			name = "clc",
		},
	},
	['ktestq'] = {
		['k[7:0],k[7:0]'] = {
			func = function(op1, op2) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[7:0]", "k[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~k[7:0], ~k[7:0]",
			opcode = {"VEX.L0.0F.W1", "99", "/r"},
			metadata = "AVX512_BW OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"k[7:0]", "k[7:0]"},
			name = "ktestq",
		},
	},
	['xgetbv'] = {
		[''] = {
			func = function() return "\x0F\x01\xD0" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:<edx>, W:<eax>, R:<ecx>",
			opcode = {"0F", "01", "D0"},
			metadata = "XSAVE            Volatile              XCR=R",
			operands = {},
			name = "xgetbv",
		},
	},
	['vpcmpuq'] = {
		['k {k},ymm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "1E", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "b64", "u8"},
			name = "vpcmpuq",
		},
		['k {k},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "1E", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "m256", "u8"},
			name = "vpcmpuq",
		},
		['k {k},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "1E", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "ymm", "i8"},
			name = "vpcmpuq",
		},
		['k {k},zmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "1E", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "b64", "u8"},
			name = "vpcmpuq",
		},
		['k {k},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "1E", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "m128", "u8"},
			name = "vpcmpuq",
		},
		['k {k},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "1E", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "xmm", "i8"},
			name = "vpcmpuq",
		},
		['k {k},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "1E", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "m512", "u8"},
			name = "vpcmpuq",
		},
		['k {k},xmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "1E", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "b64", "u8"},
			name = "vpcmpuq",
		},
		['k {k},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "1E", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "zmm", "i8"},
			name = "vpcmpuq",
		},
	},
	['lgs'] = {
		['r64,m16_64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xB5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m16_64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, m16_64",
			opcode = {"REX.W", "0F", "B5", "/r"},
			metadata = "X64              Volatile",
			operands = {"r64", "m16_64"},
			name = "lgs",
		},
		['r16,m16_16'] = {
			func = function(op1, op2) return "\x66\x0F\xB5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16_16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, m16_16",
			opcode = {"66", "0F", "B5", "/r"},
			metadata = "ANY              Volatile",
			operands = {"r16", "m16_16"},
			name = "lgs",
		},
		['r32,m16_32'] = {
			func = function(op1, op2) return "\x0F\xB5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m16_32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, m16_32",
			opcode = {"0F", "B5", "/r"},
			metadata = "ANY              Volatile",
			operands = {"r32", "m16_32"},
			name = "lgs",
		},
	},
	['fimul'] = {
		['m64int'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/1"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m64int"},
			name = "fimul",
		},
		['m16int'] = {
			func = function(op1) return "\xDE"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m16int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m16int",
			opcode = {"DE", "/1"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m16int"},
			name = "fimul",
		},
		['m32'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/1"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fimul",
		},
	},
	['stosd'] = {
		[''] = {
			func = function() return "\xAB" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<es:zdi>, R:<eax>",
			opcode = {"AB"},
			metadata = "ANY _Rep         DF=R",
			operands = {},
			name = "stosd",
		},
	},
	['cvtsd2si'] = {
		['r32,xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "2D", "/r"},
			metadata = "SSE2",
			operands = {"r32", "xmm[7:0]"},
			name = "cvtsd2si",
		},
		['r64,xmm[7:0]'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF2\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64",
			opcode = {"REX.W", "F2", "0F", "2D", "/r"},
			metadata = "SSE2 X64",
			operands = {"r64", "xmm[7:0]"},
			name = "cvtsd2si",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF2\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64",
			opcode = {"REX.W", "F2", "0F", "2D", "/r"},
			metadata = "SSE2 X64",
			operands = {"r64", "m64"},
			name = "cvtsd2si",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\xF2\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "2D", "/r"},
			metadata = "SSE2",
			operands = {"r32", "m32"},
			name = "cvtsd2si",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF2\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64",
			opcode = {"REX.W", "F2", "0F", "2D", "/r"},
			metadata = "SSE2 X64",
			operands = {"r64", "m32"},
			name = "cvtsd2si",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\xF2\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "2D", "/r"},
			metadata = "SSE2",
			operands = {"r32", "m64"},
			name = "cvtsd2si",
		},
	},
	['movntdqa'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, m128",
			opcode = {"66", "0F", "38", "2A", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "movntdqa",
		},
	},
	['bsf'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"0F", "BC", "/r"},
			metadata = "ANY              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r32", "m32"},
			name = "bsf",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"0F", "BC", "/r"},
			metadata = "ANY              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r32", "r32"},
			name = "bsf",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"0F", "BC", "/r"},
			metadata = "ANY              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r32", "m64"},
			name = "bsf",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "BC", "/r"},
			metadata = "X64              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r64", "m64"},
			name = "bsf",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "BC", "/r"},
			metadata = "X64              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r64", "m32"},
			name = "bsf",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "BC", "/r"},
			metadata = "X64              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r64", "r64"},
			name = "bsf",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, r16/m16",
			opcode = {"66", "0F", "BC", "/r"},
			metadata = "ANY              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r16", "r16"},
			name = "bsf",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, r16/m16",
			opcode = {"66", "0F", "BC", "/r"},
			metadata = "ANY              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r16", "m16"},
			name = "bsf",
		},
	},
	['vfmsubps'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "6C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vfmsubps",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "6C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vfmsubps",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vfmsubps",
		},
		['ymm,ymm,ymm,m256'] = {
			func = function(op1, op2, op3, op4) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "m256"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "6C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "m256"},
			name = "vfmsubps",
		},
		['xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "6C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "m128"},
			name = "vfmsubps",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vfmsubps",
		},
	},
	['lodsd'] = {
		[''] = {
			func = function() return "\xAD" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:<eax>, X:<ds:zsi>",
			opcode = {"AD"},
			metadata = "ANY _Rep         DF=R",
			operands = {},
			name = "lodsd",
		},
	},
	['vporq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "EB", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vporq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "EB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vporq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "EB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vporq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "EB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vporq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "EB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vporq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "EB", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vporq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "EB", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vporq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "EB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vporq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "EB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vporq",
		},
	},
	['vpgatherdq'] = {
		['ymm,m64x,ymm'] = {
			func = function(op1, op2, op3) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64x", "ymm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:ymm, vm32/m64x, X:ymm",
			opcode = {"VEX.DDS.256.66.0F38.W1", "90", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m64x", "ymm"},
			name = "vpgatherdq",
		},
		['xmm,m64x,xmm'] = {
			func = function(op1, op2, op3) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64x", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64x, X:xmm",
			opcode = {"VEX.DDS.128.66.0F38.W1", "90", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m64x", "xmm"},
			name = "vpgatherdq",
		},
		['xmm {k},m64x'] = {
			func = function(op1, op2) return "\x90" end,
			real_operands = {"xmm {k}", "m64x"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W1", "90"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "m64x"},
			name = "vpgatherdq",
		},
		['ymm {k},vm32'] = {
			func = function(op1, op2) return "\x90" end,
			real_operands = {"ymm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W1", "90"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "vm32"},
			name = "vpgatherdq",
		},
		['zmm {k},vm32'] = {
			func = function(op1, op2) return "\x90" end,
			real_operands = {"zmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W1", "90"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "vm32"},
			name = "vpgatherdq",
		},
		['zmm {k},m64z'] = {
			func = function(op1, op2) return "\x90" end,
			real_operands = {"zmm {k}", "m64z"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W1", "90"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "m64z"},
			name = "vpgatherdq",
		},
		['ymm,vm32,ymm'] = {
			func = function(op1, op2, op3) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "vm32", "ymm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:ymm, vm32/m64x, X:ymm",
			opcode = {"VEX.DDS.256.66.0F38.W1", "90", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "vm32", "ymm"},
			name = "vpgatherdq",
		},
		['ymm {k},m64y'] = {
			func = function(op1, op2) return "\x90" end,
			real_operands = {"ymm {k}", "m64y"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W1", "90"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "m64y"},
			name = "vpgatherdq",
		},
		['xmm {k},vm32'] = {
			func = function(op1, op2) return "\x90" end,
			real_operands = {"xmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W1", "90"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "vm32"},
			name = "vpgatherdq",
		},
		['xmm,vm32,xmm'] = {
			func = function(op1, op2, op3) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "vm32", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64x, X:xmm",
			opcode = {"VEX.DDS.128.66.0F38.W1", "90", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "vm32", "xmm"},
			name = "vpgatherdq",
		},
	},
	['vscatterpf1dps'] = {
		['m64z {k}'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64z {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C6", "/6"},
			metadata = "AVX512_PFI",
			operands = {"m64z {k}"},
			name = "vscatterpf1dps",
		},
		['vm32'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C6", "/6"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vscatterpf1dps",
		},
	},
	['aesimc'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "DB", "/r"},
			metadata = "AESNI",
			operands = {"xmm", "m128"},
			name = "aesimc",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "DB", "/r"},
			metadata = "AESNI",
			operands = {"xmm", "xmm"},
			name = "aesimc",
		},
	},
	['ficomp'] = {
		['m64int'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m64int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/3"},
			metadata = "FPU              C0=W C1=0 C2=W C3=W",
			operands = {"m64int"},
			name = "ficomp",
		},
		['m16int'] = {
			func = function(op1) return "\xDE"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m16int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m16int",
			opcode = {"DE", "/3"},
			metadata = "FPU              C0=W C1=0 C2=W C3=W",
			operands = {"m16int"},
			name = "ficomp",
		},
		['m32'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/3"},
			metadata = "FPU              C0=W C1=0 C2=W C3=W",
			operands = {"m32"},
			name = "ficomp",
		},
	},
	['jb'] = {
		['i8'] = {
			func = function(op1) return "\x72"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"72", "cb"},
			metadata = "ANY              Control=Branch CF=R",
			operands = {"string"},
			name = "jb",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x82"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "82", "cw"},
			metadata = "X86              Control=Branch CF=R",
			operands = {"string"},
			name = "jb",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x82"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "82", "cd"},
			metadata = "ANY              Control=Branch CF=R",
			operands = {"string"},
			name = "jb",
		},
		['string'] = {
			func = function(op1) return "\x0F\x82"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "82", "cd"},
			metadata = "ANY              Control=Branch CF=R",
			operands = {"string"},
			name = "jb",
		},
	},
	['v4fmaddss'] = {
		['xmm {kz},xmm,xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4, op5, op6) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "xmm", "xmm", "m128"},
			encoding = "RM-T1_4X",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm, xmm, xmm, m128",
			opcode = {"EVEX.DDS.LIG.F2.0F38.W0", "9B", "/r"},
			metadata = "AVX512_4FMAPS",
			operands = {"xmm {kz}", "xmm", "xmm", "xmm", "xmm", "m128"},
			name = "v4fmaddss",
		},
	},
	['pcmpgtd'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "66", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "pcmpgtd",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "66", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "pcmpgtd",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "66", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "pcmpgtd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "66", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pcmpgtd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "66", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pcmpgtd",
		},
	},
	['cvtdq2ps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"0F", "5B", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "cvtdq2ps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"0F", "5B", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "cvtdq2ps",
		},
	},
	['roundss'] = {
		['xmm[3:0],m32,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x0A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm[3:0]", "m32", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[3:0]/m32/m64, ib/ub",
			opcode = {"66", "0F", "3A", "0A", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm[3:0]", "m32", "u8"},
			name = "roundss",
		},
		['xmm[3:0],m64,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x0A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm[3:0]", "m64", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[3:0]/m32/m64, ib/ub",
			opcode = {"66", "0F", "3A", "0A", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm[3:0]", "m64", "u8"},
			name = "roundss",
		},
		['xmm[3:0],xmm[3:0],i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x0A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[3:0]/m32/m64, ib/ub",
			opcode = {"66", "0F", "3A", "0A", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm[3:0]", "xmm[3:0]", "i8"},
			name = "roundss",
		},
	},
	['vcvtuqq2pd'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.F3.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vcvtuqq2pd",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.F3.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vcvtuqq2pd",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.F3.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vcvtuqq2pd",
		},
		['zmm {kz},b64 {er}'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b64 {er}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.F3.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "b64 {er}"},
			name = "vcvtuqq2pd",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.F3.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vcvtuqq2pd",
		},
		['ymm {kz},b64'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.F3.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "b64"},
			name = "vcvtuqq2pd",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.F3.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vcvtuqq2pd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.F3.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm"},
			name = "vcvtuqq2pd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.F3.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m512"},
			name = "vcvtuqq2pd",
		},
	},
	['sha256msg1'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x38\xCC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "xmm, xmm/m128",
			opcode = {"0F", "38", "CC", "/r"},
			metadata = "SHA",
			operands = {"xmm", "m128"},
			name = "sha256msg1",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x38\xCC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "xmm, xmm/m128",
			opcode = {"0F", "38", "CC", "/r"},
			metadata = "SHA",
			operands = {"xmm", "xmm"},
			name = "sha256msg1",
		},
	},
	['pfrcpv'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x86" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "86"},
			metadata = "GEODE",
			operands = {"mm", "m32"},
			name = "pfrcpv",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x86" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "86"},
			metadata = "GEODE",
			operands = {"mm", "m64"},
			name = "pfrcpv",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x86" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "86"},
			metadata = "GEODE",
			operands = {"mm", "mm"},
			name = "pfrcpv",
		},
	},
	['haddps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xF2\x0F\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"F2", "0F", "7C", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "m128"},
			name = "haddps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xF2\x0F\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"F2", "0F", "7C", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "xmm"},
			name = "haddps",
		},
	},
	['vgatherpf1dps'] = {
		['m64z {k}'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64z {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C6", "/2"},
			metadata = "AVX512_PFI",
			operands = {"m64z {k}"},
			name = "vgatherpf1dps",
		},
		['vm32'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C6", "/2"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vgatherpf1dps",
		},
	},
	['jns'] = {
		['i8'] = {
			func = function(op1) return "\x79"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"79", "cb"},
			metadata = "ANY              Control=Branch SF=R",
			operands = {"string"},
			name = "jns",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x89"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "89", "cw"},
			metadata = "X86              Control=Branch SF=R",
			operands = {"string"},
			name = "jns",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x89"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "89", "cd"},
			metadata = "ANY              Control=Branch SF=R",
			operands = {"string"},
			name = "jns",
		},
		['string'] = {
			func = function(op1) return "\x0F\x89"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "89", "cd"},
			metadata = "ANY              Control=Branch SF=R",
			operands = {"string"},
			name = "jns",
		},
	},
	['blendpd'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x0D"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "0D", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm", "i8"},
			name = "blendpd",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x0D"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "0D", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128", "u8"},
			name = "blendpd",
		},
	},
	['vcvtps2udq'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.0F.W0", "79", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vcvtps2udq",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.0F.W0", "79", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vcvtps2udq",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.0F.W0", "79", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vcvtps2udq",
		},
		['zmm {kz},b32 {er}'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {er}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {er}",
			opcode = {"EVEX.512.0F.W0", "79", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32 {er}"},
			name = "vcvtps2udq",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.0F.W0", "79", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vcvtps2udq",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.0F.W0", "79", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vcvtps2udq",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {er}",
			opcode = {"EVEX.512.0F.W0", "79", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vcvtps2udq",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.0F.W0", "79", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vcvtps2udq",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {er}",
			opcode = {"EVEX.512.0F.W0", "79", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vcvtps2udq",
		},
	},
	['sbb'] = {
		['r64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/3", "id"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r64", "i32"},
			name = "sbb",
		},
		['m64,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/3", "id"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m64", "u32"},
			name = "sbb",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x19"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64",
			opcode = {"REX.W", "19", "/r"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m32", "r64"},
			name = "sbb",
		},
		['m16,u16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"m16", "uw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, iw/uw",
			opcode = {"66", "81", "/3", "iw"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m16", "u16"},
			name = "sbb",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"1B", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r32", "m32"},
			name = "sbb",
		},
		['m32,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/3", "id"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m32", "i32"},
			name = "sbb",
		},
		['ax,u16'] = {
			func = function(op1, op2) return "\x66\x1D"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "uw"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:ax, iw/uw",
			opcode = {"66", "1D", "iw"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"ax", "u16"},
			name = "sbb",
		},
		['r8,m8'] = {
			func = function(op1, op2) return "\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r8, r8/m8",
			opcode = {"1A", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r8", "m8"},
			name = "sbb",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32",
			opcode = {"19", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m32", "r32"},
			name = "sbb",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x19"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16",
			opcode = {"66", "19", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m16", "r16"},
			name = "sbb",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64",
			opcode = {"REX.W", "19", "/r"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r64", "r64"},
			name = "sbb",
		},
		['eax,u32'] = {
			func = function(op1, op2) return "\x1D"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "ud"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:eax, id/ud",
			opcode = {"1D", "id"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"eax", "u32"},
			name = "sbb",
		},
		['eax,i32'] = {
			func = function(op1, op2) return "\x1D"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:eax, id/ud",
			opcode = {"1D", "id"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"eax", "i32"},
			name = "sbb",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16",
			opcode = {"66", "19", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r16", "r16"},
			name = "sbb",
		},
		['r8,r8'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r8/m8, r8",
			opcode = {"18", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r8", "r8"},
			name = "sbb",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32",
			opcode = {"19", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m64", "r32"},
			name = "sbb",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"80", "/3", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m8", "u8"},
			name = "sbb",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/3", "ib"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r64", "i8"},
			name = "sbb",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"1B", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r32", "m64"},
			name = "sbb",
		},
		['r32,i32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/3", "id"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r32", "i32"},
			name = "sbb",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\x83"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib",
			opcode = {"83", "/3", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r32", "i8"},
			name = "sbb",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "1B", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r64", "m32"},
			name = "sbb",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "1B", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r16", "m16"},
			name = "sbb",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "1B", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r64", "m64"},
			name = "sbb",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32",
			opcode = {"19", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r32", "r32"},
			name = "sbb",
		},
		['m16,i8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib",
			opcode = {"66", "83", "/3", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m16", "i8"},
			name = "sbb",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x19"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64",
			opcode = {"REX.W", "19", "/r"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m64", "r64"},
			name = "sbb",
		},
		['m64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/3", "id"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m64", "i32"},
			name = "sbb",
		},
		['m8,r8'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r8/m8, r8",
			opcode = {"18", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m8", "r8"},
			name = "sbb",
		},
		['al,u8'] = {
			func = function(op1, op2) return "\x1C"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:al, ib/ub",
			opcode = {"1C", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"al", "u8"},
			name = "sbb",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib",
			opcode = {"66", "83", "/3", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r16", "i8"},
			name = "sbb",
		},
		['rax,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x1D"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"rax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:rax, id",
			opcode = {"REX.W", "1D", "id"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"rax", "i32"},
			name = "sbb",
		},
		['r16,i16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"r16", "iw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, iw/uw",
			opcode = {"66", "81", "/3", "iw"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r16", "i16"},
			name = "sbb",
		},
		['al,i8'] = {
			func = function(op1, op2) return "\x1C"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:al, ib/ub",
			opcode = {"1C", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"al", "i8"},
			name = "sbb",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"80", "/3", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r8", "i8"},
			name = "sbb",
		},
		['m64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/3", "ib"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m64", "i8"},
			name = "sbb",
		},
		['m32,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/3", "ib"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m32", "i8"},
			name = "sbb",
		},
		['m32,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/3", "id"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m32", "u32"},
			name = "sbb",
		},
		['ax,i16'] = {
			func = function(op1, op2) return "\x66\x1D"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "iw"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:ax, iw/uw",
			opcode = {"66", "1D", "iw"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"ax", "i16"},
			name = "sbb",
		},
	},
	['fyl2x'] = {
		[''] = {
			func = function(op1) return "\xD9\xF1" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "F1"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fyl2x",
		},
	},
	['idiv'] = {
		['m8'] = {
			func = function(op1) return "\xF6"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:<ax>, r8/m8",
			opcode = {"F6", "/7"},
			metadata = "ANY              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"m8"},
			name = "idiv",
		},
		['r8'] = {
			func = function(op1) return "\xF6"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:<ax>, r8/m8",
			opcode = {"F6", "/7"},
			metadata = "ANY              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"r8"},
			name = "idiv",
		},
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:<rdx>, X:<rax>, r64/m32/m64",
			opcode = {"REX.W", "F7", "/7"},
			metadata = "X64              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"m32"},
			name = "idiv",
		},
		['r16'] = {
			func = function(op1) return "\x66\xF7"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:<dx>, x:<ax>, r16/m16",
			opcode = {"66", "F7", "/7"},
			metadata = "ANY              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"r16"},
			name = "idiv",
		},
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:<rdx>, X:<rax>, r64/m32/m64",
			opcode = {"REX.W", "F7", "/7"},
			metadata = "X64              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"r64"},
			name = "idiv",
		},
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:<rdx>, X:<rax>, r64/m32/m64",
			opcode = {"REX.W", "F7", "/7"},
			metadata = "X64              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"m64"},
			name = "idiv",
		},
		['r32'] = {
			func = function(op1) return "\xF7"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:<edx>, X:<eax>, r32/m32/m64",
			opcode = {"F7", "/7"},
			metadata = "ANY              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"r32"},
			name = "idiv",
		},
		['m16'] = {
			func = function(op1) return "\x66\xF7"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:<dx>, x:<ax>, r16/m16",
			opcode = {"66", "F7", "/7"},
			metadata = "ANY              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"m16"},
			name = "idiv",
		},
	},
	['vrcp28sd'] = {
		['xmm {kz},xmm[15:8],m64 {sae}'] = {
			func = function(op1, op2, op3) return "\xCB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64 {sae}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "CB", "/r"},
			metadata = "AVX512_ERI",
			operands = {"xmm {kz}", "xmm[15:8]", "m64 {sae}"},
			name = "vrcp28sd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xCB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "CB", "/r"},
			metadata = "AVX512_ERI",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			name = "vrcp28sd",
		},
		['xmm {kz},xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\xCB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "CB", "/r"},
			metadata = "AVX512_ERI",
			operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			name = "vrcp28sd",
		},
	},
	['vfmsubadd231pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "B7", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmsubadd231pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "B7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmsubadd231pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "B7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmsubadd231pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "B7", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmsubadd231pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "B7", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmsubadd231pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "B7", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmsubadd231pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "B7", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfmsubadd231pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "B7", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmsubadd231pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "B7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfmsubadd231pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "B7", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmsubadd231pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "B7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfmsubadd231pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "B7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmsubadd231pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "B7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmsubadd231pd",
		},
	},
	['vldmxcsr'] = {
		['m32'] = {
			func = function(op1) return "\xAE"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"VEX.LZ.0F.WIG", "AE", "/2"},
			metadata = "AVX",
			operands = {"m32"},
			name = "vldmxcsr",
		},
		['m64'] = {
			func = function(op1) return "\xAE"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"VEX.LZ.0F.WIG", "AE", "/2"},
			metadata = "AVX",
			operands = {"m64"},
			name = "vldmxcsr",
		},
	},
	['kmovb'] = {
		['k[0],k[0]'] = {
			func = function(op1, op2) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[0]", "k[0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[0], k[0]/m8",
			opcode = {"VEX.L0.66.0F.W0", "90", "/r"},
			metadata = "AVX512_DQ",
			operands = {"k[0]", "k[0]"},
			name = "kmovb",
		},
		['k[0],m8'] = {
			func = function(op1, op2) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[0]", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[0], k[0]/m8",
			opcode = {"VEX.L0.66.0F.W0", "90", "/r"},
			metadata = "AVX512_DQ",
			operands = {"k[0]", "m8"},
			name = "kmovb",
		},
		['r32[0],k[0]'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[0]", "k[0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32[0], k[0]",
			opcode = {"VEX.L0.66.0F.W0", "93", "/r"},
			metadata = "AVX512_DQ",
			operands = {"r32[0]", "k[0]"},
			name = "kmovb",
		},
		['r64[0],k[0]'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[0]", "k[0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64[0], k[0]",
			opcode = {"VEX.L0.66.0F.W0", "93", "/r"},
			metadata = "AVX512_DQ X64",
			operands = {"r64[0]", "k[0]"},
			name = "kmovb",
		},
		['k[0],r64[0]'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[0]", "r64[0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[0], r64[0]",
			opcode = {"VEX.L0.66.0F.W0", "92", "/r"},
			metadata = "AVX512_DQ X64",
			operands = {"k[0]", "r64[0]"},
			name = "kmovb",
		},
		['m8,k[0]'] = {
			func = function(op1, op2) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8", "k[0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m8, k[0]",
			opcode = {"VEX.L0.66.0F.W0", "91", "/r"},
			metadata = "AVX512_DQ",
			operands = {"m8", "k[0]"},
			name = "kmovb",
		},
		['k[0],r32[0]'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[0]", "r32[0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[0], r32[0]",
			opcode = {"VEX.L0.66.0F.W0", "92", "/r"},
			metadata = "AVX512_DQ",
			operands = {"k[0]", "r32[0]"},
			name = "kmovb",
		},
	},
	['movq'] = {
		['m64,mm'] = {
			func = function(op1, op2) return "\x0F\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64", "mm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:mm/m32/m64, mm",
			opcode = {"0F", "7F", "/r"},
			metadata = "MMX",
			operands = {"m64", "mm"},
			name = "movq",
		},
		['mm,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, r64/m32/m64",
			opcode = {"REX.W", "0F", "6E", "/r"},
			metadata = "MMX X64",
			operands = {"mm", "m64"},
			name = "movq",
		},
		['mm,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, r64/m32/m64",
			opcode = {"REX.W", "0F", "6E", "/r"},
			metadata = "MMX X64",
			operands = {"mm", "r64"},
			name = "movq",
		},
		['xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\x66\x0F\xD6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64, xmm[7:0]",
			opcode = {"66", "0F", "D6", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "xmm[7:0]"},
			name = "movq",
		},
		['m64,xmm[7:0]'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x66\x0F\x7E"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, xmm[7:0]",
			opcode = {"REX.W", "66", "0F", "7E", "/r"},
			metadata = "SSE2 X64",
			operands = {"m64", "xmm[7:0]"},
			name = "movq",
		},
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F3", "0F", "7E", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m64"},
			name = "movq",
		},
		['mm,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, r64/m32/m64",
			opcode = {"REX.W", "0F", "6E", "/r"},
			metadata = "MMX X64",
			operands = {"mm", "m32"},
			name = "movq",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F3", "0F", "7E", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m32"},
			name = "movq",
		},
		['xmm[7:0],r64[7:0]'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x66\x0F\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "r64[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], r64[7:0]/m32/m64",
			opcode = {"REX.W", "66", "0F", "6E", "/r"},
			metadata = "SSE2 X64",
			operands = {"xmm[7:0]", "r64[7:0]"},
			name = "movq",
		},
		['m32,xmm[7:0]'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x66\x0F\x7E"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, xmm[7:0]",
			opcode = {"REX.W", "66", "0F", "7E", "/r"},
			metadata = "SSE2 X64",
			operands = {"m32", "xmm[7:0]"},
			name = "movq",
		},
		['r64,xmm[7:0]'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x66\x0F\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, xmm[7:0]",
			opcode = {"REX.W", "66", "0F", "7E", "/r"},
			metadata = "SSE2 X64",
			operands = {"r64", "xmm[7:0]"},
			name = "movq",
		},
		['m32,mm'] = {
			func = function(op1, op2) return "\x0F\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "mm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:mm/m32/m64, mm",
			opcode = {"0F", "7F", "/r"},
			metadata = "MMX",
			operands = {"m32", "mm"},
			name = "movq",
		},
		['r64,mm'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "mm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, mm",
			opcode = {"REX.W", "0F", "7E", "/r"},
			metadata = "MMX X64",
			operands = {"r64", "mm"},
			name = "movq",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:mm/m32/m64, mm",
			opcode = {"0F", "7F", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "movq",
		},
	},
	['shufps'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x0F\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"0F", "C6", "/r", "ib"},
			metadata = "SSE",
			operands = {"xmm", "xmm", "i8"},
			name = "shufps",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x0F\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"0F", "C6", "/r", "ib"},
			metadata = "SSE",
			operands = {"xmm", "m128", "u8"},
			name = "shufps",
		},
	},
	['vpaddsw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xED"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "ED", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpaddsw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xED"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "ED", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpaddsw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xED"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "ED", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpaddsw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xED"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "ED", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpaddsw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xED"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "ED", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpaddsw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xED"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "ED", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpaddsw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xED"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "ED", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpaddsw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xED"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "ED", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpaddsw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xED"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "ED", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpaddsw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xED"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "ED", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpaddsw",
		},
	},
	['vpcmpestri'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x61"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<ecx>,<eax>,<edx>",
			opcode = {"VEX.128.66.0F3A.WIG", "61", "/r", "ib"},
			metadata = "AVX OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "xmm", "i8"},
			name = "vpcmpestri",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x61"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<ecx>,<eax>,<edx>",
			opcode = {"VEX.128.66.0F3A.WIG", "61", "/r", "ib"},
			metadata = "AVX OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "m128", "u8"},
			name = "vpcmpestri",
		},
	},
	['pfrsqrt'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x97" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "97"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pfrsqrt",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x97" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "97"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pfrsqrt",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x97" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "97"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pfrsqrt",
		},
	},
	['monitorx'] = {
		[''] = {
			func = function() return "\x0F\x01\xFA" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:<ds:zax>, R:<ecx>, R:<edx>",
			opcode = {"0F", "01", "FA"},
			metadata = "MONITORX         Volatile",
			operands = {},
			name = "monitorx",
		},
	},
	['vrcp28ss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xCB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "CB", "/r"},
			metadata = "AVX512_ERI",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			name = "vrcp28ss",
		},
		['xmm {kz},xmm[15:4],m64 {sae}'] = {
			func = function(op1, op2, op3) return "\xCB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64 {sae}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "CB", "/r"},
			metadata = "AVX512_ERI",
			operands = {"xmm {kz}", "xmm[15:4]", "m64 {sae}"},
			name = "vrcp28ss",
		},
		['xmm {kz},xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\xCB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "CB", "/r"},
			metadata = "AVX512_ERI",
			operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			name = "vrcp28ss",
		},
	},
	['pi2fd'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x0D" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "0D"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pi2fd",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x0D" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "0D"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pi2fd",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x0D" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "0D"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pi2fd",
		},
	},
	['adox'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x38\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32, ~r32/m32/m64",
			opcode = {"F3", "0F", "38", "F6", "/r"},
			metadata = "ADX              OF=X",
			operands = {"r32", "m32"},
			name = "adox",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\xF3\x0F\x38\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32, ~r32/m32/m64",
			opcode = {"F3", "0F", "38", "F6", "/r"},
			metadata = "ADX              OF=X",
			operands = {"r32", "r32"},
			name = "adox",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x38\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32, ~r32/m32/m64",
			opcode = {"F3", "0F", "38", "F6", "/r"},
			metadata = "ADX              OF=X",
			operands = {"r32", "m64"},
			name = "adox",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\x38\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64, ~r64/m32/m64",
			opcode = {"REX.W", "F3", "0F", "38", "F6", "/r"},
			metadata = "ADX X64          OF=X",
			operands = {"r64", "m64"},
			name = "adox",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\x38\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64, ~r64/m32/m64",
			opcode = {"REX.W", "F3", "0F", "38", "F6", "/r"},
			metadata = "ADX X64          OF=X",
			operands = {"r64", "m32"},
			name = "adox",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\x38\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64, ~r64/m32/m64",
			opcode = {"REX.W", "F3", "0F", "38", "F6", "/r"},
			metadata = "ADX X64          OF=X",
			operands = {"r64", "r64"},
			name = "adox",
		},
	},
	['faddp'] = {
		[''] = {
			func = function(op1) return "\xDE\xC1" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"DE", "C1"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "faddp",
		},
		['st(i)'] = {
			func = function(op1) return "\xDE" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"DE", "C0+i"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "faddp",
		},
	},
	['pcmpgtb'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "64", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "pcmpgtb",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "64", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "pcmpgtb",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "64", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "pcmpgtb",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "64", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pcmpgtb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "64", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pcmpgtb",
		},
	},
	['vrcpps'] = {
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.0F.WIG", "53", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vrcpps",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.0F.WIG", "53", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vrcpps",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.0F.WIG", "53", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vrcpps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.0F.WIG", "53", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vrcpps",
		},
	},
	['jnbe'] = {
		['string'] = {
			func = function(op1) return "\x0F\x87"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"string"},
			encoding = "D",
			has_relative = false,
			operands2 = "rel32",
			opcode = {"0F", "87", "cd"},
			metadata = "ANY              Control=Branch CF=R ZF=R",
			operands = {"string"},
			name = "jnbe",
		},
	},
	['vfnmaddps'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "78", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vfnmaddps",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "78", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vfnmaddps",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "78", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vfnmaddps",
		},
		['ymm,ymm,ymm,m256'] = {
			func = function(op1, op2, op3, op4) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "m256"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "78", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "m256"},
			name = "vfnmaddps",
		},
		['xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "78", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "m128"},
			name = "vfnmaddps",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "78", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vfnmaddps",
		},
	},
	['blsmsk'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r32", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W0", "F3", "/2"},
			metadata = "BMI              OF=0 SF=W ZF=0 AF=U PF=U CF=W",
			operands = {"r32", "m32"},
			name = "blsmsk",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r32", "r32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W0", "F3", "/2"},
			metadata = "BMI              OF=0 SF=W ZF=0 AF=U PF=U CF=W",
			operands = {"r32", "r32"},
			name = "blsmsk",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r32", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W0", "F3", "/2"},
			metadata = "BMI              OF=0 SF=W ZF=0 AF=U PF=U CF=W",
			operands = {"r32", "m64"},
			name = "blsmsk",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r64", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W1", "F3", "/2"},
			metadata = "BMI X64          OF=0 SF=W ZF=0 AF=U PF=U CF=W",
			operands = {"r64", "m64"},
			name = "blsmsk",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r64", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W1", "F3", "/2"},
			metadata = "BMI X64          OF=0 SF=W ZF=0 AF=U PF=U CF=W",
			operands = {"r64", "m32"},
			name = "blsmsk",
		},
		['r64,r64'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r64", "r64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W1", "F3", "/2"},
			metadata = "BMI X64          OF=0 SF=W ZF=0 AF=U PF=U CF=W",
			operands = {"r64", "r64"},
			name = "blsmsk",
		},
	},
	['vpmovzxbd'] = {
		['zmm {kz},m128'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m128"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm/m128",
			opcode = {"EVEX.512.66.0F38.WIG", "31", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m128"},
			name = "vpmovzxbd",
		},
		['xmm,xmm[3:0]'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "31", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[3:0]"},
			name = "vpmovzxbd",
		},
		['zmm {kz},xmm'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "xmm"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm/m128",
			opcode = {"EVEX.512.66.0F38.WIG", "31", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "xmm"},
			name = "vpmovzxbd",
		},
		['ymm,m32'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[7:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "31", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m32"},
			name = "vpmovzxbd",
		},
		['ymm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[7:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "31", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm[7:0]"},
			name = "vpmovzxbd",
		},
		['xmm {kz},xmm[3:0]'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[3:0]"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "31", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[3:0]"},
			name = "vpmovzxbd",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "31", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m64"},
			name = "vpmovzxbd",
		},
		['ymm,m64'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[7:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "31", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m64"},
			name = "vpmovzxbd",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "31", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vpmovzxbd",
		},
		['ymm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm[7:0]"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "31", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm[7:0]"},
			name = "vpmovzxbd",
		},
		['ymm {kz},m64'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m64"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "31", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m64"},
			name = "vpmovzxbd",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "31", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vpmovzxbd",
		},
		['ymm {kz},m32'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m32"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "31", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m32"},
			name = "vpmovzxbd",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "31", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m32"},
			name = "vpmovzxbd",
		},
	},
	['bndmov'] = {
		['bnd,m64'] = {
			func = function(op1, op2) return "\x66\x0F\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:bnd, bnd/m32/m64",
			opcode = {"66", "0F", "1A", "/r"},
			metadata = "MPX",
			operands = {"bnd", "m64"},
			name = "bndmov",
		},
		['m32,bnd'] = {
			func = function(op1, op2) return "\x66\x0F\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "bnd"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:bnd/m32/m64, bnd",
			opcode = {"66", "0F", "1B", "/r"},
			metadata = "MPX",
			operands = {"m32", "bnd"},
			name = "bndmov",
		},
		['bnd,bnd'] = {
			func = function(op1, op2) return "\x66\x0F\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "bnd"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:bnd/m32/m64, bnd",
			opcode = {"66", "0F", "1B", "/r"},
			metadata = "MPX",
			operands = {"bnd", "bnd"},
			name = "bndmov",
		},
		['m64,bnd'] = {
			func = function(op1, op2) return "\x66\x0F\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64", "bnd"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:bnd/m32/m64, bnd",
			opcode = {"66", "0F", "1B", "/r"},
			metadata = "MPX",
			operands = {"m64", "bnd"},
			name = "bndmov",
		},
		['bnd,m32'] = {
			func = function(op1, op2) return "\x66\x0F\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:bnd, bnd/m32/m64",
			opcode = {"66", "0F", "1A", "/r"},
			metadata = "MPX",
			operands = {"bnd", "m32"},
			name = "bndmov",
		},
	},
	['sysexit'] = {
		[''] = {
			func = function(op1) return "\x0F\x35" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "35"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {""},
			name = "sysexit",
		},
	},
	['sar'] = {
		['m16,u8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/7", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "u8"},
			name = "sar",
		},
		['m8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/7"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "1"},
			name = "sar",
		},
		['m32,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/7", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "u8"},
			name = "sar",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/7", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "u8"},
			name = "sar",
		},
		['r8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/7"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "cl"},
			name = "sar",
		},
		['r16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/7"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "cl"},
			name = "sar",
		},
		['m16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/7"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "cl"},
			name = "sar",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\xC1"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib/ub",
			opcode = {"C1", "/7", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "i8"},
			name = "sar",
		},
		['r32,cl'] = {
			func = function(op1, op2) return "\xD3"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, cl",
			opcode = {"D3", "/7"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "cl"},
			name = "sar",
		},
		['r32,1'] = {
			func = function(op1, op2) return "\xD1"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, 1",
			opcode = {"D1", "/7"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "1"},
			name = "sar",
		},
		['m64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/7"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "cl"},
			name = "sar",
		},
		['m64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/7"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "1"},
			name = "sar",
		},
		['r16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/7"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "1"},
			name = "sar",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/7", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "i8"},
			name = "sar",
		},
		['r64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/7"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "cl"},
			name = "sar",
		},
		['r64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/7"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "1"},
			name = "sar",
		},
		['m64,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/7", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "u8"},
			name = "sar",
		},
		['m8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/7"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "cl"},
			name = "sar",
		},
		['m32,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/7"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "1"},
			name = "sar",
		},
		['r8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/7"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "1"},
			name = "sar",
		},
		['m32,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/7"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "cl"},
			name = "sar",
		},
		['m16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/7"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "1"},
			name = "sar",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/7", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "i8"},
			name = "sar",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/7", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "i8"},
			name = "sar",
		},
	},
	['pminud'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "3B", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "pminud",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "3B", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm"},
			name = "pminud",
		},
	},
	['vcvtqq2ps'] = {
		['xmm[7:0] {kz},m128'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.0F.W1", "5B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm[7:0] {kz}", "m128"},
			name = "vcvtqq2ps",
		},
		['ymm {kz},m512'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.0F.W1", "5B", "/r"},
			metadata = "AVX512_DQ",
			operands = {"ymm {kz}", "m512"},
			name = "vcvtqq2ps",
		},
		['xmm[7:0] {kz},b64'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.0F.W1", "5B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm[7:0] {kz}", "b64"},
			name = "vcvtqq2ps",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.0F.W1", "5B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vcvtqq2ps",
		},
		['ymm {kz},zmm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.0F.W1", "5B", "/r"},
			metadata = "AVX512_DQ",
			operands = {"ymm {kz}", "zmm"},
			name = "vcvtqq2ps",
		},
		['xmm {kz},ymm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.0F.W1", "5B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "ymm"},
			name = "vcvtqq2ps",
		},
		['ymm {kz},b64 {er}'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64 {er}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.0F.W1", "5B", "/r"},
			metadata = "AVX512_DQ",
			operands = {"ymm {kz}", "b64 {er}"},
			name = "vcvtqq2ps",
		},
		['xmm[7:0] {kz},xmm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.0F.W1", "5B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm[7:0] {kz}", "xmm"},
			name = "vcvtqq2ps",
		},
		['xmm {kz},m256'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.0F.W1", "5B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m256"},
			name = "vcvtqq2ps",
		},
	},
	['vfmadd231ss'] = {
		['xmm[3:0] {kz},xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xB9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "B9", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			name = "vfmadd231ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xB9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "B9", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			name = "vfmadd231ss",
		},
		['xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3) return "\xB9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "B9", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfmadd231ss",
		},
		['xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xB9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "B9", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfmadd231ss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xB9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "B9", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfmadd231ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xB9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "B9", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			name = "vfmadd231ss",
		},
	},
	['vphaddsw'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "03", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vphaddsw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "03", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vphaddsw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "03", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vphaddsw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "03", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vphaddsw",
		},
	},
	['movddup'] = {
		['xmm,m64'] = {
			func = function(op1, op2) return "\xF2\x0F\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "12", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "m64"},
			name = "movddup",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "12", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "xmm[7:0]"},
			name = "movddup",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\xF2\x0F\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "12", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "m32"},
			name = "movddup",
		},
	},
	['vpmulhw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xE5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "E5", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmulhw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "E5", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmulhw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xE5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "E5", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmulhw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E5", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmulhw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E5", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpmulhw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xE5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E5", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmulhw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xE5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "E5", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmulhw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xE5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E5", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpmulhw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xE5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "E5", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmulhw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "E5", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmulhw",
		},
	},
	['vmlaunch'] = {
		[''] = {
			func = function(op1) return "\x0F\x01\xC2" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "01", "C2"},
			metadata = "VMX              PRIVILEGE=L0",
			operands = {""},
			name = "vmlaunch",
		},
	},
	['cmovne'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "45", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r32", "m32"},
			name = "cmovne",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "45", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r32", "r32"},
			name = "cmovne",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "45", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r32", "m64"},
			name = "cmovne",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "45", "/r"},
			metadata = "CMOV X64         ZF=R",
			operands = {"r64", "m64"},
			name = "cmovne",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "45", "/r"},
			metadata = "CMOV X64         ZF=R",
			operands = {"r64", "m32"},
			name = "cmovne",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "45", "/r"},
			metadata = "CMOV X64         ZF=R",
			operands = {"r64", "r64"},
			name = "cmovne",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "45", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r16", "r16"},
			name = "cmovne",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "45", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r16", "m16"},
			name = "cmovne",
		},
	},
	['lidt'] = {
		['m32'] = {
			func = function(op1) return "\x0F\x01"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "01", "/3"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {"m32"},
			name = "lidt",
		},
		['m64'] = {
			func = function(op1) return "\x0F\x01"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "01", "/3"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {"m64"},
			name = "lidt",
		},
	},
	['fsincos'] = {
		[''] = {
			func = function(op1) return "\xD9\xFB" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "FB"},
			metadata = "FPU_PUSH         C0=U C1=W C2=W C3=U",
			operands = {""},
			name = "fsincos",
		},
	},
	['lsl'] = {
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, R:r32/m16",
			opcode = {"0F", "03", "/r"},
			metadata = "ANY              Volatile   ZF=W",
			operands = {"r32", "r32"},
			name = "lsl",
		},
		['r32,m16'] = {
			func = function(op1, op2) return "\x0F\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, R:r32/m16",
			opcode = {"0F", "03", "/r"},
			metadata = "ANY              Volatile   ZF=W",
			operands = {"r32", "m16"},
			name = "lsl",
		},
		['r64,m16'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, R:r32/m16",
			opcode = {"REX.W", "0F", "03", "/r"},
			metadata = "X64              Volatile   ZF=W",
			operands = {"r64", "m16"},
			name = "lsl",
		},
		['r64,r32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, R:r32/m16",
			opcode = {"REX.W", "0F", "03", "/r"},
			metadata = "X64              Volatile   ZF=W",
			operands = {"r64", "r32"},
			name = "lsl",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, R:r16/m16",
			opcode = {"66", "0F", "03", "/r"},
			metadata = "ANY              Volatile   ZF=W",
			operands = {"r16", "r16"},
			name = "lsl",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, R:r16/m16",
			opcode = {"66", "0F", "03", "/r"},
			metadata = "ANY              Volatile   ZF=W",
			operands = {"r16", "m16"},
			name = "lsl",
		},
	},
	['rcpps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"0F", "53", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "rcpps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"0F", "53", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "rcpps",
		},
	},
	['kxnord'] = {
		['k[3:0],k[3:0],k[3:0]'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[3:0]", "k[3:0]", "k[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[3:0], k[3:0], k[3:0]",
			opcode = {"VEX.L1.66.0F.W1", "46", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "k[3:0]", "k[3:0]"},
			name = "kxnord",
		},
	},
	['cdq'] = {
		[''] = {
			func = function() return "\x99" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:<edx>, <eax>",
			opcode = {"99"},
			metadata = "ANY",
			operands = {},
			name = "cdq",
		},
	},
	['vfnmadd231ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "BC", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfnmadd231ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "BC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfnmadd231ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "BC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfnmadd231ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "BC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfnmadd231ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "BC", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfnmadd231ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "BC", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfnmadd231ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "BC", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfnmadd231ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "BC", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfnmadd231ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "BC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfnmadd231ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "BC", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfnmadd231ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "BC", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfnmadd231ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "BC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfnmadd231ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "BC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfnmadd231ps",
		},
	},
	['pfadd'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x9E" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "9E"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pfadd",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x9E" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "9E"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pfadd",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x9E" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "9E"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pfadd",
		},
	},
	['vpandnq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "DF", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpandnq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "DF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpandnq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "DF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpandnq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "DF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpandnq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "DF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpandnq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "DF", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpandnq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "DF", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpandnq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "DF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpandnq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "DF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpandnq",
		},
	},
	['lahf'] = {
		[''] = {
			func = function() return "\x9F" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "w:<ah>",
			opcode = {"9F"},
			metadata = "LAHFSAHF         Volatile SF=R ZF=R AF=R PF=R CF=R",
			operands = {},
			name = "lahf",
		},
	},
	['kshiftlq'] = {
		['k[7:0],k[7:0],u8'] = {
			func = function(op1, op2, op3) return "\x33"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[7:0]", "k[7:0]", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[7:0], k[7:0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W1", "33", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k[7:0]", "k[7:0]", "u8"},
			name = "kshiftlq",
		},
		['k[7:0],k[7:0],i8'] = {
			func = function(op1, op2, op3) return "\x33"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[7:0]", "k[7:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[7:0], k[7:0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W1", "33", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k[7:0]", "k[7:0]", "i8"},
			name = "kshiftlq",
		},
	},
	['loop'] = {
		['i8'] = {
			func = function(op1) return "\xE2"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "X:<rcx>, rel8",
			opcode = {"E2", "cb"},
			metadata = "X64              Control=Branch",
			operands = {"string"},
			name = "loop",
		},
		['string'] = {
			func = function(op1) return "\xE2"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "X:<rcx>, rel8",
			opcode = {"E2", "cb"},
			metadata = "X64              Control=Branch",
			operands = {"string"},
			name = "loop",
		},
	},
	['vpmacssdqh'] = {
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x8F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "8F", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vpmacssdqh",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x8F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "8F", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vpmacssdqh",
		},
	},
	['vsqrtsd'] = {
		['xmm,xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "51", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			name = "vsqrtsd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "51", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			name = "vsqrtsd",
		},
		['xmm {kz},xmm[15:8],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "51", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m64 {er}"},
			name = "vsqrtsd",
		},
		['xmm,xmm[15:8],m64'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "51", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m64"},
			name = "vsqrtsd",
		},
		['xmm,xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "51", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m32"},
			name = "vsqrtsd",
		},
		['xmm {kz},xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "51", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			name = "vsqrtsd",
		},
	},
	['blendps'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x0C"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "0C", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm", "i8"},
			name = "blendps",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x0C"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "0C", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128", "u8"},
			name = "blendps",
		},
	},
	['pfmin'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x94" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "94"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pfmin",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x94" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "94"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pfmin",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x94" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "94"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pfmin",
		},
	},
	['vpmaddubsw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "04", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmaddubsw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "04", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmaddubsw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "04", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmaddubsw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "04", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmaddubsw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "04", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpmaddubsw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "04", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmaddubsw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "04", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmaddubsw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "04", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpmaddubsw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "04", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmaddubsw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "04", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmaddubsw",
		},
	},
	['cmovnae'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "42", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "m32"},
			name = "cmovnae",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "42", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "r32"},
			name = "cmovnae",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "42", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "m64"},
			name = "cmovnae",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "42", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "m64"},
			name = "cmovnae",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "42", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "m32"},
			name = "cmovnae",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "42", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "r64"},
			name = "cmovnae",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "42", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r16", "r16"},
			name = "cmovnae",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "42", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r16", "m16"},
			name = "cmovnae",
		},
	},
	['vcvtps2dq'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vcvtps2dq",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vcvtps2dq",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.66.0F.WIG", "5B", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vcvtps2dq",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.66.0F.WIG", "5B", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vcvtps2dq",
		},
		['zmm {kz},b32 {er}'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {er}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {er}",
			opcode = {"EVEX.512.66.0F.W0", "5B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32 {er}"},
			name = "vcvtps2dq",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {er}",
			opcode = {"EVEX.512.66.0F.W0", "5B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vcvtps2dq",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vcvtps2dq",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {er}",
			opcode = {"EVEX.512.66.0F.W0", "5B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vcvtps2dq",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vcvtps2dq",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vcvtps2dq",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vcvtps2dq",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.66.0F.WIG", "5B", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vcvtps2dq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.66.0F.WIG", "5B", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vcvtps2dq",
		},
	},
	['vpsrad'] = {
		['xmm,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "72", "/4", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "u8"},
			name = "vpsrad",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W0", "72", "/4", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vpsrad",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.W0", "E2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsrad",
		},
		['ymm,ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E2", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "xmm"},
			name = "vpsrad",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E2", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsrad",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "72", "/4", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "i8"},
			name = "vpsrad",
		},
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "72", "/4", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "i8"},
			name = "vpsrad",
		},
		['zmm {kz},zmm,m128'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.W0", "E2", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m128"},
			name = "vpsrad",
		},
		['xmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b32", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W0", "72", "/4", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32", "u8"},
			name = "vpsrad",
		},
		['ymm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b32", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W0", "72", "/4", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32", "u8"},
			name = "vpsrad",
		},
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W0", "72", "/4", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vpsrad",
		},
		['ymm {kz},ymm,m128'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.W0", "E2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m128"},
			name = "vpsrad",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W0", "72", "/4", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vpsrad",
		},
		['ymm {kz},ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.W0", "E2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "xmm"},
			name = "vpsrad",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W0", "72", "/4", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vpsrad",
		},
		['zmm {kz},zmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.W0", "E2", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "xmm"},
			name = "vpsrad",
		},
		['zmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b32", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W0", "72", "/4", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32", "u8"},
			name = "vpsrad",
		},
		['ymm,ymm,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "72", "/4", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "u8"},
			name = "vpsrad",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E2", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsrad",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W0", "72", "/4", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vpsrad",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W0", "72", "/4", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vpsrad",
		},
		['ymm,ymm,m128'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E2", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m128"},
			name = "vpsrad",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.W0", "E2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsrad",
		},
	},
	['fsubr'] = {
		['st(0),st(i)'] = {
			func = function(op1, op2) return "\xD8" end,
			real_operands = {"st(0)", "st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(0), st(i)",
			opcode = {"D8", "E8+i"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"st(0)", "st(i)"},
			name = "fsubr",
		},
		['st(i),st(0)'] = {
			func = function(op1, op2) return "\xDC" end,
			real_operands = {"st(i)", "st(0)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i), st(0)",
			opcode = {"DC", "E0+i"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"st(i)", "st(0)"},
			name = "fsubr",
		},
		['m32'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DC", "/5"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fsubr",
		},
		['m64fp'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m64fp"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DC", "/5"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m64fp"},
			name = "fsubr",
		},
	},
	['punpckldq'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "62", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "punpckldq",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "62", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "punpckldq",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "62", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "punpckldq",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "62", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "punpckldq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "62", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "punpckldq",
		},
	},
	['pmovzxwq'] = {
		['xmm,m64'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"66", "0F", "38", "34", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m64"},
			name = "pmovzxwq",
		},
		['xmm,xmm[3:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"66", "0F", "38", "34", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm[3:0]"},
			name = "pmovzxwq",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"66", "0F", "38", "34", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m32"},
			name = "pmovzxwq",
		},
	},
	['xadd'] = {
		['r8,r8'] = {
			func = function(op1, op2) return "\x0F\xC0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r8/m8, x:r8",
			opcode = {"0F", "C0", "/r"},
			metadata = "I486 _XLock      OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "r8"},
			name = "xadd",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\xC1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, X:r32",
			opcode = {"0F", "C1", "/r"},
			metadata = "I486 _XLock      OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "r32"},
			name = "xadd",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xC1"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, X:r64",
			opcode = {"REX.W", "0F", "C1", "/r"},
			metadata = "I486 X64 _XLock  OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "r64"},
			name = "xadd",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x0F\xC1"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, X:r32",
			opcode = {"0F", "C1", "/r"},
			metadata = "I486 _XLock      OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "r32"},
			name = "xadd",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x0F\xC1"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, X:r32",
			opcode = {"0F", "C1", "/r"},
			metadata = "I486 _XLock      OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "r32"},
			name = "xadd",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\xC1"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, x:r16",
			opcode = {"66", "0F", "C1", "/r"},
			metadata = "I486 _XLock      OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "r16"},
			name = "xadd",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xC1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, X:r64",
			opcode = {"REX.W", "0F", "C1", "/r"},
			metadata = "I486 X64 _XLock  OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "r64"},
			name = "xadd",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xC1"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, X:r64",
			opcode = {"REX.W", "0F", "C1", "/r"},
			metadata = "I486 X64 _XLock  OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "r64"},
			name = "xadd",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\xC1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, x:r16",
			opcode = {"66", "0F", "C1", "/r"},
			metadata = "I486 _XLock      OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "r16"},
			name = "xadd",
		},
		['m8,r8'] = {
			func = function(op1, op2) return "\x0F\xC0"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r8/m8, x:r8",
			opcode = {"0F", "C0", "/r"},
			metadata = "I486 _XLock      OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "r8"},
			name = "xadd",
		},
	},
	['pshufb'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x38\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "00", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m32"},
			name = "pshufb",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x38\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "00", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m64"},
			name = "pshufb",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x38\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "00", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "mm"},
			name = "pshufb",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "00", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "m128"},
			name = "pshufb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "00", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "xmm"},
			name = "pshufb",
		},
	},
	['ucomiss'] = {
		['xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\x0F\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"0F", "2E", "/r"},
			metadata = "SSE  OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[3:0]", "xmm[3:0]"},
			name = "ucomiss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\x0F\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"0F", "2E", "/r"},
			metadata = "SSE  OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[3:0]", "m32"},
			name = "ucomiss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\x0F\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"0F", "2E", "/r"},
			metadata = "SSE  OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[3:0]", "m64"},
			name = "ucomiss",
		},
	},
	['stgi'] = {
		[''] = {
			func = function(op1) return "\x0F\x01\xDC" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "01", "DC"},
			metadata = "SKINIT           PRIVILEGE=L0",
			operands = {""},
			name = "stgi",
		},
	},
	['vfmaddsub231pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "B6", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmaddsub231pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "B6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmaddsub231pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "B6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmaddsub231pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "B6", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmaddsub231pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "B6", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmaddsub231pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "B6", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmaddsub231pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "B6", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfmaddsub231pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "B6", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmaddsub231pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "B6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfmaddsub231pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "B6", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmaddsub231pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "B6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfmaddsub231pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "B6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmaddsub231pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "B6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmaddsub231pd",
		},
	},
	['loope'] = {
		['i8'] = {
			func = function(op1) return "\xE1"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "X:<rcx>, rel8",
			opcode = {"E1", "cb"},
			metadata = "X64              Control=Branch ZF=R",
			operands = {"string"},
			name = "loope",
		},
		['string'] = {
			func = function(op1) return "\xE1"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "X:<rcx>, rel8",
			opcode = {"E1", "cb"},
			metadata = "X64              Control=Branch ZF=R",
			operands = {"string"},
			name = "loope",
		},
	},
	['vfmaddsub132pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "96", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmaddsub132pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "96", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmaddsub132pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "96", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmaddsub132pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "96", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmaddsub132pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "96", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmaddsub132pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "96", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmaddsub132pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "96", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfmaddsub132pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "96", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmaddsub132pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "96", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfmaddsub132pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "96", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmaddsub132pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "96", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfmaddsub132pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "96", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmaddsub132pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "96", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmaddsub132pd",
		},
	},
	['movq2dq'] = {
		['xmm[7:0],mm'] = {
			func = function(op1, op2) return "\xF3\x0F\xD6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], mm",
			opcode = {"F3", "0F", "D6", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "mm"},
			name = "movq2dq",
		},
	},
	['psraw'] = {
		['mm,u8'] = {
			func = function(op1, op2) return "\x0F\x71"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "71", "/4", "ib"},
			metadata = "MMX",
			operands = {"mm", "u8"},
			name = "psraw",
		},
		['xmm,i8'] = {
			func = function(op1, op2) return "\x66\x0F\x71"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "71", "/4", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "i8"},
			name = "psraw",
		},
		['mm,i8'] = {
			func = function(op1, op2) return "\x0F\x71"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "71", "/4", "ib"},
			metadata = "MMX",
			operands = {"mm", "i8"},
			name = "psraw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "E1", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psraw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "E1", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "psraw",
		},
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "E1", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "psraw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "E1", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "psraw",
		},
		['xmm,u8'] = {
			func = function(op1, op2) return "\x66\x0F\x71"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "71", "/4", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "u8"},
			name = "psraw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "E1", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psraw",
		},
	},
	['pclmulqdq'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x44"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "44", "/r", "ib"},
			metadata = "PCLMULQDQ",
			operands = {"xmm", "xmm", "i8"},
			name = "pclmulqdq",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x44"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "44", "/r", "ib"},
			metadata = "PCLMULQDQ",
			operands = {"xmm", "m128", "u8"},
			name = "pclmulqdq",
		},
	},
	['vperm2f128'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x06"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "06", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vperm2f128",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x06"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "06", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vperm2f128",
		},
	},
	['cmovl'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4C", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r32", "m32"},
			name = "cmovl",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4C", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r32", "r32"},
			name = "cmovl",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4C", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r32", "m64"},
			name = "cmovl",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4C", "/r"},
			metadata = "CMOV X64         SF=R OF=R",
			operands = {"r64", "m64"},
			name = "cmovl",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4C", "/r"},
			metadata = "CMOV X64         SF=R OF=R",
			operands = {"r64", "m32"},
			name = "cmovl",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4C", "/r"},
			metadata = "CMOV X64         SF=R OF=R",
			operands = {"r64", "r64"},
			name = "cmovl",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4C", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r16", "r16"},
			name = "cmovl",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4C", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r16", "m16"},
			name = "cmovl",
		},
	},
	['movntdq'] = {
		['m128,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xE7"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m128, xmm",
			opcode = {"66", "0F", "E7", "/r"},
			metadata = "SSE2",
			operands = {"m128", "xmm"},
			name = "movntdq",
		},
	},
	['vpmuludq'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "F4", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmuludq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "F4", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmuludq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "F4", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmuludq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "F4", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmuludq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "F4", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpmuludq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "F4", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpmuludq",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "F4", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmuludq",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "F4", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmuludq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "F4", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpmuludq",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "F4", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpmuludq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "F4", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpmuludq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "F4", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmuludq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "F4", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmuludq",
		},
	},
	['xbegin'] = {
		['i16'] = {
			func = function(op1) return "\x66\xC7"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "NONE",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "C7", "/7", "cw"},
			metadata = "RTM              Volatile",
			operands = {"string"},
			name = "xbegin",
		},
		['i32'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "NONE",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"C7", "/7", "cd"},
			metadata = "RTM              Volatile",
			operands = {"string"},
			name = "xbegin",
		},
		['string'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "NONE",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"C7", "/7", "cd"},
			metadata = "RTM              Volatile",
			operands = {"string"},
			name = "xbegin",
		},
	},
	['vmovlpd'] = {
		['xmm,xmm[15:8],m64'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m64"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], m32/m64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "12", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm[15:8]", "m64"},
			name = "vmovlpd",
		},
		['m64,xmm[7:0]'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[7:0]",
			opcode = {"VEX.128.66.0F.WIG", "13", "/r"},
			metadata = "AVX",
			operands = {"m64", "xmm[7:0]"},
			name = "vmovlpd",
		},
		['xmm,xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], m32/m64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "12", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm[15:8]", "m32"},
			name = "vmovlpd",
		},
		['m32,xmm[7:0]'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[7:0]",
			opcode = {"VEX.128.66.0F.WIG", "13", "/r"},
			metadata = "AVX",
			operands = {"m32", "xmm[7:0]"},
			name = "vmovlpd",
		},
	},
	['movsd'] = {
		[''] = {
			func = function() return "\xA5" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<es:zdi>, X:<ds:zsi>",
			opcode = {"A5"},
			metadata = "ANY _Rep         DF=R",
			operands = {},
			name = "movsd",
		},
		['m32,xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[7:0]",
			opcode = {"F2", "0F", "11", "/r"},
			metadata = "SSE2",
			operands = {"m32", "xmm[7:0]"},
			name = "movsd",
		},
		['xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], xmm[7:0]",
			opcode = {"F2", "0F", "10", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "xmm[7:0]"},
			name = "movsd",
		},
		['m64,xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[7:0]",
			opcode = {"F2", "0F", "11", "/r"},
			metadata = "SSE2",
			operands = {"m64", "xmm[7:0]"},
			name = "movsd",
		},
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\xF2\x0F\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], m32/m64",
			opcode = {"F2", "0F", "10", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m64"},
			name = "movsd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\xF2\x0F\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], m32/m64",
			opcode = {"F2", "0F", "10", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m32"},
			name = "movsd",
		},
	},
	['vpermil2pd'] = {
		['xmm,xmm,xmm,m128,u4'] = {
			func = function(op1, op2, op3, op4, op5) return "\x49"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128", "u4"},
			encoding = "RVSMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128, i4/u4",
			opcode = {"VEX.L0.66.0F3A.W1", "49", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "m128", "u4"},
			name = "vpermil2pd",
		},
		['xmm,xmm,xmm,xmm,i4'] = {
			func = function(op1, op2, op3, op4, op5) return "\x49"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm", "i4"},
			encoding = "RVSMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128, i4/u4",
			opcode = {"VEX.L0.66.0F3A.W1", "49", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm", "i4"},
			name = "vpermil2pd",
		},
		['xmm,xmm,m128,xmm,u4'] = {
			func = function(op1, op2, op3, op4, op5) return "\x49"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm", "u4"},
			encoding = "RVMSI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm, i4/u4",
			opcode = {"VEX.L0.66.0F3A.W0", "49", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm", "u4"},
			name = "vpermil2pd",
		},
		['ymm,ymm,m256,ymm,u4'] = {
			func = function(op1, op2, op3, op4, op5) return "\x49"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm", "u4"},
			encoding = "RVMSI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm, i4/u4",
			opcode = {"VEX.L1.66.0F3A.W0", "49", "/r", "/is4"},
			metadata = "XOP",
			operands = {"ymm", "ymm", "m256", "ymm", "u4"},
			name = "vpermil2pd",
		},
		['ymm,ymm,ymm,m256,u4'] = {
			func = function(op1, op2, op3, op4, op5) return "\x49"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "m256", "u4"},
			encoding = "RVSMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256, i4/u4",
			opcode = {"VEX.L1.66.0F3A.W1", "49", "/r", "/is4"},
			metadata = "XOP",
			operands = {"ymm", "ymm", "ymm", "m256", "u4"},
			name = "vpermil2pd",
		},
		['ymm,ymm,ymm,ymm,i4'] = {
			func = function(op1, op2, op3, op4, op5) return "\x49"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm", "i4"},
			encoding = "RVSMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256, i4/u4",
			opcode = {"VEX.L1.66.0F3A.W1", "49", "/r", "/is4"},
			metadata = "XOP",
			operands = {"ymm", "ymm", "ymm", "ymm", "i4"},
			name = "vpermil2pd",
		},
	},
	['vpminud'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "3B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpminud",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "3B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpminud",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "3B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpminud",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "3B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpminud",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "3B", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpminud",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "3B", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpminud",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "3B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpminud",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "3B", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpminud",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "3B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpminud",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "3B", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpminud",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "3B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpminud",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "3B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpminud",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "3B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpminud",
		},
	},
	['vcompresspd'] = {
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x8A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F38.W1", "8A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vcompresspd",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x8A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F38.W1", "8A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm", "zmm"},
			name = "vcompresspd",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x8A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F38.W1", "8A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm", "ymm"},
			name = "vcompresspd",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x8A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F38.W1", "8A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vcompresspd",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x8A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F38.W1", "8A", "/r"},
			metadata = "AVX512_F",
			operands = {"m512 {kz}", "zmm"},
			name = "vcompresspd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x8A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F38.W1", "8A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "xmm"},
			name = "vcompresspd",
		},
	},
	['vpsadbw'] = {
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "F6", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsadbw",
		},
		['zmm,zmm,m512'] = {
			func = function(op1, op2, op3) return "\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm,~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "F6", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm", "zmm", "m512"},
			name = "vpsadbw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "F6", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsadbw",
		},
		['zmm,zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm,~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "F6", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm", "zmm", "zmm"},
			name = "vpsadbw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "F6", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsadbw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "F6", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsadbw",
		},
	},
	['fpatan'] = {
		[''] = {
			func = function(op1) return "\xD9\xF3" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "F3"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fpatan",
		},
	},
	['hlt'] = {
		[''] = {
			func = function(op1) return "\xF4" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"F4"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {""},
			name = "hlt",
		},
	},
	['kunpckbw'] = {
		['k[1:0],k[0],k[0]'] = {
			func = function(op1, op2, op3) return "\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[1:0]", "k[0]", "k[0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[1:0], k[0], k[0]",
			opcode = {"VEX.NDS.L1.66.0F.W0", "4B", "/r"},
			metadata = "AVX512_F",
			operands = {"k[1:0]", "k[0]", "k[0]"},
			name = "kunpckbw",
		},
	},
	['fucomip'] = {
		['st(i)'] = {
			func = function(op1) return "\xDF" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "R:st(i)",
			opcode = {"DF", "E8+i"},
			metadata = "FPU_POP          C1=0 ZF=W PF=W CF=W",
			operands = {"st(i)"},
			name = "fucomip",
		},
	},
	['movdqa'] = {
		['m128,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x7F"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"66", "0F", "7F", "/r"},
			metadata = "SSE2",
			operands = {"m128", "xmm"},
			name = "movdqa",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"66", "0F", "6F", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "movdqa",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"66", "0F", "7F", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "movdqa",
		},
	},
	['vpcompressq'] = {
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F38.W1", "8B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vpcompressq",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F38.W1", "8B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm", "zmm"},
			name = "vpcompressq",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F38.W1", "8B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm", "ymm"},
			name = "vpcompressq",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F38.W1", "8B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vpcompressq",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F38.W1", "8B", "/r"},
			metadata = "AVX512_F",
			operands = {"m512 {kz}", "zmm"},
			name = "vpcompressq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F38.W1", "8B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "xmm"},
			name = "vpcompressq",
		},
	},
	['lzcnt'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\xF3\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"F3", "0F", "BD", "/r"},
			metadata = "LZCNT            OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r32", "m32"},
			name = "lzcnt",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\xF3\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"F3", "0F", "BD", "/r"},
			metadata = "LZCNT            OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r32", "r32"},
			name = "lzcnt",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\xF3\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"F3", "0F", "BD", "/r"},
			metadata = "LZCNT            OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r32", "m64"},
			name = "lzcnt",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "F3", "0F", "BD", "/r"},
			metadata = "LZCNT X64        OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r64", "m64"},
			name = "lzcnt",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "F3", "0F", "BD", "/r"},
			metadata = "LZCNT X64        OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r64", "m32"},
			name = "lzcnt",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "F3", "0F", "BD", "/r"},
			metadata = "LZCNT X64        OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r64", "r64"},
			name = "lzcnt",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\xF3\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, r16/m16",
			opcode = {"66", "F3", "0F", "BD", "/r"},
			metadata = "LZCNT            OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r16", "r16"},
			name = "lzcnt",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\xF3\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, r16/m16",
			opcode = {"66", "F3", "0F", "BD", "/r"},
			metadata = "LZCNT            OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r16", "m16"},
			name = "lzcnt",
		},
	},
	['vmfunc'] = {
		[''] = {
			func = function(op1) return "\x0F\x01\xD4" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "01", "D4"},
			metadata = "VMX",
			operands = {""},
			name = "vmfunc",
		},
	},
	['vpshlb'] = {
		['xmm,m128,xmm'] = {
			func = function(op1, op2, op3) return "\x94"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "94", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128", "xmm"},
			name = "vpshlb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x94"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"XOP.NDS.L0.P0.M09.W1", "94", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128"},
			name = "vpshlb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x94"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "94", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpshlb",
		},
	},
	['fidivr'] = {
		['m64int'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m64int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/7"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m64int"},
			name = "fidivr",
		},
		['m16int'] = {
			func = function(op1) return "\xDE"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m16int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m16int",
			opcode = {"DE", "/7"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m16int"},
			name = "fidivr",
		},
		['m32'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/7"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fidivr",
		},
	},
	['movntsd'] = {
		['m64,xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[7:0]",
			opcode = {"F2", "0F", "2B", "/r"},
			metadata = "SSE4A",
			operands = {"m64", "xmm[7:0]"},
			name = "movntsd",
		},
		['m32,xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[7:0]",
			opcode = {"F2", "0F", "2B", "/r"},
			metadata = "SSE4A",
			operands = {"m32", "xmm[7:0]"},
			name = "movntsd",
		},
	},
	['movshdup'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xF3\x0F\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"F3", "0F", "16", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "m128"},
			name = "movshdup",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xF3\x0F\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"F3", "0F", "16", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "xmm"},
			name = "movshdup",
		},
	},
	['gf2p8affineinvqb'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\xCF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "CF", "/r", "ib"},
			metadata = "GFNI",
			operands = {"xmm", "xmm", "i8"},
			name = "gf2p8affineinvqb",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\xCF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "CF", "/r", "ib"},
			metadata = "GFNI",
			operands = {"xmm", "m128", "u8"},
			name = "gf2p8affineinvqb",
		},
	},
	['vmptrld'] = {
		['m32'] = {
			func = function(op1) return "\x0F\xC7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "C7", "/6"},
			metadata = "VMX              PRIVILEGE=L0",
			operands = {"m32"},
			name = "vmptrld",
		},
		['m64'] = {
			func = function(op1) return "\x0F\xC7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "C7", "/6"},
			metadata = "VMX              PRIVILEGE=L0",
			operands = {"m64"},
			name = "vmptrld",
		},
	},
	['jpo'] = {
		['string'] = {
			func = function(op1) return "\x0F\x8B"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"string"},
			encoding = "D",
			has_relative = false,
			operands2 = "rel32",
			opcode = {"0F", "8B", "cd"},
			metadata = "ANY              Control=Branch PF=R",
			operands = {"string"},
			name = "jpo",
		},
	},
	['bzhi'] = {
		['r64,m64,r64'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64", "r64"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, r64",
			opcode = {"VEX.NDS.LZ.0F38.W1", "F5", "/r"},
			metadata = "BMI2 X64         OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r64", "m64", "r64"},
			name = "bzhi",
		},
		['r32,r32,r32'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "r32"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, r32",
			opcode = {"VEX.NDS.LZ.0F38.W0", "F5", "/r"},
			metadata = "BMI2             OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r32", "r32", "r32"},
			name = "bzhi",
		},
		['r32,m32,r32'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32", "r32"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, r32",
			opcode = {"VEX.NDS.LZ.0F38.W0", "F5", "/r"},
			metadata = "BMI2             OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r32", "m32", "r32"},
			name = "bzhi",
		},
		['r64,r64,r64'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "r64"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, r64",
			opcode = {"VEX.NDS.LZ.0F38.W1", "F5", "/r"},
			metadata = "BMI2 X64         OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r64", "r64", "r64"},
			name = "bzhi",
		},
		['r32,m64,r32'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64", "r32"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, r32",
			opcode = {"VEX.NDS.LZ.0F38.W0", "F5", "/r"},
			metadata = "BMI2             OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r32", "m64", "r32"},
			name = "bzhi",
		},
		['r64,m32,r64'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32", "r64"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, r64",
			opcode = {"VEX.NDS.LZ.0F38.W1", "F5", "/r"},
			metadata = "BMI2 X64         OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r64", "m32", "r64"},
			name = "bzhi",
		},
	},
	['vrcp14sd'] = {
		['xmm {kz},xmm[15:8],m64'] = {
			func = function(op1, op2, op3) return "\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "4D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m64"},
			name = "vrcp14sd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "4D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			name = "vrcp14sd",
		},
		['xmm {kz},xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "4D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			name = "vrcp14sd",
		},
	},
	['vpopcntq'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F38.W1", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vpopcntq",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F38.W1", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vpopcntq",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F38.W1", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vpopcntq",
		},
		['zmm {kz},b64'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b64"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64",
			opcode = {"EVEX.512.66.0F38.W1", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ",
			operands = {"zmm {kz}", "b64"},
			name = "vpopcntq",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F38.W1", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vpopcntq",
		},
		['ymm {kz},b64'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F38.W1", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ-VL",
			operands = {"ymm {kz}", "b64"},
			name = "vpopcntq",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F38.W1", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vpopcntq",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64",
			opcode = {"EVEX.512.66.0F38.W1", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ",
			operands = {"zmm {kz}", "zmm"},
			name = "vpopcntq",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64",
			opcode = {"EVEX.512.66.0F38.W1", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ",
			operands = {"zmm {kz}", "m512"},
			name = "vpopcntq",
		},
	},
	['getsec'] = {
		[''] = {
			func = function(op1) return "\x0F\x37" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "37"},
			metadata = "SMX",
			operands = {""},
			name = "getsec",
		},
	},
	['psllw'] = {
		['mm,u8'] = {
			func = function(op1, op2) return "\x0F\x71"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "71", "/6", "ib"},
			metadata = "MMX",
			operands = {"mm", "u8"},
			name = "psllw",
		},
		['xmm,i8'] = {
			func = function(op1, op2) return "\x66\x0F\x71"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "71", "/6", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "i8"},
			name = "psllw",
		},
		['mm,i8'] = {
			func = function(op1, op2) return "\x0F\x71"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "71", "/6", "ib"},
			metadata = "MMX",
			operands = {"mm", "i8"},
			name = "psllw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "F1", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psllw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "F1", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "psllw",
		},
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "F1", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "psllw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "F1", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "psllw",
		},
		['xmm,u8'] = {
			func = function(op1, op2) return "\x66\x0F\x71"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "71", "/6", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "u8"},
			name = "psllw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "F1", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psllw",
		},
	},
	['fldpi'] = {
		[''] = {
			func = function(op1) return "\xD9\xEB" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "EB"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fldpi",
		},
	},
	['vcvttss2si'] = {
		['r32,xmm[3:0]'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "xmm[3:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F3.0F.W0", "2C", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "xmm[3:0]"},
			name = "vcvttss2si",
		},
		['r64,m64 {sae}'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64 {sae}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F3.0F.W1", "2C", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m64 {sae}"},
			name = "vcvttss2si",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64",
			opcode = {"VEX.LIG.F3.0F.W0", "2C", "/r"},
			metadata = "AVX",
			operands = {"r32", "m64"},
			name = "vcvttss2si",
		},
		['r64,xmm[3:0]'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "xmm[3:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F3.0F.W1", "2C", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "xmm[3:0]"},
			name = "vcvttss2si",
		},
		['r32,m64 {sae}'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64 {sae}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F3.0F.W0", "2C", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m64 {sae}"},
			name = "vcvttss2si",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64",
			opcode = {"VEX.LIG.F3.0F.W1", "2C", "/r"},
			metadata = "AVX X64",
			operands = {"r64", "m64"},
			name = "vcvttss2si",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F3.0F.W1", "2C", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m32"},
			name = "vcvttss2si",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F3.0F.W0", "2C", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m32"},
			name = "vcvttss2si",
		},
	},
	['psadbw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "F6", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m32"},
			name = "psadbw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "F6", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m64"},
			name = "psadbw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "F6", "/r"},
			metadata = "MMX2",
			operands = {"mm", "mm"},
			name = "psadbw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "F6", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psadbw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "F6", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psadbw",
		},
	},
	['vpmacsdql'] = {
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "97", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vpmacsdql",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "97", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vpmacsdql",
		},
	},
	['paddd'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "FE", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "paddd",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "FE", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "paddd",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "FE", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "paddd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "FE", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "paddd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "FE", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "paddd",
		},
	},
	['vpsubd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "FA", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsubd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "FA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpsubd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "FA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsubd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "FA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsubd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "FA", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsubd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "FA", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsubd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "FA", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpsubd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "FA", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsubd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "FA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsubd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "FA", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsubd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "FA", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsubd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "FA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpsubd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "FA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsubd",
		},
	},
	['xchg'] = {
		['r8,r8'] = {
			func = function(op1, op2) return "\x86"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r8/m8, x:~r8",
			opcode = {"86", "/r"},
			metadata = "ANY _ILock XAcquire",
			operands = {"r8", "r8"},
			name = "xchg",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x87"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64, X:~r64",
			opcode = {"REX.W", "87", "/r"},
			metadata = "X64 _ILock XAcquire",
			operands = {"m32", "r64"},
			name = "xchg",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x87"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64, X:~r32",
			opcode = {"87", "/r"},
			metadata = "ANY _ILock XAcquire",
			operands = {"m64", "r32"},
			name = "xchg",
		},
		['rax,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra)..string.char(0x90 + x86_64.reginfo[op1.reg].index) end,
			real_operands = {"rax", "r64"},
			encoding = "O",
			has_relative = false,
			operands2 = "X:~rax, X:~r64",
			opcode = {"REX.W", "90+r"},
			metadata = "X64",
			operands = {"rax", "r64"},
			name = "xchg",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x87"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32, X:~r32/m32/m64",
			opcode = {"87", "/r"},
			metadata = "ANY _ILock",
			operands = {"r32", "m64"},
			name = "xchg",
		},
		['r64,rax'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra)..string.char(0x90 + x86_64.reginfo[op1.reg].index) end,
			real_operands = {"r64", "rax"},
			encoding = "O",
			has_relative = false,
			operands2 = "X:~r64, X:~rax",
			opcode = {"REX.W", "90+r"},
			metadata = "X64",
			operands = {"r64", "rax"},
			name = "xchg",
		},
		['r16,ax'] = {
			func = function(op1, op2) return "\x66"..string.char(0x90 + x86_64.reginfo[op1.reg].index) end,
			real_operands = {"r16", "ax"},
			encoding = "O",
			has_relative = false,
			operands2 = "x:~r16, x:~ax",
			opcode = {"66", "90+r"},
			metadata = "ANY",
			operands = {"r16", "ax"},
			name = "xchg",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x87"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:~r16, x:~r16/m16",
			opcode = {"66", "87", "/r"},
			metadata = "ANY _ILock",
			operands = {"r16", "m16"},
			name = "xchg",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x87"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64, X:~r64/m32/m64",
			opcode = {"REX.W", "87", "/r"},
			metadata = "X64 _ILock",
			operands = {"r64", "m64"},
			name = "xchg",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x87"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64, X:~r32",
			opcode = {"87", "/r"},
			metadata = "ANY _ILock XAcquire",
			operands = {"r32", "r32"},
			name = "xchg",
		},
		['ax,r16'] = {
			func = function(op1, op2) return "\x66"..string.char(0x90 + x86_64.reginfo[op1.reg].index) end,
			real_operands = {"ax", "r16"},
			encoding = "O",
			has_relative = false,
			operands2 = "x:~ax, x:~r16",
			opcode = {"66", "90+r"},
			metadata = "ANY",
			operands = {"ax", "r16"},
			name = "xchg",
		},
		['r8,m8'] = {
			func = function(op1, op2) return "\x86"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:~r8, x:~r8/m8",
			opcode = {"86", "/r"},
			metadata = "ANY _ILock",
			operands = {"r8", "m8"},
			name = "xchg",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x87"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64, X:~r64/m32/m64",
			opcode = {"REX.W", "87", "/r"},
			metadata = "X64 _ILock",
			operands = {"r64", "m32"},
			name = "xchg",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x87"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64, X:~r32",
			opcode = {"87", "/r"},
			metadata = "ANY _ILock XAcquire",
			operands = {"m32", "r32"},
			name = "xchg",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x87"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r16/m16, x:~r16",
			opcode = {"66", "87", "/r"},
			metadata = "ANY _ILock XAcquire",
			operands = {"m16", "r16"},
			name = "xchg",
		},
		['eax,r32'] = {
			func = function(op1, op2) return string.char(0x90 + x86_64.reginfo[op1.reg].index) end,
			real_operands = {"eax", "r32"},
			encoding = "O",
			has_relative = false,
			operands2 = "X:~eax, X:~r32",
			opcode = {"90+r"},
			metadata = "ANY",
			operands = {"eax", "r32"},
			name = "xchg",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x87"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64, X:~r64",
			opcode = {"REX.W", "87", "/r"},
			metadata = "X64 _ILock XAcquire",
			operands = {"r64", "r64"},
			name = "xchg",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x87"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32, X:~r32/m32/m64",
			opcode = {"87", "/r"},
			metadata = "ANY _ILock",
			operands = {"r32", "m32"},
			name = "xchg",
		},
		['r32,eax'] = {
			func = function(op1, op2) return string.char(0x90 + x86_64.reginfo[op1.reg].index) end,
			real_operands = {"r32", "eax"},
			encoding = "O",
			has_relative = false,
			operands2 = "X:~r32, X:~eax",
			opcode = {"90+r"},
			metadata = "ANY",
			operands = {"r32", "eax"},
			name = "xchg",
		},
		['m8,r8'] = {
			func = function(op1, op2) return "\x86"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r8/m8, x:~r8",
			opcode = {"86", "/r"},
			metadata = "ANY _ILock XAcquire",
			operands = {"m8", "r8"},
			name = "xchg",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x87"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64, X:~r64",
			opcode = {"REX.W", "87", "/r"},
			metadata = "X64 _ILock XAcquire",
			operands = {"m64", "r64"},
			name = "xchg",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x87"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r16/m16, x:~r16",
			opcode = {"66", "87", "/r"},
			metadata = "ANY _ILock XAcquire",
			operands = {"r16", "r16"},
			name = "xchg",
		},
	},
	['clts'] = {
		[''] = {
			func = function(op1) return "\x0F\x06" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "06"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {""},
			name = "clts",
		},
	},
	['xsaves'] = {
		['m32'] = {
			func = function(op1) return "\x0F\xC7"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"0F", "C7", "/5"},
			metadata = "XSAVES           Volatile XCR=R",
			operands = {"m32"},
			name = "xsaves",
		},
		['m64'] = {
			func = function(op1) return "\x0F\xC7"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"0F", "C7", "/5"},
			metadata = "XSAVES           Volatile XCR=R",
			operands = {"m64"},
			name = "xsaves",
		},
	},
	['vpmovm2q'] = {
		['zmm,k'] = {
			func = function(op1, op2) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:zmm, k",
			opcode = {"EVEX.512.F3.0F38.W1", "38", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm", "k"},
			name = "vpmovm2q",
		},
		['ymm,k'] = {
			func = function(op1, op2) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, k",
			opcode = {"EVEX.256.F3.0F38.W1", "38", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm", "k"},
			name = "vpmovm2q",
		},
		['xmm,k'] = {
			func = function(op1, op2) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, k",
			opcode = {"EVEX.128.F3.0F38.W1", "38", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm", "k"},
			name = "vpmovm2q",
		},
	},
	['fstp'] = {
		['m80fp'] = {
			func = function(op1) return "\xDB"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m80fp"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m80fp",
			opcode = {"DB", "/7"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {"m80fp"},
			name = "fstp",
		},
		['st(i)'] = {
			func = function(op1) return "\xDD" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "W:st(i)",
			opcode = {"DD", "D8+i"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fstp",
		},
		['m32'] = {
			func = function(op1) return "\xDD"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64fp",
			opcode = {"DD", "/3"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fstp",
		},
		['m64fp'] = {
			func = function(op1) return "\xDD"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m64fp"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64fp",
			opcode = {"DD", "/3"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {"m64fp"},
			name = "fstp",
		},
	},
	['cmovc'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "42", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "m32"},
			name = "cmovc",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "42", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "r32"},
			name = "cmovc",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "42", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "m64"},
			name = "cmovc",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "42", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "m64"},
			name = "cmovc",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "42", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "m32"},
			name = "cmovc",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "42", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "r64"},
			name = "cmovc",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "42", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r16", "r16"},
			name = "cmovc",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "42", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r16", "m16"},
			name = "cmovc",
		},
	},
	['vpmullq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "40", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmullq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "40", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmullq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "40", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmullq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "40", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpmullq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "40", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpmullq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "40", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpmullq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "40", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmullq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "40", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmullq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "40", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmullq",
		},
	},
	['dppd'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x41"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "41", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm", "i8"},
			name = "dppd",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x41"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "41", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128", "u8"},
			name = "dppd",
		},
	},
	['mfence'] = {
		[''] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "AE", "/6"},
			metadata = "SSE2 Volatile",
			operands = {""},
			name = "mfence",
		},
	},
	['vucomiss'] = {
		['xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "R:xmm[3:0], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.0F.W0", "2E", "/r"},
			metadata = "AVX512_F OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[3:0]", "xmm[3:0]"},
			name = "vucomiss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "R:xmm[3:0], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.0F.W0", "2E", "/r"},
			metadata = "AVX512_F OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[3:0]", "m32"},
			name = "vucomiss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.LIG.0F.WIG", "2E", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[3:0]", "m64"},
			name = "vucomiss",
		},
		['xmm[3:0],m64 {sae}'] = {
			func = function(op1, op2) return "\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64 {sae}"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "R:xmm[3:0], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.0F.W0", "2E", "/r"},
			metadata = "AVX512_F OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[3:0]", "m64 {sae}"},
			name = "vucomiss",
		},
	},
	['vdivsd'] = {
		['xmm,xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "5E", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			name = "vdivsd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "5E", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			name = "vdivsd",
		},
		['xmm {kz},xmm[15:8],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "5E", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m64 {er}"},
			name = "vdivsd",
		},
		['xmm,xmm[15:8],m64'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "5E", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m64"},
			name = "vdivsd",
		},
		['xmm,xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "5E", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m32"},
			name = "vdivsd",
		},
		['xmm {kz},xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "5E", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			name = "vdivsd",
		},
	},
	['jnb'] = {
		['string'] = {
			func = function(op1) return "\x0F\x83"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"string"},
			encoding = "D",
			has_relative = false,
			operands2 = "rel32",
			opcode = {"0F", "83", "cd"},
			metadata = "ANY              Control=Branch CF=R",
			operands = {"string"},
			name = "jnb",
		},
	},
	['setl'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9C", "/r"},
			metadata = "ANY              SF=R OF=R",
			operands = {"m8"},
			name = "setl",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9C", "/r"},
			metadata = "ANY              SF=R OF=R",
			operands = {"r8"},
			name = "setl",
		},
	},
	['vsubps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.0F.W0", "5C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vsubps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "5C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vsubps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "5C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vsubps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "5C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vsubps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "5C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vsubps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "5C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vsubps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.0F.W0", "5C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vsubps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "5C", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vsubps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "5C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vsubps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "5C", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vsubps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.0F.W0", "5C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vsubps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "5C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vsubps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "5C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vsubps",
		},
	},
	['vpextrb'] = {
		['r64[0],xmm,u8'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[0]", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64[0], xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.WIG", "14", "/r", "ib"},
			metadata = "AVX512_BW X64",
			operands = {"r64[0]", "xmm", "u8"},
			name = "vpextrb",
		},
		['m8,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m8", "xmm", "ub"},
			encoding = "MRI-T1S",
			has_relative = false,
			operands2 = "W:r32[0]/m8 , xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.WIG", "14", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"m8", "xmm", "u8"},
			name = "vpextrb",
		},
		['r32[0],xmm,i8'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32[0]", "xmm", "ib"},
			encoding = "MRI-T1S",
			has_relative = false,
			operands2 = "W:r32[0]/m8 , xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.WIG", "14", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"r32[0]", "xmm", "i8"},
			name = "vpextrb",
		},
		['r64[0],xmm,i8'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[0]", "xmm", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64[0], xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.WIG", "14", "/r", "ib"},
			metadata = "AVX512_BW X64",
			operands = {"r64[0]", "xmm", "i8"},
			name = "vpextrb",
		},
	},
	['vpslldq'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.WIG", "73", "/7", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm", "xmm", "i8"},
			name = "vpslldq",
		},
		['xmm,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "73", "/7", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "u8"},
			name = "vpslldq",
		},
		['ymm,ymm,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "73", "/7", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "u8"},
			name = "vpslldq",
		},
		['zmm,zmm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm", "zmm", "ib"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.WIG", "73", "/7", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm", "zmm", "i8"},
			name = "vpslldq",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.WIG", "73", "/7", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm", "ymm", "i8"},
			name = "vpslldq",
		},
		['ymm,m256,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "m256", "ub"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.WIG", "73", "/7", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm", "m256", "u8"},
			name = "vpslldq",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.WIG", "73", "/7", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm", "m128", "u8"},
			name = "vpslldq",
		},
		['zmm,m512,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm", "m512", "ub"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.WIG", "73", "/7", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm", "m512", "u8"},
			name = "vpslldq",
		},
	},
	['blsic'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r32", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/6"},
			metadata = "TBM",
			operands = {"r32", "m32"},
			name = "blsic",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r32", "r32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/6"},
			metadata = "TBM",
			operands = {"r32", "r32"},
			name = "blsic",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r32", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/6"},
			metadata = "TBM",
			operands = {"r32", "m64"},
			name = "blsic",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r64", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/6"},
			metadata = "TBM X64",
			operands = {"r64", "m64"},
			name = "blsic",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r64", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/6"},
			metadata = "TBM X64",
			operands = {"r64", "m32"},
			name = "blsic",
		},
		['r64,r64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r64", "r64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/6"},
			metadata = "TBM X64",
			operands = {"r64", "r64"},
			name = "blsic",
		},
	},
	['movaps'] = {
		['m128,xmm'] = {
			func = function(op1, op2) return "\x0F\x29"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"0F", "29", "/r"},
			metadata = "SSE",
			operands = {"m128", "xmm"},
			name = "movaps",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"0F", "28", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "movaps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"0F", "29", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "movaps",
		},
	},
	['fcomp'] = {
		[''] = {
			func = function(op1) return "\xD8\xD9" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D8", "D9"},
			metadata = "FPU_POP          C0=W C1=W C2=W C3=W",
			operands = {""},
			name = "fcomp",
		},
		['st(i)'] = {
			func = function(op1) return "\xD8" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "R:st(i)",
			opcode = {"D8", "D8+i"},
			metadata = "FPU_POP          C0=W C1=W C2=W C3=W",
			operands = {"st(i)"},
			name = "fcomp",
		},
		['m32'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DC", "/3"},
			metadata = "FPU_POP          C0=W C1=W C2=W C3=W",
			operands = {"m32"},
			name = "fcomp",
		},
		['m64fp'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m64fp"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DC", "/3"},
			metadata = "FPU_POP          C0=W C1=W C2=W C3=W",
			operands = {"m64fp"},
			name = "fcomp",
		},
	},
	['vplzcntq'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F38.W1", "44", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vplzcntq",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F38.W1", "44", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vplzcntq",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F38.W1", "44", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vplzcntq",
		},
		['zmm {kz},b64'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64",
			opcode = {"EVEX.512.66.0F38.W1", "44", "/r"},
			metadata = "AVX512_CDI",
			operands = {"zmm {kz}", "b64"},
			name = "vplzcntq",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F38.W1", "44", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vplzcntq",
		},
		['ymm {kz},b64'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F38.W1", "44", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"ymm {kz}", "b64"},
			name = "vplzcntq",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F38.W1", "44", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vplzcntq",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64",
			opcode = {"EVEX.512.66.0F38.W1", "44", "/r"},
			metadata = "AVX512_CDI",
			operands = {"zmm {kz}", "zmm"},
			name = "vplzcntq",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64",
			opcode = {"EVEX.512.66.0F38.W1", "44", "/r"},
			metadata = "AVX512_CDI",
			operands = {"zmm {kz}", "m512"},
			name = "vplzcntq",
		},
	},
	['add'] = {
		['r64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/0", "id"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "i32"},
			name = "add",
		},
		['m64,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/0", "id"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "u32"},
			name = "add",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x01"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64,~r64",
			opcode = {"REX.W", "01", "/r"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "r64"},
			name = "add",
		},
		['m16,u16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"m16", "uw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, iw/uw",
			opcode = {"66", "81", "/0", "iw"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "u16"},
			name = "add",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32,~r32/m32/m64",
			opcode = {"03", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "m32"},
			name = "add",
		},
		['m32,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/0", "id"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "i32"},
			name = "add",
		},
		['ax,u16'] = {
			func = function(op1, op2) return "\x66\x05"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "uw"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:ax, iw/uw",
			opcode = {"66", "05", "iw"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"ax", "u16"},
			name = "add",
		},
		['r8,m8'] = {
			func = function(op1, op2) return "\x02"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:~r8,~r8/m8",
			opcode = {"02", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "m8"},
			name = "add",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64,~r32",
			opcode = {"01", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "r32"},
			name = "add",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x01"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r16/m16,~r16",
			opcode = {"66", "01", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "r16"},
			name = "add",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x01"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64,~r64",
			opcode = {"REX.W", "01", "/r"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "r64"},
			name = "add",
		},
		['eax,u32'] = {
			func = function(op1, op2) return "\x05"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "ud"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:eax, id/ud",
			opcode = {"05", "id"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"eax", "u32"},
			name = "add",
		},
		['eax,i32'] = {
			func = function(op1, op2) return "\x05"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:eax, id/ud",
			opcode = {"05", "id"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"eax", "i32"},
			name = "add",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x01"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r16/m16,~r16",
			opcode = {"66", "01", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "r16"},
			name = "add",
		},
		['r8,r8'] = {
			func = function(op1, op2) return "\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r8/m8,~r8",
			opcode = {"00", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "r8"},
			name = "add",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64,~r32",
			opcode = {"01", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "r32"},
			name = "add",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"80", "/0", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "u8"},
			name = "add",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/0", "ib"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "i8"},
			name = "add",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32,~r32/m32/m64",
			opcode = {"03", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "m64"},
			name = "add",
		},
		['r32,i32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/0", "id"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "i32"},
			name = "add",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\x83"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib",
			opcode = {"83", "/0", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "i8"},
			name = "add",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64,~r64/m32/m64",
			opcode = {"REX.W", "03", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "m32"},
			name = "add",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:~r16,~r16/m16",
			opcode = {"66", "03", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "m16"},
			name = "add",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64,~r64/m32/m64",
			opcode = {"REX.W", "03", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "m64"},
			name = "add",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64,~r32",
			opcode = {"01", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "r32"},
			name = "add",
		},
		['m16,i8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib",
			opcode = {"66", "83", "/0", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "i8"},
			name = "add",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x01"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64,~r64",
			opcode = {"REX.W", "01", "/r"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "r64"},
			name = "add",
		},
		['m64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/0", "id"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "i32"},
			name = "add",
		},
		['m8,r8'] = {
			func = function(op1, op2) return "\x00"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r8/m8,~r8",
			opcode = {"00", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "r8"},
			name = "add",
		},
		['al,u8'] = {
			func = function(op1, op2) return "\x04"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:al, ib/ub",
			opcode = {"04", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"al", "u8"},
			name = "add",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib",
			opcode = {"66", "83", "/0", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "i8"},
			name = "add",
		},
		['rax,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x05"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"rax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:rax, id",
			opcode = {"REX.W", "05", "id"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"rax", "i32"},
			name = "add",
		},
		['r16,i16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"r16", "iw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, iw/uw",
			opcode = {"66", "81", "/0", "iw"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "i16"},
			name = "add",
		},
		['al,i8'] = {
			func = function(op1, op2) return "\x04"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:al, ib/ub",
			opcode = {"04", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"al", "i8"},
			name = "add",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"80", "/0", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "i8"},
			name = "add",
		},
		['m64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/0", "ib"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "i8"},
			name = "add",
		},
		['m32,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/0", "ib"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "i8"},
			name = "add",
		},
		['m32,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/0", "id"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "u32"},
			name = "add",
		},
		['ax,i16'] = {
			func = function(op1, op2) return "\x66\x05"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "iw"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:ax, iw/uw",
			opcode = {"66", "05", "iw"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"ax", "i16"},
			name = "add",
		},
	},
	['vfmaddsub213ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "A6", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmaddsub213ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "A6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfmaddsub213ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "A6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmaddsub213ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "A6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmaddsub213ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "A6", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmaddsub213ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "A6", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmaddsub213ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "A6", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfmaddsub213ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "A6", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmaddsub213ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "A6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmaddsub213ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "A6", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmaddsub213ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "A6", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmaddsub213ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "A6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfmaddsub213ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "A6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmaddsub213ps",
		},
	},
	['vexp2ps'] = {
		['zmm {kz},b32 {sae}'] = {
			func = function(op1, op2) return "\xC8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {sae}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.66.0F38.W0", "C8", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "b32 {sae}"},
			name = "vexp2ps",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\xC8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.66.0F38.W0", "C8", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "zmm"},
			name = "vexp2ps",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\xC8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.66.0F38.W0", "C8", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "m512"},
			name = "vexp2ps",
		},
	},
	['pandn'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "DF", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "pandn",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "DF", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "pandn",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "DF", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "pandn",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "DF", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pandn",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "DF", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pandn",
		},
	},
	['vpgatherqd'] = {
		['ymm {k},m64y'] = {
			func = function(op1, op2) return "\x91" end,
			real_operands = {"ymm {k}", "m64y"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W0", "91"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "m64y"},
			name = "vpgatherqd",
		},
		['xmm,m64x,xmm'] = {
			func = function(op1, op2, op3) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64x", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64x, X:xmm",
			opcode = {"VEX.DDS.128.66.0F38.W0", "91", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m64x", "xmm"},
			name = "vpgatherqd",
		},
		['xmm,m64y,xmm'] = {
			func = function(op1, op2, op3) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64y", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64y, X:xmm",
			opcode = {"VEX.DDS.256.66.0F38.W0", "91", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m64y", "xmm"},
			name = "vpgatherqd",
		},
		['xmm {k},m64x'] = {
			func = function(op1, op2) return "\x91" end,
			real_operands = {"xmm {k}", "m64x"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W0", "91"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "m64x"},
			name = "vpgatherqd",
		},
		['ymm {k},vm32'] = {
			func = function(op1, op2) return "\x91" end,
			real_operands = {"ymm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W0", "91"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "vm32"},
			name = "vpgatherqd",
		},
		['zmm {k},m64z'] = {
			func = function(op1, op2) return "\x91" end,
			real_operands = {"zmm {k}", "m64z"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W0", "91"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "m64z"},
			name = "vpgatherqd",
		},
		['zmm {k},vm32'] = {
			func = function(op1, op2) return "\x91" end,
			real_operands = {"zmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W0", "91"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "vm32"},
			name = "vpgatherqd",
		},
		['xmm {k},vm32'] = {
			func = function(op1, op2) return "\x91" end,
			real_operands = {"xmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W0", "91"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "vm32"},
			name = "vpgatherqd",
		},
		['xmm,vm32,xmm'] = {
			func = function(op1, op2, op3) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "vm32", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64y, X:xmm",
			opcode = {"VEX.DDS.256.66.0F38.W0", "91", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "vm32", "xmm"},
			name = "vpgatherqd",
		},
	},
	['aeskeygenassist'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\xDF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "DF", "/r", "ib"},
			metadata = "AESNI",
			operands = {"xmm", "xmm", "i8"},
			name = "aeskeygenassist",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\xDF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "DF", "/r", "ib"},
			metadata = "AESNI",
			operands = {"xmm", "m128", "u8"},
			name = "aeskeygenassist",
		},
	},
	['fisub'] = {
		['m64int'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m64int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/4"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m64int"},
			name = "fisub",
		},
		['m16int'] = {
			func = function(op1) return "\xDE"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m16int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m16int",
			opcode = {"DE", "/4"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m16int"},
			name = "fisub",
		},
		['m32'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/4"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fisub",
		},
	},
	['vcmppd'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F.WIG", "C2", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vcmppd",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F.WIG", "C2", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vcmppd",
		},
		['k {kz},xmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "xmm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F.W1", "C2", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {kz}", "xmm", "b64", "u8"},
			name = "vcmppd",
		},
		['k {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F.W1", "C2", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {kz}", "xmm", "m128", "u8"},
			name = "vcmppd",
		},
		['k {kz},zmm,b64,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "zmm", "b64", "ub {sae}"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, zmm, zmm/m512/b64, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "C2", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {kz}", "zmm", "b64", "ub {sae}"},
			name = "vcmppd",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F.WIG", "C2", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vcmppd",
		},
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F.WIG", "C2", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vcmppd",
		},
		['k {kz},zmm,m512,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "zmm", "m512", "ub {sae}"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, zmm, zmm/m512/b64, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "C2", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {kz}", "zmm", "m512", "ub {sae}"},
			name = "vcmppd",
		},
		['k {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, zmm, zmm/m512/b64, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "C2", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {kz}", "zmm", "zmm", "i8"},
			name = "vcmppd",
		},
		['k {kz},ymm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "ymm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F.W1", "C2", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {kz}", "ymm", "b64", "u8"},
			name = "vcmppd",
		},
		['k {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F.W1", "C2", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {kz}", "ymm", "m256", "u8"},
			name = "vcmppd",
		},
		['k {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F.W1", "C2", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {kz}", "ymm", "ymm", "i8"},
			name = "vcmppd",
		},
		['k {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F.W1", "C2", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {kz}", "xmm", "xmm", "i8"},
			name = "vcmppd",
		},
	},
	['vpmacssdd'] = {
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x8E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "8E", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vpmacssdd",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x8E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "8E", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vpmacssdd",
		},
	},
	['arpl'] = {
		['r16,r16'] = {
			func = function(op1, op2) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, R:r16",
			opcode = {"63", "/r"},
			metadata = "X86 ZF=W",
			operands = {"r16", "r16"},
			name = "arpl",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x63"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, R:r16",
			opcode = {"63", "/r"},
			metadata = "X86 ZF=W",
			operands = {"m16", "r16"},
			name = "arpl",
		},
	},
	['fxtract'] = {
		[''] = {
			func = function(op1) return "\xD9\xF4" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "F4"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fxtract",
		},
	},
	['pmaxud'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "3F", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "pmaxud",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "3F", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm"},
			name = "pmaxud",
		},
	},
	['clwb'] = {
		['m32'] = {
			func = function(op1) return "\x66\x0F\xAE"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"66", "0F", "AE", "/6"},
			metadata = "CLWB             Volatile",
			operands = {"m32"},
			name = "clwb",
		},
		['m64'] = {
			func = function(op1) return "\x66\x0F\xAE"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"66", "0F", "AE", "/6"},
			metadata = "CLWB             Volatile",
			operands = {"m64"},
			name = "clwb",
		},
	},
	['vpor'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "EB", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpor",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "EB", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpor",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "EB", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpor",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "EB", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpor",
		},
	},
	['psrld'] = {
		['mm,u8'] = {
			func = function(op1, op2) return "\x0F\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "72", "/2", "ib"},
			metadata = "MMX",
			operands = {"mm", "u8"},
			name = "psrld",
		},
		['xmm,i8'] = {
			func = function(op1, op2) return "\x66\x0F\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "72", "/2", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "i8"},
			name = "psrld",
		},
		['mm,i8'] = {
			func = function(op1, op2) return "\x0F\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "72", "/2", "ib"},
			metadata = "MMX",
			operands = {"mm", "i8"},
			name = "psrld",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "D2", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psrld",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "D2", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "psrld",
		},
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "D2", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "psrld",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "D2", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "psrld",
		},
		['xmm,u8'] = {
			func = function(op1, op2) return "\x66\x0F\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "72", "/2", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "u8"},
			name = "psrld",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "D2", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psrld",
		},
	},
	['fidiv'] = {
		['m64int'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/6"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m64int"},
			name = "fidiv",
		},
		['m16int'] = {
			func = function(op1) return "\xDE"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m16int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m16int",
			opcode = {"DE", "/6"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m16int"},
			name = "fidiv",
		},
		['m32'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/6"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fidiv",
		},
	},
	['cmpsb'] = {
		[''] = {
			func = function() return "\xA6" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<ds:zsi>, X:<es:zdi>",
			opcode = {"A6"},
			metadata = "ANY _Rep         OF=W SF=W ZF=W AF=W PF=W CF=W DF=R",
			operands = {},
			name = "cmpsb",
		},
	},
	['vgf2p8mulb'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xCF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "CF", "/r"},
			metadata = "AVX512_F    GFNI",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vgf2p8mulb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xCF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "CF", "/r"},
			metadata = "AVX512_F-VL GFNI",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vgf2p8mulb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xCF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "CF", "/r"},
			metadata = "AVX512_F-VL GFNI",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vgf2p8mulb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xCF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W0", "CF", "/r"},
			metadata = "AVX GFNI",
			operands = {"xmm", "xmm", "m128"},
			name = "vgf2p8mulb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xCF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W0", "CF", "/r"},
			metadata = "AVX GFNI",
			operands = {"xmm", "xmm", "xmm"},
			name = "vgf2p8mulb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xCF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "CF", "/r"},
			metadata = "AVX GFNI",
			operands = {"ymm", "ymm", "m256"},
			name = "vgf2p8mulb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xCF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "CF", "/r"},
			metadata = "AVX512_F-VL GFNI",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vgf2p8mulb",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xCF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "CF", "/r"},
			metadata = "AVX GFNI",
			operands = {"ymm", "ymm", "ymm"},
			name = "vgf2p8mulb",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xCF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "CF", "/r"},
			metadata = "AVX512_F    GFNI",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vgf2p8mulb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xCF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "CF", "/r"},
			metadata = "AVX512_F-VL GFNI",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vgf2p8mulb",
		},
	},
	['insw'] = {
		['es:zdi,dx'] = {
			func = function(op1, op2) return "\x66\x6D" end,
			real_operands = {"es:zdi", "dx"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:es:zdi, dx",
			opcode = {"66", "6D"},
			metadata = "ANY _Rep         Volatile",
			operands = {"es:zdi", "dx"},
			name = "insw",
		},
	},
	['vpblendw'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x0E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.WIG", "0E", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vpblendw",
		},
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x0E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.WIG", "0E", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vpblendw",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x0E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.WIG", "0E", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vpblendw",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x0E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.WIG", "0E", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vpblendw",
		},
	},
	['maskmovdqu'] = {
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm, xmm, X:<ds:zdi>",
			opcode = {"66", "0F", "F7", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "maskmovdqu",
		},
	},
	['vpalignr'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x0F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.WIG", "0F", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vpalignr",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x0F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.WIG", "0F", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vpalignr",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x0F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.WIG", "0F", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vpalignr",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x0F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.WIG", "0F", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vpalignr",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x0F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.WIG", "0F", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vpalignr",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x0F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.WIG", "0F", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vpalignr",
		},
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x0F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.WIG", "0F", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vpalignr",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x0F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.WIG", "0F", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vpalignr",
		},
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x0F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.WIG", "0F", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vpalignr",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x0F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.WIG", "0F", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vpalignr",
		},
	},
	['pminsw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xEA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "EA", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m32"},
			name = "pminsw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xEA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "EA", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m64"},
			name = "pminsw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xEA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "EA", "/r"},
			metadata = "MMX2",
			operands = {"mm", "mm"},
			name = "pminsw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xEA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "EA", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pminsw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xEA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "EA", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pminsw",
		},
	},
	['minss'] = {
		['xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "5D", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "xmm[3:0]"},
			name = "minss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "5D", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m32"},
			name = "minss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "5D", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m64"},
			name = "minss",
		},
	},
	['vpmovb2m'] = {
		['k,zmm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k", "zmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "29", "/r"},
			metadata = "AVX512_BW",
			operands = {"k", "zmm"},
			name = "vpmovb2m",
		},
		['k,xmm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "29", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k", "xmm"},
			name = "vpmovb2m",
		},
		['k,ymm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "29", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k", "ymm"},
			name = "vpmovb2m",
		},
	},
	['vpmulhrsw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "0B", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmulhrsw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "0B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmulhrsw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "0B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmulhrsw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "0B", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmulhrsw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "0B", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpmulhrsw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "0B", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmulhrsw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "0B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmulhrsw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "0B", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpmulhrsw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "0B", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmulhrsw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "0B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmulhrsw",
		},
	},
	['frstor'] = {
		['m32'] = {
			func = function(op1) return "\xDD"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"DD", "/4"},
			metadata = "FPU              C0=W C1=W C2=W C3=W",
			operands = {"m32"},
			name = "frstor",
		},
		['m64'] = {
			func = function(op1) return "\xDD"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"DD", "/4"},
			metadata = "FPU              C0=W C1=W C2=W C3=W",
			operands = {"m64"},
			name = "frstor",
		},
	},
	['pmulld'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "40", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "pmulld",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "40", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm"},
			name = "pmulld",
		},
	},
	['divpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "5E", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "divpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "5E", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "divpd",
		},
	},
	['skinit'] = {
		[''] = {
			func = function() return "\x0F\x01\xDE" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<eax>",
			opcode = {"0F", "01", "DE"},
			metadata = "SKINIT           PRIVILEGE=L0",
			operands = {},
			name = "skinit",
		},
	},
	['vpmovsxdq'] = {
		['zmm {kz},ymm'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "ymm"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256",
			opcode = {"EVEX.512.66.0F38.W0", "25", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "ymm"},
			name = "vpmovsxdq",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "25", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[7:0]"},
			name = "vpmovsxdq",
		},
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256",
			opcode = {"EVEX.512.66.0F38.W0", "25", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m256"},
			name = "vpmovsxdq",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "25", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m64"},
			name = "vpmovsxdq",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "25", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m32"},
			name = "vpmovsxdq",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128",
			opcode = {"EVEX.256.66.0F38.W0", "25", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vpmovsxdq",
		},
		['ymm {kz},xmm'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128",
			opcode = {"EVEX.256.66.0F38.W0", "25", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm"},
			name = "vpmovsxdq",
		},
		['ymm,m128'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.66.0F38.WIG", "25", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m128"},
			name = "vpmovsxdq",
		},
		['ymm,xmm'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.66.0F38.WIG", "25", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm"},
			name = "vpmovsxdq",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "25", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vpmovsxdq",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "25", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vpmovsxdq",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "25", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vpmovsxdq",
		},
	},
	['vfmaddpd'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "69", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vfmaddpd",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "69", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vfmaddpd",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "69", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vfmaddpd",
		},
		['ymm,ymm,ymm,m256'] = {
			func = function(op1, op2, op3, op4) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "m256"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "69", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "m256"},
			name = "vfmaddpd",
		},
		['xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "69", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "m128"},
			name = "vfmaddpd",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "69", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vfmaddpd",
		},
	},
	['xorps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"0F", "57", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "xorps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"0F", "57", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "xorps",
		},
	},
	['vdivss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "5E", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			name = "vdivss",
		},
		['xmm,xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "5E", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			name = "vdivss",
		},
		['xmm {kz},xmm[15:4],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "5E", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m64 {er}"},
			name = "vdivss",
		},
		['xmm,xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "5E", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m32"},
			name = "vdivss",
		},
		['xmm,xmm[15:4],m64'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "5E", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m64"},
			name = "vdivss",
		},
		['xmm {kz},xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "5E", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			name = "vdivss",
		},
	},
	['fnstcw'] = {
		['m16'] = {
			func = function(op1) return "\xD9"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m16",
			opcode = {"D9", "/7"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {"m16"},
			name = "fnstcw",
		},
	},
	['vmovups'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.0F.W0", "10", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vmovups",
		},
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.0F.W0", "11", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vmovups",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.0F.W0", "11", "/r"},
			metadata = "AVX512_F",
			operands = {"m512 {kz}", "zmm"},
			name = "vmovups",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.0F.W0", "10", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vmovups",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:ymm/m256, ymm",
			opcode = {"VEX.256.66.0F.WIG", "11", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vmovups",
		},
		['m128,xmm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"VEX.128.66.0F.WIG", "11", "/r"},
			metadata = "AVX",
			operands = {"m128", "xmm"},
			name = "vmovups",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.66.0F.WIG", "10", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vmovups",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.0F.W0", "10", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vmovups",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.0F.W0", "10", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vmovups",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.0F.W0", "10", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vmovups",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.0F.W0", "11", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm", "zmm"},
			name = "vmovups",
		},
		['m256,ymm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256", "ymm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:ymm/m256, ymm",
			opcode = {"VEX.256.66.0F.WIG", "11", "/r"},
			metadata = "AVX",
			operands = {"m256", "ymm"},
			name = "vmovups",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.0F.W0", "10", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vmovups",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.0F.W0", "11", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vmovups",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.66.0F.WIG", "10", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vmovups",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"VEX.128.66.0F.WIG", "11", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vmovups",
		},
	},
	['vgatherqpd'] = {
		['ymm {k},m64y'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {k}", "m64y"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W1", "93", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "m64y"},
			name = "vgatherqpd",
		},
		['xmm,m64x,xmm'] = {
			func = function(op1, op2, op3) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64x", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64x, X:xmm",
			opcode = {"VEX.DDS.128.66.0F38.W1", "93", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m64x", "xmm"},
			name = "vgatherqpd",
		},
		['ymm,m64y,ymm'] = {
			func = function(op1, op2, op3) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64y", "ymm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:ymm, vm32/m64y, X:ymm",
			opcode = {"VEX.DDS.256.66.0F38.W1", "93", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m64y", "ymm"},
			name = "vgatherqpd",
		},
		['xmm {k},m64x'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {k}", "m64x"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W1", "93", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "m64x"},
			name = "vgatherqpd",
		},
		['ymm {k},vm32'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W1", "93", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "vm32"},
			name = "vgatherqpd",
		},
		['zmm {k},m64z'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {k}", "m64z"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W1", "93", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "m64z"},
			name = "vgatherqpd",
		},
		['ymm,vm32,ymm'] = {
			func = function(op1, op2, op3) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "vm32", "ymm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:ymm, vm32/m64y, X:ymm",
			opcode = {"VEX.DDS.256.66.0F38.W1", "93", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "vm32", "ymm"},
			name = "vgatherqpd",
		},
		['zmm {k},vm32'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W1", "93", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "vm32"},
			name = "vgatherqpd",
		},
		['xmm {k},vm32'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W1", "93", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "vm32"},
			name = "vgatherqpd",
		},
		['xmm,vm32,xmm'] = {
			func = function(op1, op2, op3) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "vm32", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64x, X:xmm",
			opcode = {"VEX.DDS.128.66.0F38.W1", "93", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "vm32", "xmm"},
			name = "vgatherqpd",
		},
	},
	['vrangesd'] = {
		['xmm {kz},xmm[15:8],m32,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x51"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W1", "51", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm {kz}", "xmm[15:8]", "m32", "ub {sae}"},
			name = "vrangesd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x51"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]", "ib"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W1", "51", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]", "i8"},
			name = "vrangesd",
		},
		['xmm {kz},xmm[15:8],m64,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x51"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W1", "51", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm {kz}", "xmm[15:8]", "m64", "ub {sae}"},
			name = "vrangesd",
		},
	},
	['vpmovdw'] = {
		['xmm,ymm'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "33", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "ymm"},
			name = "vpmovdw",
		},
		['xmm[7:0],xmm'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "33", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0]", "xmm"},
			name = "vpmovdw",
		},
		['m256 {kz},zmm'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "33", "/r"},
			metadata = "AVX512_F",
			operands = {"m256 {kz}", "zmm"},
			name = "vpmovdw",
		},
		['ymm,zmm'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "33", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm", "zmm"},
			name = "vpmovdw",
		},
		['m128 {kz},ymm'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "33", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "ymm"},
			name = "vpmovdw",
		},
		['m64 {kz},xmm'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "33", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "xmm"},
			name = "vpmovdw",
		},
		['m32,xmm'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "33", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "xmm"},
			name = "vpmovdw",
		},
	},
	['vfmsubadd213pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "A7", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmsubadd213pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "A7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmsubadd213pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "A7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmsubadd213pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "A7", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmsubadd213pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "A7", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmsubadd213pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "A7", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmsubadd213pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "A7", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfmsubadd213pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "A7", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmsubadd213pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "A7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfmsubadd213pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "A7", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmsubadd213pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "A7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfmsubadd213pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "A7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmsubadd213pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "A7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmsubadd213pd",
		},
	},
	['vcvtpd2dq'] = {
		['xmm,ymm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, ymm/m256",
			opcode = {"VEX.256.F2.0F.WIG", "E6", "/r"},
			metadata = "AVX",
			operands = {"xmm", "ymm"},
			name = "vcvtpd2dq",
		},
		['xmm[7:0],xmm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm/m128",
			opcode = {"VEX.128.F2.0F.WIG", "E6", "/r"},
			metadata = "AVX",
			operands = {"xmm[7:0]", "xmm"},
			name = "vcvtpd2dq",
		},
		['xmm[7:0] {kz},b64'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.F2.0F.W1", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0] {kz}", "b64"},
			name = "vcvtpd2dq",
		},
		['xmm[7:0],m128'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm/m128",
			opcode = {"VEX.128.F2.0F.WIG", "E6", "/r"},
			metadata = "AVX",
			operands = {"xmm[7:0]", "m128"},
			name = "vcvtpd2dq",
		},
		['xmm[7:0] {kz},xmm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.F2.0F.W1", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0] {kz}", "xmm"},
			name = "vcvtpd2dq",
		},
		['ymm {kz},zmm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.F2.0F.W1", "E6", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "zmm"},
			name = "vcvtpd2dq",
		},
		['xmm,m256'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, ymm/m256",
			opcode = {"VEX.256.F2.0F.WIG", "E6", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m256"},
			name = "vcvtpd2dq",
		},
		['ymm {kz},m512'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.F2.0F.W1", "E6", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "m512"},
			name = "vcvtpd2dq",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.F2.0F.W1", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vcvtpd2dq",
		},
		['xmm {kz},m256'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.F2.0F.W1", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m256"},
			name = "vcvtpd2dq",
		},
		['ymm {kz},b64 {er}'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64 {er}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.F2.0F.W1", "E6", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "b64 {er}"},
			name = "vcvtpd2dq",
		},
		['xmm[7:0] {kz},m128'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.F2.0F.W1", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0] {kz}", "m128"},
			name = "vcvtpd2dq",
		},
		['xmm {kz},ymm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.F2.0F.W1", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "ymm"},
			name = "vcvtpd2dq",
		},
	},
	['vreducess'] = {
		['xmm {kz},xmm[15:4],xmm[3:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x57"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]", "ib"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64, ib/ub",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W0", "57", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]", "i8"},
			name = "vreducess",
		},
		['xmm {kz},xmm[15:4],m32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x57"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32", "ub"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64, ib/ub",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W0", "57", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm {kz}", "xmm[15:4]", "m32", "u8"},
			name = "vreducess",
		},
		['xmm {kz},xmm[15:4],m64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x57"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64", "ub"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64, ib/ub",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W0", "57", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm {kz}", "xmm[15:4]", "m64", "u8"},
			name = "vreducess",
		},
	},
	['vpsubusb'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xD8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "D8", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsubusb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "D8", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsubusb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xD8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "D8", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsubusb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D8", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsubusb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D8", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsubusb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xD8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D8", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsubusb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xD8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "D8", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsubusb",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xD8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D8", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsubusb",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xD8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "D8", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsubusb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "D8", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsubusb",
		},
	},
	['ldmxcsr'] = {
		['m32'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "AE", "/2"},
			metadata = "SSE",
			operands = {"m32"},
			name = "ldmxcsr",
		},
		['m64'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "AE", "/2"},
			metadata = "SSE",
			operands = {"m64"},
			name = "ldmxcsr",
		},
	},
	['vpaddsb'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xEC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "EC", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpaddsb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xEC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "EC", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpaddsb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xEC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "EC", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpaddsb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xEC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "EC", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpaddsb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xEC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "EC", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpaddsb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xEC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "EC", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpaddsb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xEC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "EC", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpaddsb",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xEC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "EC", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpaddsb",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xEC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "EC", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpaddsb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xEC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "EC", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpaddsb",
		},
	},
	['vphadduwq'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xD7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "D7", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vphadduwq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xD7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "D7", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vphadduwq",
		},
	},
	['setnbe'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "97", "/r"},
			metadata = "ANY              CF=R ZF=R",
			operands = {"m8"},
			name = "setnbe",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "97", "/r"},
			metadata = "ANY              CF=R ZF=R",
			operands = {"r8"},
			name = "setnbe",
		},
	},
	['bound'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r32, R:m32/m64",
			opcode = {"62", "/r"},
			metadata = "X86 Deprecated",
			operands = {"r32", "m32"},
			name = "bound",
		},
		['r16,m32'] = {
			func = function(op1, op2) return "\x66\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r16, R:m32/m64",
			opcode = {"66", "62", "/r"},
			metadata = "X86 Deprecated",
			operands = {"r16", "m32"},
			name = "bound",
		},
		['r16,m64'] = {
			func = function(op1, op2) return "\x66\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r16, R:m32/m64",
			opcode = {"66", "62", "/r"},
			metadata = "X86 Deprecated",
			operands = {"r16", "m64"},
			name = "bound",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r32, R:m32/m64",
			opcode = {"62", "/r"},
			metadata = "X86 Deprecated",
			operands = {"r32", "m64"},
			name = "bound",
		},
	},
	['vfnmadd132pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "9C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfnmadd132pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "9C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfnmadd132pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "9C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfnmadd132pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "9C", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfnmadd132pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "9C", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfnmadd132pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "9C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfnmadd132pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "9C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfnmadd132pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "9C", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfnmadd132pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "9C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfnmadd132pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "9C", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfnmadd132pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "9C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfnmadd132pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "9C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfnmadd132pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "9C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfnmadd132pd",
		},
	},
	['vpbroadcastw'] = {
		['zmm {kz},m16'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m16"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[1:0]/m16",
			opcode = {"EVEX.512.66.0F38.W0", "79", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "m16"},
			name = "vpbroadcastw",
		},
		['ymm {kz},m16'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m16"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[1:0]/m16",
			opcode = {"EVEX.256.66.0F38.W0", "79", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "m16"},
			name = "vpbroadcastw",
		},
		['ymm {kz},r32[1:0]'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "r32[1:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, r32[1:0]",
			opcode = {"EVEX.256.66.0F38.W0", "7B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "r32[1:0]"},
			name = "vpbroadcastw",
		},
		['xmm,xmm[1:0]'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[1:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[1:0]/m16",
			opcode = {"VEX.128.66.0F38.W0", "79", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm[1:0]"},
			name = "vpbroadcastw",
		},
		['xmm {kz},m16'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m16"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[1:0]/m16",
			opcode = {"EVEX.128.66.0F38.W0", "79", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "m16"},
			name = "vpbroadcastw",
		},
		['xmm {kz},r64[1:0]'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "r64[1:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, r64[1:0]",
			opcode = {"EVEX.128.66.0F38.W0", "7B", "/r"},
			metadata = "AVX512_BW-VL X64",
			operands = {"xmm {kz}", "r64[1:0]"},
			name = "vpbroadcastw",
		},
		['zmm {kz},xmm[1:0]'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "xmm[1:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[1:0]/m16",
			opcode = {"EVEX.512.66.0F38.W0", "79", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "xmm[1:0]"},
			name = "vpbroadcastw",
		},
		['xmm {kz},xmm[1:0]'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[1:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[1:0]/m16",
			opcode = {"EVEX.128.66.0F38.W0", "79", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm[1:0]"},
			name = "vpbroadcastw",
		},
		['ymm,m16'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[1:0]/m16",
			opcode = {"VEX.256.66.0F38.W0", "79", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m16"},
			name = "vpbroadcastw",
		},
		['zmm {kz},r64[1:0]'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "r64[1:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, r64[1:0]",
			opcode = {"EVEX.512.66.0F38.W0", "7B", "/r"},
			metadata = "AVX512_BW X64",
			operands = {"zmm {kz}", "r64[1:0]"},
			name = "vpbroadcastw",
		},
		['xmm,m16'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[1:0]/m16",
			opcode = {"VEX.128.66.0F38.W0", "79", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m16"},
			name = "vpbroadcastw",
		},
		['zmm {kz},r32[1:0]'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "r32[1:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, r32[1:0]",
			opcode = {"EVEX.512.66.0F38.W0", "7B", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "r32[1:0]"},
			name = "vpbroadcastw",
		},
		['ymm {kz},xmm[1:0]'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm[1:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[1:0]/m16",
			opcode = {"EVEX.256.66.0F38.W0", "79", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "xmm[1:0]"},
			name = "vpbroadcastw",
		},
		['ymm {kz},r64[1:0]'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "r64[1:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, r64[1:0]",
			opcode = {"EVEX.256.66.0F38.W0", "7B", "/r"},
			metadata = "AVX512_BW-VL X64",
			operands = {"ymm {kz}", "r64[1:0]"},
			name = "vpbroadcastw",
		},
		['ymm,xmm[1:0]'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm[1:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[1:0]/m16",
			opcode = {"VEX.256.66.0F38.W0", "79", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm[1:0]"},
			name = "vpbroadcastw",
		},
		['xmm {kz},r32[1:0]'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "r32[1:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, r32[1:0]",
			opcode = {"EVEX.128.66.0F38.W0", "7B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "r32[1:0]"},
			name = "vpbroadcastw",
		},
	},
	['pminsd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "39", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "pminsd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "39", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm"},
			name = "pminsd",
		},
	},
	['sysret'] = {
		[''] = {
			func = function(op1) return "\x0F\x07" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "07"},
			metadata = "X64              Volatile PRIVILEGE=L0",
			operands = {""},
			name = "sysret",
		},
	},
	['xsaveopt'] = {
		['m32'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"0F", "AE", "/6"},
			metadata = "XSAVEOPT         Volatile XCR=R",
			operands = {"m32"},
			name = "xsaveopt",
		},
		['m64'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"0F", "AE", "/6"},
			metadata = "XSAVEOPT         Volatile XCR=R",
			operands = {"m64"},
			name = "xsaveopt",
		},
	},
	['vlddqu'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xF0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, m128",
			opcode = {"VEX.128.F2.0F.WIG", "F0", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vlddqu",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\xF0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, m256",
			opcode = {"VEX.256.F2.0F.WIG", "F0", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vlddqu",
		},
	},
	['vfmsub132pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "9A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmsub132pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "9A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmsub132pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "9A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmsub132pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "9A", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmsub132pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "9A", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmsub132pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "9A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmsub132pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "9A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfmsub132pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "9A", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmsub132pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "9A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfmsub132pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "9A", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmsub132pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "9A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfmsub132pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "9A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmsub132pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "9A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmsub132pd",
		},
	},
	['vfmsubadd132pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "97", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmsubadd132pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "97", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmsubadd132pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "97", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmsubadd132pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "97", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmsubadd132pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "97", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmsubadd132pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "97", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmsubadd132pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "97", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfmsubadd132pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "97", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmsubadd132pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "97", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfmsubadd132pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "97", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmsubadd132pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "97", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfmsubadd132pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "97", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmsubadd132pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "97", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmsubadd132pd",
		},
	},
	['vxorps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.0F.W0", "57", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vxorps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "57", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vxorps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "57", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vxorps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "57", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vxorps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "57", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vxorps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "57", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vxorps",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.0F.W0", "57", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vxorps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "57", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vxorps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "57", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vxorps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "57", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vxorps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.0F.W0", "57", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vxorps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "57", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vxorps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "57", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vxorps",
		},
	},
	['vmovupd'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F.W1", "11", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vmovupd",
		},
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F.W1", "10", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vmovupd",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F.W1", "11", "/r"},
			metadata = "AVX512_F",
			operands = {"m512 {kz}", "zmm"},
			name = "vmovupd",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F.W1", "11", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vmovupd",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:ymm/m256, ymm",
			opcode = {"VEX.256.0F.WIG", "11", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vmovupd",
		},
		['m128,xmm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"VEX.128.0F.WIG", "11", "/r"},
			metadata = "AVX",
			operands = {"m128", "xmm"},
			name = "vmovupd",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.0F.WIG", "10", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vmovupd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F.W1", "10", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vmovupd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F.W1", "10", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vmovupd",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F.W1", "10", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vmovupd",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F.W1", "11", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm", "zmm"},
			name = "vmovupd",
		},
		['m256,ymm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256", "ymm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:ymm/m256, ymm",
			opcode = {"VEX.256.0F.WIG", "11", "/r"},
			metadata = "AVX",
			operands = {"m256", "ymm"},
			name = "vmovupd",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F.W1", "10", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vmovupd",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F.W1", "11", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vmovupd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.0F.WIG", "10", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vmovupd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"VEX.128.0F.WIG", "11", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vmovupd",
		},
	},
	['jecxz'] = {
		['i8'] = {
			func = function(op1) return "\xE3"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "R:<rcx>, rel8",
			opcode = {"E3", "cb"},
			metadata = "X64              Control=Branch",
			operands = {"string"},
			name = "jecxz",
		},
		['string'] = {
			func = function(op1) return "\xE3"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "R:<rcx>, rel8",
			opcode = {"E3", "cb"},
			metadata = "X64              Control=Branch",
			operands = {"string"},
			name = "jecxz",
		},
	},
	['vroundpd'] = {
		['ymm,m256,u8'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "m256", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.66.0F3A.WIG", "09", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "m256", "u8"},
			name = "vroundpd",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.66.0F3A.WIG", "09", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "i8"},
			name = "vroundpd",
		},
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.66.0F3A.WIG", "09", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "i8"},
			name = "vroundpd",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.66.0F3A.WIG", "09", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "m128", "u8"},
			name = "vroundpd",
		},
	},
	['vgf2p8affineinvqb'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xCF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "CF", "/r", "ib"},
			metadata = "AVX GFNI",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vgf2p8affineinvqb",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xCF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "CF", "/r", "ib"},
			metadata = "AVX GFNI",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vgf2p8affineinvqb",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xCF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "CF", "/r", "ib"},
			metadata = "AVX512_F-VL GFNI",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vgf2p8affineinvqb",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xCF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "CF", "/r", "ib"},
			metadata = "AVX512_F-VL GFNI",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vgf2p8affineinvqb",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xCF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "CF", "/r", "ib"},
			metadata = "AVX512_F-VL GFNI",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vgf2p8affineinvqb",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\xCF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "CF", "/r", "ib"},
			metadata = "AVX GFNI",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vgf2p8affineinvqb",
		},
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xCF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "CF", "/r", "ib"},
			metadata = "AVX GFNI",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vgf2p8affineinvqb",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\xCF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "CF", "/r", "ib"},
			metadata = "AVX512_F    GFNI",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vgf2p8affineinvqb",
		},
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xCF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "CF", "/r", "ib"},
			metadata = "AVX512_F    GFNI",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vgf2p8affineinvqb",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\xCF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "CF", "/r", "ib"},
			metadata = "AVX512_F-VL GFNI",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vgf2p8affineinvqb",
		},
	},
	['vpmaddwd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "F5", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmaddwd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "F5", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmaddwd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "F5", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmaddwd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "F5", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmaddwd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "F5", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpmaddwd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "F5", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmaddwd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "F5", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmaddwd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "F5", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpmaddwd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "F5", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmaddwd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "F5", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmaddwd",
		},
	},
	['str'] = {
		['m16'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\x00"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r64/m16",
			opcode = {"REX.W", "0F", "00", "/1"},
			metadata = "X64              Volatile",
			operands = {"m16"},
			name = "str",
		},
		['r32'] = {
			func = function(op1) return "\x0F\x00"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r32/m16",
			opcode = {"0F", "00", "/1"},
			metadata = "ANY              Volatile",
			operands = {"r32"},
			name = "str",
		},
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\x00"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r64/m16",
			opcode = {"REX.W", "0F", "00", "/1"},
			metadata = "X64              Volatile",
			operands = {"r64"},
			name = "str",
		},
		['r16'] = {
			func = function(op1) return "\x66\x0F\x00"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r16/m16",
			opcode = {"66", "0F", "00", "/1"},
			metadata = "ANY              Volatile",
			operands = {"r16"},
			name = "str",
		},
	},
	['bts'] = {
		['m16,u8'] = {
			func = function(op1, op2) return "\x66\x0F\xBA"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "0F", "BA", "/5", "ib"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m16", "u8"},
			name = "bts",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32",
			opcode = {"0F", "AB", "/r"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r32", "r32"},
			name = "bts",
		},
		['m32,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xBA"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "0F", "BA", "/5", "ib"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m32", "u8"},
			name = "bts",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xAB"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64",
			opcode = {"REX.W", "0F", "AB", "/r"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m32", "r64"},
			name = "bts",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x0F\xAB"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32",
			opcode = {"0F", "AB", "/r"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m64", "r32"},
			name = "bts",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x0F\xAB"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32",
			opcode = {"0F", "AB", "/r"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m32", "r32"},
			name = "bts",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\xAB"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16",
			opcode = {"66", "0F", "AB", "/r"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m16", "r16"},
			name = "bts",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xBA"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "0F", "BA", "/5", "ib"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r64", "i8"},
			name = "bts",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64",
			opcode = {"REX.W", "0F", "AB", "/r"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r64", "r64"},
			name = "bts",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xAB"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64",
			opcode = {"REX.W", "0F", "AB", "/r"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m64", "r64"},
			name = "bts",
		},
		['m64,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xBA"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "0F", "BA", "/5", "ib"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m64", "u8"},
			name = "bts",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\x0F\xBA"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib/ub",
			opcode = {"0F", "BA", "/5", "ib"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r32", "i8"},
			name = "bts",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16",
			opcode = {"66", "0F", "AB", "/r"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r16", "r16"},
			name = "bts",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\x0F\xBA"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "0F", "BA", "/5", "ib"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r16", "i8"},
			name = "bts",
		},
	},
	['vpsubq'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "FB", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsubq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "FB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsubq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "FB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsubq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "FB", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsubq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "FB", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsubq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "FB", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpsubq",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "FB", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsubq",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "FB", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsubq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "FB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpsubq",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "FB", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsubq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "FB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpsubq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "FB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsubq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "FB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsubq",
		},
	},
	['vpunpckhdq'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "6A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpunpckhdq",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "6A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpunpckhdq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "6A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpunpckhdq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "6A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpunpckhdq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "6A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpunpckhdq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "6A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpunpckhdq",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "6A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpunpckhdq",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "6A", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpunpckhdq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "6A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpunpckhdq",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "6A", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpunpckhdq",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "6A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpunpckhdq",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "6A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpunpckhdq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "6A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpunpckhdq",
		},
	},
	['jnz'] = {
		['string'] = {
			func = function(op1) return "\x0F\x85"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"string"},
			encoding = "D",
			has_relative = false,
			operands2 = "rel32",
			opcode = {"0F", "85", "cd"},
			metadata = "ANY              Control=Branch ZF=R",
			operands = {"string"},
			name = "jnz",
		},
	},
	['int3'] = {
		[''] = {
			func = function(op1) return "\xCC" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"CC"},
			metadata = "ANY              Volatile",
			operands = {""},
			name = "int3",
		},
	},
	['tzcnt'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\xF3\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"F3", "0F", "BC", "/r"},
			metadata = "BMI              OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r32", "m32"},
			name = "tzcnt",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\xF3\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"F3", "0F", "BC", "/r"},
			metadata = "BMI              OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r32", "r32"},
			name = "tzcnt",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\xF3\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"F3", "0F", "BC", "/r"},
			metadata = "BMI              OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r32", "m64"},
			name = "tzcnt",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "F3", "0F", "BC", "/r"},
			metadata = "BMI X64          OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r64", "m64"},
			name = "tzcnt",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "F3", "0F", "BC", "/r"},
			metadata = "BMI X64          OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r64", "m32"},
			name = "tzcnt",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "F3", "0F", "BC", "/r"},
			metadata = "BMI X64          OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r64", "r64"},
			name = "tzcnt",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\xF3\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, r16/m16",
			opcode = {"66", "F3", "0F", "BC", "/r"},
			metadata = "BMI              OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r16", "r16"},
			name = "tzcnt",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\xF3\x0F\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, r16/m16",
			opcode = {"66", "F3", "0F", "BC", "/r"},
			metadata = "BMI              OF=U SF=U ZF=W AF=U PF=U CF=W",
			operands = {"r16", "m16"},
			name = "tzcnt",
		},
	},
	['neg'] = {
		['m8'] = {
			func = function(op1) return "\xF6"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8",
			opcode = {"F6", "/3"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8"},
			name = "neg",
		},
		['r8'] = {
			func = function(op1) return "\xF6"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8",
			opcode = {"F6", "/3"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8"},
			name = "neg",
		},
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64",
			opcode = {"REX.W", "F7", "/3"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32"},
			name = "neg",
		},
		['r16'] = {
			func = function(op1) return "\x66\xF7"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16",
			opcode = {"66", "F7", "/3"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16"},
			name = "neg",
		},
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64",
			opcode = {"REX.W", "F7", "/3"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64"},
			name = "neg",
		},
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64",
			opcode = {"REX.W", "F7", "/3"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64"},
			name = "neg",
		},
		['r32'] = {
			func = function(op1) return "\xF7"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64",
			opcode = {"F7", "/3"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32"},
			name = "neg",
		},
		['m16'] = {
			func = function(op1) return "\x66\xF7"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16",
			opcode = {"66", "F7", "/3"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16"},
			name = "neg",
		},
	},
	['prefetchw'] = {
		['m32'] = {
			func = function(op1) return "\x0F\x0D"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "0D", "/1"},
			metadata = "PREFETCHW        OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"m32"},
			name = "prefetchw",
		},
		['m64'] = {
			func = function(op1) return "\x0F\x0D"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "0D", "/1"},
			metadata = "PREFETCHW        OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"m64"},
			name = "prefetchw",
		},
	},
	['comisd'] = {
		['xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "2F", "/r"},
			metadata = "SSE2 OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[7:0]", "xmm[7:0]"},
			name = "comisd",
		},
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\x66\x0F\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "2F", "/r"},
			metadata = "SSE2 OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[7:0]", "m64"},
			name = "comisd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\x66\x0F\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "2F", "/r"},
			metadata = "SSE2 OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[7:0]", "m32"},
			name = "comisd",
		},
	},
	['jmp'] = {
		['m64'] = {
			func = function(op1) return "\xFF"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m64"},
			encoding = "D",
			has_relative = false,
			operands2 = "R:r64/m32/m64",
			opcode = {"FF", "/4"},
			metadata = "X64              Control=Jump",
			operands = {"m64"},
			name = "jmp",
		},
		['r32'] = {
			func = function(op1) return "\xFF"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r32"},
			encoding = "D",
			has_relative = false,
			operands2 = "R:r32/m32/m64",
			opcode = {"FF", "/4"},
			metadata = "X86              Control=Jump",
			operands = {"r32"},
			name = "jmp",
		},
		['m32'] = {
			func = function(op1) return "\xFF"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m32"},
			encoding = "D",
			has_relative = false,
			operands2 = "R:r64/m32/m64",
			opcode = {"FF", "/4"},
			metadata = "X64              Control=Jump",
			operands = {"m32"},
			name = "jmp",
		},
		['string'] = {
			func = function(op1) return "\xE9"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"E9", "cd"},
			metadata = "ANY              Control=Jump",
			operands = {"string"},
			name = "jmp",
		},
		['i8'] = {
			func = function(op1) return "\xEB"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"EB", "cb"},
			metadata = "ANY              Control=Jump",
			operands = {"string"},
			name = "jmp",
		},
		['r64'] = {
			func = function(op1) return "\xFF"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r64"},
			encoding = "D",
			has_relative = false,
			operands2 = "R:r64/m32/m64",
			opcode = {"FF", "/4"},
			metadata = "X64              Control=Jump",
			operands = {"r64"},
			name = "jmp",
		},
		['i32'] = {
			func = function(op1) return "\xE9"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"E9", "cd"},
			metadata = "ANY              Control=Jump",
			operands = {"string"},
			name = "jmp",
		},
		['i16'] = {
			func = function(op1) return "\x66\xE9"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "E9", "cw"},
			metadata = "X86              Control=Jump",
			operands = {"string"},
			name = "jmp",
		},
	},
	['pcmpistrm'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x62"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<xmm0>",
			opcode = {"66", "0F", "3A", "62", "/r", "ib"},
			metadata = "SSE4_2 OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "xmm", "i8"},
			name = "pcmpistrm",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x62"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<xmm0>",
			opcode = {"66", "0F", "3A", "62", "/r", "ib"},
			metadata = "SSE4_2 OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "m128", "u8"},
			name = "pcmpistrm",
		},
	},
	['gf2p8affineqb'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\xCE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "CE", "/r", "ib"},
			metadata = "GFNI",
			operands = {"xmm", "xmm", "i8"},
			name = "gf2p8affineqb",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\xCE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "CE", "/r", "ib"},
			metadata = "GFNI",
			operands = {"xmm", "m128", "u8"},
			name = "gf2p8affineqb",
		},
	},
	['vscalefpd'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "2C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vscalefpd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "2C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vscalefpd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "2C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vscalefpd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "2C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vscalefpd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "2C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vscalefpd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "2C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vscalefpd",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "2C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vscalefpd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "2C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vscalefpd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "2C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vscalefpd",
		},
	},
	['vpcmpuw'] = {
		['k {k},ymm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "b64", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "3E", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "b64", "u8"},
			name = "vpcmpuw",
		},
		['k {k},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "m256", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "3E", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "m256", "u8"},
			name = "vpcmpuw",
		},
		['k {k},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x3E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "3E", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "ymm", "i8"},
			name = "vpcmpuw",
		},
		['k {k},zmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "b64", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "3E", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "b64", "u8"},
			name = "vpcmpuw",
		},
		['k {k},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "m128", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "3E", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "m128", "u8"},
			name = "vpcmpuw",
		},
		['k {k},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x3E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "3E", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "xmm", "i8"},
			name = "vpcmpuw",
		},
		['k {k},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "m512", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "3E", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "m512", "u8"},
			name = "vpcmpuw",
		},
		['k {k},xmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "b64", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "3E", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "b64", "u8"},
			name = "vpcmpuw",
		},
		['k {k},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x3E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "3E", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "zmm", "i8"},
			name = "vpcmpuw",
		},
	},
	['psubq'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "FB", "/r"},
			metadata = "SSE2",
			operands = {"mm", "m32"},
			name = "psubq",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "FB", "/r"},
			metadata = "SSE2",
			operands = {"mm", "m64"},
			name = "psubq",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "FB", "/r"},
			metadata = "SSE2",
			operands = {"mm", "mm"},
			name = "psubq",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "FB", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psubq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xFB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "FB", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psubq",
		},
	},
	['vfnmadd132ss'] = {
		['xmm[3:0] {kz},xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "9D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			name = "vfnmadd132ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "9D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			name = "vfnmadd132ss",
		},
		['xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3) return "\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "9D", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfnmadd132ss",
		},
		['xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "9D", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfnmadd132ss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "9D", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfnmadd132ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "9D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			name = "vfnmadd132ss",
		},
	},
	['xsave64'] = {
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xAE"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"REX.W", "0F", "AE", "/4"},
			metadata = "XSAVE X64        Volatile XCR=R",
			operands = {"m32"},
			name = "xsave64",
		},
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xAE"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"REX.W", "0F", "AE", "/4"},
			metadata = "XSAVE X64        Volatile XCR=R",
			operands = {"m64"},
			name = "xsave64",
		},
	},
	['pfnacc'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x8A" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "8A"},
			metadata = "3DNOW2",
			operands = {"mm", "m32"},
			name = "pfnacc",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x8A" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "8A"},
			metadata = "3DNOW2",
			operands = {"mm", "m64"},
			name = "pfnacc",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x8A" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "8A"},
			metadata = "3DNOW2",
			operands = {"mm", "mm"},
			name = "pfnacc",
		},
	},
	['vcvtps2ph'] = {
		['m64,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x1D"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m64", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64, xmm, ib/ub",
			opcode = {"VEX.128.66.0F3A.W0", "1D", "/r", "ib"},
			metadata = "F16C",
			operands = {"m64", "xmm", "u8"},
			name = "vcvtps2ph",
		},
		['xmm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x1D"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "ymm", "ib"},
			encoding = "MRI-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "1D", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "ymm", "i8"},
			name = "vcvtps2ph",
		},
		['m256 {kz},zmm,ub {sae}'] = {
			func = function(op1, op2, op3) return "\x1D"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m256 {kz}", "zmm", "ub {sae}"},
			encoding = "MRI-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm, ib/ub {sae}",
			opcode = {"EVEX.512.66.0F3A.W0", "1D", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"m256 {kz}", "zmm", "ub {sae}"},
			name = "vcvtps2ph",
		},
		['m32,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x1D"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m32", "xmm", "ub"},
			encoding = "MRI-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64  {kz}, xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "1D", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "xmm", "u8"},
			name = "vcvtps2ph",
		},
		['xmm[7:0],xmm,i8'] = {
			func = function(op1, op2, op3) return "\x1D"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm[7:0]", "xmm", "ib"},
			encoding = "MRI-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64  {kz}, xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "1D", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0]", "xmm", "i8"},
			name = "vcvtps2ph",
		},
		['ymm,zmm,i8'] = {
			func = function(op1, op2, op3) return "\x1D"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "zmm", "ib"},
			encoding = "MRI-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm, ib/ub {sae}",
			opcode = {"EVEX.512.66.0F3A.W0", "1D", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"ymm", "zmm", "i8"},
			name = "vcvtps2ph",
		},
		['m128 {kz},ymm,u8'] = {
			func = function(op1, op2, op3) return "\x1D"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m128 {kz}", "ymm", "ub"},
			encoding = "MRI-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "1D", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "ymm", "u8"},
			name = "vcvtps2ph",
		},
		['m128,ymm,u8'] = {
			func = function(op1, op2, op3) return "\x1D"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m128", "ymm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:xmm/m128, ymm, ib/ub",
			opcode = {"VEX.256.66.0F3A.W0", "1D", "/r", "ib"},
			metadata = "F16C",
			operands = {"m128", "ymm", "u8"},
			name = "vcvtps2ph",
		},
		['m64  {kz},xmm,u8'] = {
			func = function(op1, op2, op3) return "\x1D"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m64  {kz}", "xmm", "ub"},
			encoding = "MRI-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64  {kz}, xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "1D", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"m64  {kz}", "xmm", "u8"},
			name = "vcvtps2ph",
		},
	},
	['fisubr'] = {
		['m64int'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m64int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/5"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m64int"},
			name = "fisubr",
		},
		['m16int'] = {
			func = function(op1) return "\xDE"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m16int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m16int",
			opcode = {"DE", "/5"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m16int"},
			name = "fisubr",
		},
		['m32'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/5"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fisubr",
		},
	},
	['blsfill'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r32", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/2"},
			metadata = "TBM",
			operands = {"r32", "m32"},
			name = "blsfill",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r32", "r32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/2"},
			metadata = "TBM",
			operands = {"r32", "r32"},
			name = "blsfill",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r32", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/2"},
			metadata = "TBM",
			operands = {"r32", "m64"},
			name = "blsfill",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r64", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/2"},
			metadata = "TBM X64",
			operands = {"r64", "m64"},
			name = "blsfill",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r64", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/2"},
			metadata = "TBM X64",
			operands = {"r64", "m32"},
			name = "blsfill",
		},
		['r64,r64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r64", "r64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/2"},
			metadata = "TBM X64",
			operands = {"r64", "r64"},
			name = "blsfill",
		},
	},
	['pushad'] = {
		[''] = {
			func = function(op1) return "\x60" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"60"},
			metadata = "X86 Deprecated",
			operands = {""},
			name = "pushad",
		},
	},
	['vmmcall'] = {
		[''] = {
			func = function(op1) return "\x0F\x01\xD9" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "01", "D9"},
			metadata = "SVM",
			operands = {""},
			name = "vmmcall",
		},
	},
	['vfmsub213ss'] = {
		['xmm[3:0] {kz},xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "AB", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			name = "vfmsub213ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "AB", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			name = "vfmsub213ss",
		},
		['xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3) return "\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "AB", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfmsub213ss",
		},
		['xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "AB", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfmsub213ss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "AB", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfmsub213ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "AB", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			name = "vfmsub213ss",
		},
	},
	['pcmpgtq'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x37"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "37", "/r"},
			metadata = "SSE4_2",
			operands = {"xmm", "m128"},
			name = "pcmpgtq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x37"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "37", "/r"},
			metadata = "SSE4_2",
			operands = {"xmm", "xmm"},
			name = "pcmpgtq",
		},
	},
	['vbroadcastf32x8'] = {
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-T8",
			has_relative = false,
			operands2 = "W:zmm {kz}, m256",
			opcode = {"EVEX.512.66.0F38.W0", "1B", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m256"},
			name = "vbroadcastf32x8",
		},
	},
	['vfixupimmps'] = {
		['xmm {kz},xmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "54", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32", "u8"},
			name = "vfixupimmps",
		},
		['zmm {kz},zmm,m512,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub {sae}"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "54", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512", "ub {sae}"},
			name = "vfixupimmps",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "54", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vfixupimmps",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "54", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vfixupimmps",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "54", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vfixupimmps",
		},
		['zmm {kz},zmm,b32,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b32", "ub {sae}"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "54", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32", "ub {sae}"},
			name = "vfixupimmps",
		},
		['ymm {kz},ymm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "54", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32", "u8"},
			name = "vfixupimmps",
		},
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "54", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vfixupimmps",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "54", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vfixupimmps",
		},
	},
	['sha256msg2'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x38\xCD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "xmm, xmm/m128",
			opcode = {"0F", "38", "CD", "/r"},
			metadata = "SHA",
			operands = {"xmm", "m128"},
			name = "sha256msg2",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x38\xCD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "xmm, xmm/m128",
			opcode = {"0F", "38", "CD", "/r"},
			metadata = "SHA",
			operands = {"xmm", "xmm"},
			name = "sha256msg2",
		},
	},
	['fucomp'] = {
		[''] = {
			func = function(op1) return "\xDD\xE9" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"DD", "E9"},
			metadata = "FPU_POP          C0=W C1=W C2=W C3=W",
			operands = {""},
			name = "fucomp",
		},
		['st(i)'] = {
			func = function(op1) return "\xDD" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "R:st(i)",
			opcode = {"DD", "E8+i"},
			metadata = "FPU_POP          C0=W C1=W C2=W C3=W",
			operands = {"st(i)"},
			name = "fucomp",
		},
	},
	['jle'] = {
		['i8'] = {
			func = function(op1) return "\x7E"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"7E", "cb"},
			metadata = "ANY              Control=Branch ZF=R SF=R OF=R",
			operands = {"string"},
			name = "jle",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x8E"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "8E", "cw"},
			metadata = "X86              Control=Branch ZF=R SF=R OF=R",
			operands = {"string"},
			name = "jle",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x8E"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "8E", "cd"},
			metadata = "ANY              Control=Branch ZF=R SF=R OF=R",
			operands = {"string"},
			name = "jle",
		},
		['string'] = {
			func = function(op1) return "\x0F\x8E"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "8E", "cd"},
			metadata = "ANY              Control=Branch ZF=R SF=R OF=R",
			operands = {"string"},
			name = "jle",
		},
	},
	['pabsb'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x38\x1C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "38", "1C", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m32"},
			name = "pabsb",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x38\x1C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "38", "1C", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m64"},
			name = "pabsb",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x38\x1C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "38", "1C", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "mm"},
			name = "pabsb",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x1C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "1C", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "m128"},
			name = "pabsb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x1C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "1C", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "xmm"},
			name = "pabsb",
		},
	},
	['prefetcht2'] = {
		['m32'] = {
			func = function(op1) return "\x0F\x18"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "18", "/3"},
			metadata = "MMX2",
			operands = {"m32"},
			name = "prefetcht2",
		},
		['m64'] = {
			func = function(op1) return "\x0F\x18"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "18", "/3"},
			metadata = "MMX2",
			operands = {"m64"},
			name = "prefetcht2",
		},
	},
	['vscatterqpd'] = {
		['m64y {k},ymm'] = {
			func = function(op1, op2) return "\xA3" end,
			real_operands = {"m64y {k}", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, ymm",
			opcode = {"EVEX.256.66.0F38.W1", "A3"},
			metadata = "AVX512_F-VL",
			operands = {"m64y {k}", "ymm"},
			name = "vscatterqpd",
		},
		['m64z {k},zmm'] = {
			func = function(op1, op2) return "\xA3" end,
			real_operands = {"m64z {k}", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64z {k}, zmm",
			opcode = {"EVEX.512.66.0F38.W1", "A3"},
			metadata = "AVX512_F",
			operands = {"m64z {k}", "zmm"},
			name = "vscatterqpd",
		},
		['vm32,xmm'] = {
			func = function(op1, op2) return "\xA3" end,
			real_operands = {"vm32", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, xmm",
			opcode = {"EVEX.128.66.0F38.W1", "A3"},
			metadata = "AVX512_F-VL",
			operands = {"vm32", "xmm"},
			name = "vscatterqpd",
		},
		['m64x {k},xmm'] = {
			func = function(op1, op2) return "\xA3" end,
			real_operands = {"m64x {k}", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, xmm",
			opcode = {"EVEX.128.66.0F38.W1", "A3"},
			metadata = "AVX512_F-VL",
			operands = {"m64x {k}", "xmm"},
			name = "vscatterqpd",
		},
		['vm32,zmm'] = {
			func = function(op1, op2) return "\xA3" end,
			real_operands = {"vm32", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64z {k}, zmm",
			opcode = {"EVEX.512.66.0F38.W1", "A3"},
			metadata = "AVX512_F",
			operands = {"vm32", "zmm"},
			name = "vscatterqpd",
		},
		['vm32,ymm'] = {
			func = function(op1, op2) return "\xA3" end,
			real_operands = {"vm32", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, ymm",
			opcode = {"EVEX.256.66.0F38.W1", "A3"},
			metadata = "AVX512_F-VL",
			operands = {"vm32", "ymm"},
			name = "vscatterqpd",
		},
	},
	['vdbpsadbw'] = {
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x42"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "42", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vdbpsadbw",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x42"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "42", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vdbpsadbw",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x42"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "42", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vdbpsadbw",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x42"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "42", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vdbpsadbw",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x42"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "42", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vdbpsadbw",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x42"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "42", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vdbpsadbw",
		},
	},
	['vpcmpistrm'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x62"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<xmm0>",
			opcode = {"VEX.128.66.0F3A.WIG", "62", "/r", "ib"},
			metadata = "AVX OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "xmm", "i8"},
			name = "vpcmpistrm",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x62"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<xmm0>",
			opcode = {"VEX.128.66.0F3A.WIG", "62", "/r", "ib"},
			metadata = "AVX OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "m128", "u8"},
			name = "vpcmpistrm",
		},
	},
	['fxsave64'] = {
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xAE"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m32"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"REX.W", "0F", "AE", "/0"},
			metadata = "FXSR X64         Volatile",
			operands = {"m32"},
			name = "fxsave64",
		},
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xAE"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m64"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"REX.W", "0F", "AE", "/0"},
			metadata = "FXSR X64         Volatile",
			operands = {"m64"},
			name = "fxsave64",
		},
	},
	['fldenv'] = {
		['m32'] = {
			func = function(op1) return "\xD9"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"D9", "/4"},
			metadata = "FPU              C0=W C1=W C2=W C3=W",
			operands = {"m32"},
			name = "fldenv",
		},
		['m64'] = {
			func = function(op1) return "\xD9"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"D9", "/4"},
			metadata = "FPU              C0=W C1=W C2=W C3=W",
			operands = {"m64"},
			name = "fldenv",
		},
	},
	['vpmaxud'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "3F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmaxud",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "3F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpmaxud",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "3F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmaxud",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "3F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmaxud",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "3F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmaxud",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "3F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpmaxud",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "3F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpmaxud",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "3F", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmaxud",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "3F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmaxud",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "3F", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpmaxud",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "3F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmaxud",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "3F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpmaxud",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "3F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmaxud",
		},
	},
	['pushfd'] = {
		[''] = {
			func = function(op1) return "\x9C" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"9C"},
			metadata = "X86",
			operands = {""},
			name = "pushfd",
		},
	},
	['vpunpckhbw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "68", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpunpckhbw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "68", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpunpckhbw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "68", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpunpckhbw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "68", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpunpckhbw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "68", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpunpckhbw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "68", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpunpckhbw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "68", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpunpckhbw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "68", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpunpckhbw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "68", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpunpckhbw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "68", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpunpckhbw",
		},
	},
	['vcvtsd2si'] = {
		['r32,xmm[7:0]'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "xmm[7:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F2.0F.W0", "2D", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "xmm[7:0]"},
			name = "vcvtsd2si",
		},
		['r32,m64 {er}'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64 {er}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F2.0F.W0", "2D", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m64 {er}"},
			name = "vcvtsd2si",
		},
		['r64,xmm[7:0]'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "xmm[7:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F2.0F.W1", "2D", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "xmm[7:0]"},
			name = "vcvtsd2si",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64",
			opcode = {"VEX.LIG.F2.0F.W0", "2D", "/r"},
			metadata = "AVX",
			operands = {"r32", "m64"},
			name = "vcvtsd2si",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64",
			opcode = {"VEX.LIG.F2.0F.W1", "2D", "/r"},
			metadata = "AVX X64",
			operands = {"r64", "m64"},
			name = "vcvtsd2si",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F2.0F.W0", "2D", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m32"},
			name = "vcvtsd2si",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F2.0F.W1", "2D", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m32"},
			name = "vcvtsd2si",
		},
		['r64,m64 {er}'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64 {er}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F2.0F.W1", "2D", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m64 {er}"},
			name = "vcvtsd2si",
		},
	},
	['setnc'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "93", "/r"},
			metadata = "ANY              CF=R",
			operands = {"m8"},
			name = "setnc",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "93", "/r"},
			metadata = "ANY              CF=R",
			operands = {"r8"},
			name = "setnc",
		},
	},
	['verr'] = {
		['m16'] = {
			func = function(op1) return "\x0F\x00"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r16/m16",
			opcode = {"0F", "00", "/4"},
			metadata = "ANY Volatile     ZF=W",
			operands = {"m16"},
			name = "verr",
		},
		['r16'] = {
			func = function(op1) return "\x0F\x00"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r16/m16",
			opcode = {"0F", "00", "/4"},
			metadata = "ANY Volatile     ZF=W",
			operands = {"r16"},
			name = "verr",
		},
	},
	['clac'] = {
		[''] = {
			func = function(op1) return "\x0F\x01\xCA" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "01", "CA"},
			metadata = "SMAP             Volatile AC=0",
			operands = {""},
			name = "clac",
		},
	},
	['aesdec'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "DE", "/r"},
			metadata = "AESNI",
			operands = {"xmm", "m128"},
			name = "aesdec",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "DE", "/r"},
			metadata = "AESNI",
			operands = {"xmm", "xmm"},
			name = "aesdec",
		},
	},
	['addsubps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xF2\x0F\xD0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"F2", "0F", "D0", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "m128"},
			name = "addsubps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xF2\x0F\xD0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"F2", "0F", "D0", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "xmm"},
			name = "addsubps",
		},
	},
	['vrsqrtss'] = {
		['xmm,xmm[15:4],m64'] = {
			func = function(op1, op2, op3) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "52", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m64"},
			name = "vrsqrtss",
		},
		['xmm,xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "52", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			name = "vrsqrtss",
		},
		['xmm,xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "52", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m32"},
			name = "vrsqrtss",
		},
	},
	['fcom'] = {
		[''] = {
			func = function(op1) return "\xD8\xD1" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D8", "D1"},
			metadata = "FPU              C0=W C1=0 C2=W C3=W",
			operands = {""},
			name = "fcom",
		},
		['st(i)'] = {
			func = function(op1) return "\xD8" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "R:st(i)",
			opcode = {"D8", "D0+i"},
			metadata = "FPU              C0=W C1=0 C2=W C3=W",
			operands = {"st(i)"},
			name = "fcom",
		},
		['m32'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DC", "/2"},
			metadata = "FPU              C0=W C1=0 C2=W C3=W",
			operands = {"m32"},
			name = "fcom",
		},
		['m64fp'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64fp"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DC", "/2"},
			metadata = "FPU              C0=W C1=0 C2=W C3=W",
			operands = {"m64fp"},
			name = "fcom",
		},
	},
	['cmpsw'] = {
		[''] = {
			func = function() return "\x66\xA7" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<ds:zsi>, X:<es:zdi>",
			opcode = {"66", "A7"},
			metadata = "ANY _Rep         OF=W SF=W ZF=W AF=W PF=W CF=W DF=R",
			operands = {},
			name = "cmpsw",
		},
	},
	['vphminposuw'] = {
		['xmm[2:0],xmm'] = {
			func = function(op1, op2) return "\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[2:0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[2:0], xmm/m128",
			opcode = {"VEX.128.66.0F38.WIG", "41", "/r"},
			metadata = "AVX",
			operands = {"xmm[2:0]", "xmm"},
			name = "vphminposuw",
		},
		['xmm[2:0],m128'] = {
			func = function(op1, op2) return "\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[2:0]", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[2:0], xmm/m128",
			opcode = {"VEX.128.66.0F38.WIG", "41", "/r"},
			metadata = "AVX",
			operands = {"xmm[2:0]", "m128"},
			name = "vphminposuw",
		},
	},
	['pfrsqrtv'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x87" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "87"},
			metadata = "GEODE",
			operands = {"mm", "m32"},
			name = "pfrsqrtv",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x87" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "87"},
			metadata = "GEODE",
			operands = {"mm", "m64"},
			name = "pfrsqrtv",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x87" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "87"},
			metadata = "GEODE",
			operands = {"mm", "mm"},
			name = "pfrsqrtv",
		},
	},
	['shrd'] = {
		['m64,r64,u8'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xAC"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m64", "r64", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64, ib/ub",
			opcode = {"REX.W", "0F", "AC", "/r", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m64", "r64", "u8"},
			name = "shrd",
		},
		['r32,r32,cl'] = {
			func = function(op1, op2, op3) return "\x0F\xAD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32, cl",
			opcode = {"0F", "AD", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"r32", "r32", "cl"},
			name = "shrd",
		},
		['m32,r64,cl'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xAD"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64, cl",
			opcode = {"REX.W", "0F", "AD", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m32", "r64", "cl"},
			name = "shrd",
		},
		['m64,r32,cl'] = {
			func = function(op1, op2, op3) return "\x0F\xAD"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32, cl",
			opcode = {"0F", "AD", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m64", "r32", "cl"},
			name = "shrd",
		},
		['r16,r16,cl'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xAD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16, cl",
			opcode = {"66", "0F", "AD", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"r16", "r16", "cl"},
			name = "shrd",
		},
		['m32,r64,u8'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xAC"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m32", "r64", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64, ib/ub",
			opcode = {"REX.W", "0F", "AC", "/r", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m32", "r64", "u8"},
			name = "shrd",
		},
		['m32,r32,cl'] = {
			func = function(op1, op2, op3) return "\x0F\xAD"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32, cl",
			opcode = {"0F", "AD", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m32", "r32", "cl"},
			name = "shrd",
		},
		['m64,r64,cl'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xAD"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64, cl",
			opcode = {"REX.W", "0F", "AD", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m64", "r64", "cl"},
			name = "shrd",
		},
		['m64,r32,u8'] = {
			func = function(op1, op2, op3) return "\x0F\xAC"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m64", "r32", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32, ib/ub",
			opcode = {"0F", "AC", "/r", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m64", "r32", "u8"},
			name = "shrd",
		},
		['r32,r32,i8'] = {
			func = function(op1, op2, op3) return "\x0F\xAC"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32", "r32", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32, ib/ub",
			opcode = {"0F", "AC", "/r", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"r32", "r32", "i8"},
			name = "shrd",
		},
		['r64,r64,i8'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xAC"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64", "r64", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64, ib/ub",
			opcode = {"REX.W", "0F", "AC", "/r", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"r64", "r64", "i8"},
			name = "shrd",
		},
		['r64,r64,cl'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xAD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64, cl",
			opcode = {"REX.W", "0F", "AD", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"r64", "r64", "cl"},
			name = "shrd",
		},
		['m32,r32,u8'] = {
			func = function(op1, op2, op3) return "\x0F\xAC"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m32", "r32", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32, ib/ub",
			opcode = {"0F", "AC", "/r", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m32", "r32", "u8"},
			name = "shrd",
		},
		['m16,r16,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xAC"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m16", "r16", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "x:r16/m16, r16, ib/ub",
			opcode = {"66", "0F", "AC", "/r", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m16", "r16", "u8"},
			name = "shrd",
		},
		['r16,r16,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xAC"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r16", "r16", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "x:r16/m16, r16, ib/ub",
			opcode = {"66", "0F", "AC", "/r", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"r16", "r16", "i8"},
			name = "shrd",
		},
		['m16,r16,cl'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xAD"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16, cl",
			opcode = {"66", "0F", "AD", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m16", "r16", "cl"},
			name = "shrd",
		},
	},
	['vsqrtps'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.0F.W0", "51", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vsqrtps",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.0F.W0", "51", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vsqrtps",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.0F.WIG", "51", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vsqrtps",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.0F.WIG", "51", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vsqrtps",
		},
		['zmm {kz},b32 {er}'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {er}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {er}",
			opcode = {"EVEX.512.0F.W0", "51", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32 {er}"},
			name = "vsqrtps",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {er}",
			opcode = {"EVEX.512.0F.W0", "51", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vsqrtps",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.0F.W0", "51", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vsqrtps",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {er}",
			opcode = {"EVEX.512.0F.W0", "51", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vsqrtps",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.0F.W0", "51", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vsqrtps",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.0F.W0", "51", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vsqrtps",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.0F.W0", "51", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vsqrtps",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.0F.WIG", "51", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vsqrtps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.0F.WIG", "51", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vsqrtps",
		},
	},
	['adcx'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32, ~r32/m32/m64",
			opcode = {"66", "0F", "38", "F6", "/r"},
			metadata = "ADX              CF=X",
			operands = {"r32", "m32"},
			name = "adcx",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32, ~r32/m32/m64",
			opcode = {"66", "0F", "38", "F6", "/r"},
			metadata = "ADX              CF=X",
			operands = {"r32", "r32"},
			name = "adcx",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32, ~r32/m32/m64",
			opcode = {"66", "0F", "38", "F6", "/r"},
			metadata = "ADX              CF=X",
			operands = {"r32", "m64"},
			name = "adcx",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x66\x0F\x38\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64, ~r64/m32/m64",
			opcode = {"REX.W", "66", "0F", "38", "F6", "/r"},
			metadata = "ADX X64          CF=X",
			operands = {"r64", "m64"},
			name = "adcx",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x66\x0F\x38\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64, ~r64/m32/m64",
			opcode = {"REX.W", "66", "0F", "38", "F6", "/r"},
			metadata = "ADX X64          CF=X",
			operands = {"r64", "m32"},
			name = "adcx",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x66\x0F\x38\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64, ~r64/m32/m64",
			opcode = {"REX.W", "66", "0F", "38", "F6", "/r"},
			metadata = "ADX X64          CF=X",
			operands = {"r64", "r64"},
			name = "adcx",
		},
	},
	['paddusb'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "DC", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "paddusb",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "DC", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "paddusb",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "DC", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "paddusb",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "DC", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "paddusb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "DC", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "paddusb",
		},
	},
	['movntps'] = {
		['m128,xmm'] = {
			func = function(op1, op2) return "\x0F\x2B"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m128, xmm",
			opcode = {"0F", "2B", "/r"},
			metadata = "SSE",
			operands = {"m128", "xmm"},
			name = "movntps",
		},
	},
	['vsubpd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "5C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vsubpd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "5C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vsubpd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "5C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vsubpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "5C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vsubpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "5C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vsubpd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "5C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vsubpd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "5C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vsubpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "5C", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vsubpd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "5C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vsubpd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "5C", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vsubpd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "5C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vsubpd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "5C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vsubpd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "5C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vsubpd",
		},
	},
	['crc32'] = {
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF2\x0F\x38\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "F2", "0F", "38", "F1", "/r"},
			metadata = "SSE4_2 X64",
			operands = {"r64", "m64"},
			name = "crc32",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\xF2\x0F\x38\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"F2", "0F", "38", "F1", "/r"},
			metadata = "SSE4_2",
			operands = {"r32", "r32"},
			name = "crc32",
		},
		['r32,m16'] = {
			func = function(op1, op2) return "\x66\xF2\x0F\x38\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r16/m16",
			opcode = {"66", "F2", "0F", "38", "F1", "/r"},
			metadata = "SSE4_2",
			operands = {"r32", "m16"},
			name = "crc32",
		},
		['r32,m8'] = {
			func = function(op1, op2) return "\xF2\x0F\x38\xF0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r8/m8",
			opcode = {"F2", "0F", "38", "F0", "/r"},
			metadata = "SSE4_2",
			operands = {"r32", "m8"},
			name = "crc32",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\xF2\x0F\x38\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"F2", "0F", "38", "F1", "/r"},
			metadata = "SSE4_2",
			operands = {"r32", "m32"},
			name = "crc32",
		},
		['r64,m8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF2\x0F\x38\xF0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r8/m8",
			opcode = {"REX.W", "F2", "0F", "38", "F0", "/r"},
			metadata = "SSE4_2 X64",
			operands = {"r64", "m8"},
			name = "crc32",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\xF2\x0F\x38\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"F2", "0F", "38", "F1", "/r"},
			metadata = "SSE4_2",
			operands = {"r32", "m64"},
			name = "crc32",
		},
		['r32,r16'] = {
			func = function(op1, op2) return "\x66\xF2\x0F\x38\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r16/m16",
			opcode = {"66", "F2", "0F", "38", "F1", "/r"},
			metadata = "SSE4_2",
			operands = {"r32", "r16"},
			name = "crc32",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF2\x0F\x38\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "F2", "0F", "38", "F1", "/r"},
			metadata = "SSE4_2 X64",
			operands = {"r64", "r64"},
			name = "crc32",
		},
		['r64,r8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF2\x0F\x38\xF0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r8/m8",
			opcode = {"REX.W", "F2", "0F", "38", "F0", "/r"},
			metadata = "SSE4_2 X64",
			operands = {"r64", "r8"},
			name = "crc32",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF2\x0F\x38\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "F2", "0F", "38", "F1", "/r"},
			metadata = "SSE4_2 X64",
			operands = {"r64", "m32"},
			name = "crc32",
		},
		['r32,r8'] = {
			func = function(op1, op2) return "\xF2\x0F\x38\xF0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r8/m8",
			opcode = {"F2", "0F", "38", "F0", "/r"},
			metadata = "SSE4_2",
			operands = {"r32", "r8"},
			name = "crc32",
		},
	},
	['rsqrtps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"0F", "52", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "rsqrtps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"0F", "52", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "rsqrtps",
		},
	},
	['vgatherdpd'] = {
		['ymm,m64x,ymm'] = {
			func = function(op1, op2, op3) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64x", "ymm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:ymm, vm32/m64x, X:ymm",
			opcode = {"VEX.DDS.256.66.0F38.W1", "92", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m64x", "ymm"},
			name = "vgatherdpd",
		},
		['xmm,m64x,xmm'] = {
			func = function(op1, op2, op3) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64x", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64x, X:xmm",
			opcode = {"VEX.DDS.128.66.0F38.W1", "92", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m64x", "xmm"},
			name = "vgatherdpd",
		},
		['xmm {k},m64x'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {k}", "m64x"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W1", "92", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "m64x"},
			name = "vgatherdpd",
		},
		['ymm {k},vm32'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W1", "92", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "vm32"},
			name = "vgatherdpd",
		},
		['zmm {k},vm32'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W1", "92", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "vm32"},
			name = "vgatherdpd",
		},
		['zmm {k},m64z'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {k}", "m64z"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W1", "92", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "m64z"},
			name = "vgatherdpd",
		},
		['ymm,vm32,ymm'] = {
			func = function(op1, op2, op3) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "vm32", "ymm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:ymm, vm32/m64x, X:ymm",
			opcode = {"VEX.DDS.256.66.0F38.W1", "92", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "vm32", "ymm"},
			name = "vgatherdpd",
		},
		['ymm {k},m64y'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {k}", "m64y"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W1", "92", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "m64y"},
			name = "vgatherdpd",
		},
		['xmm {k},vm32'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W1", "92", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "vm32"},
			name = "vgatherdpd",
		},
		['xmm,vm32,xmm'] = {
			func = function(op1, op2, op3) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "vm32", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64x, X:xmm",
			opcode = {"VEX.DDS.128.66.0F38.W1", "92", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "vm32", "xmm"},
			name = "vgatherdpd",
		},
	},
	['pmovzxbq'] = {
		['xmm,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[1:0]/m16",
			opcode = {"66", "0F", "38", "32", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m16"},
			name = "pmovzxbq",
		},
		['xmm,xmm[1:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[1:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[1:0]/m16",
			opcode = {"66", "0F", "38", "32", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm[1:0]"},
			name = "pmovzxbq",
		},
	},
	['pext'] = {
		['r32,r32,r32'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "r32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r32, r32, r32/m32/m64",
			opcode = {"VEX.NDS.LZ.F3.0F38.W0", "F5", "/r"},
			metadata = "BMI2",
			operands = {"r32", "r32", "r32"},
			name = "pext",
		},
		['r32,r32,m32'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r32, r32, r32/m32/m64",
			opcode = {"VEX.NDS.LZ.F3.0F38.W0", "F5", "/r"},
			metadata = "BMI2",
			operands = {"r32", "r32", "m32"},
			name = "pext",
		},
		['r64,r64,r64'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "r64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r64, r64, r64/m32/m64",
			opcode = {"VEX.NDS.LZ.F3.0F38.W1", "F5", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "r64", "r64"},
			name = "pext",
		},
		['r64,r64,m64'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r64, r64, r64/m32/m64",
			opcode = {"VEX.NDS.LZ.F3.0F38.W1", "F5", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "r64", "m64"},
			name = "pext",
		},
		['r64,r64,m32'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r64, r64, r64/m32/m64",
			opcode = {"VEX.NDS.LZ.F3.0F38.W1", "F5", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "r64", "m32"},
			name = "pext",
		},
		['r32,r32,m64'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r32, r32, r32/m32/m64",
			opcode = {"VEX.NDS.LZ.F3.0F38.W0", "F5", "/r"},
			metadata = "BMI2",
			operands = {"r32", "r32", "m64"},
			name = "pext",
		},
	},
	['clflushopt'] = {
		['m32'] = {
			func = function(op1) return "\x66\x0F\xAE"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"66", "0F", "AE", "/7"},
			metadata = "CLFLUSHOPT       Volatile",
			operands = {"m32"},
			name = "clflushopt",
		},
		['m64'] = {
			func = function(op1) return "\x66\x0F\xAE"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"66", "0F", "AE", "/7"},
			metadata = "CLFLUSHOPT       Volatile",
			operands = {"m64"},
			name = "clflushopt",
		},
	},
	['vinsertps'] = {
		['xmm,xmm,m32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x21"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m32", "ub"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm[3:0]/m32/m64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "21", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm", "m32", "u8"},
			name = "vinsertps",
		},
		['xmm,xmm,m64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x21"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m64", "ub"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm[3:0]/m32/m64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "21", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm", "m64", "u8"},
			name = "vinsertps",
		},
		['xmm,xmm,xmm[3:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x21"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm[3:0]", "ib"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm[3:0]/m32/m64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "21", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm", "xmm[3:0]", "i8"},
			name = "vinsertps",
		},
	},
	['mwait'] = {
		[''] = {
			func = function() return "\x0F\x01\xC9" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:<eax>, R:<ecx>",
			opcode = {"0F", "01", "C9"},
			metadata = "MONITOR          Volatile PRIVILEGE=L0",
			operands = {},
			name = "mwait",
		},
	},
	['clzero'] = {
		[''] = {
			func = function() return "\x0F\x01\xFC" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:<ds:zax>",
			opcode = {"0F", "01", "FC"},
			metadata = "CLZERO           Volatile",
			operands = {},
			name = "clzero",
		},
	},
	['prefetchwt1'] = {
		['m32'] = {
			func = function(op1) return "\x0F\x0D"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "0D", "/2"},
			metadata = "PREFETCHWT1      OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"m32"},
			name = "prefetchwt1",
		},
		['m64'] = {
			func = function(op1) return "\x0F\x0D"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "0D", "/2"},
			metadata = "PREFETCHWT1      OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"m64"},
			name = "prefetchwt1",
		},
	},
	['vcmpss'] = {
		['xmm,xmm[15:4],m32,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm[15:4]", "m32", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64, ib/ub",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "C2", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m32", "u8"},
			name = "vcmpss",
		},
		['xmm,xmm[15:4],xmm[3:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm[15:4]", "xmm[3:0]", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64, ib/ub",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "C2", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "xmm[3:0]", "i8"},
			name = "vcmpss",
		},
		['k {kz},xmm,m64,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "xmm", "m64", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:k {kz}, xmm, xmm[3:0]/m32/m64, ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "C2", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {kz}", "xmm", "m64", "ub {sae}"},
			name = "vcmpss",
		},
		['k {kz},xmm,xmm[3:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "xmm", "xmm[3:0]", "ib"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:k {kz}, xmm, xmm[3:0]/m32/m64, ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "C2", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {kz}", "xmm", "xmm[3:0]", "i8"},
			name = "vcmpss",
		},
		['xmm,xmm[15:4],m64,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm[15:4]", "m64", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64, ib/ub",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "C2", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m64", "u8"},
			name = "vcmpss",
		},
		['k {kz},xmm,m32,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "xmm", "m32", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:k {kz}, xmm, xmm[3:0]/m32/m64, ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "C2", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {kz}", "xmm", "m32", "ub {sae}"},
			name = "vcmpss",
		},
	},
	['vpcmpeqq'] = {
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "29", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vpcmpeqq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "29", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpcmpeqq",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "29", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "m512"},
			name = "vpcmpeqq",
		},
		['k {k},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "b64"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "29", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "b64"},
			name = "vpcmpeqq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "29", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpcmpeqq",
		},
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "29", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vpcmpeqq",
		},
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "29", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vpcmpeqq",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "29", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpcmpeqq",
		},
		['k {k},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "b64"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "29", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "b64"},
			name = "vpcmpeqq",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "29", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpcmpeqq",
		},
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "29", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vpcmpeqq",
		},
		['k {k},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "b64"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "29", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "b64"},
			name = "vpcmpeqq",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "29", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vpcmpeqq",
		},
	},
	['setnl'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9D", "/r"},
			metadata = "ANY              SF=R OF=R",
			operands = {"m8"},
			name = "setnl",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x9D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9D", "/r"},
			metadata = "ANY              SF=R OF=R",
			operands = {"r8"},
			name = "setnl",
		},
	},
	['vpabsd'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x1E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W0", "1E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vpabsd",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x1E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W0", "1E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vpabsd",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x1E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.66.0F38.WIG", "1E", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m256"},
			name = "vpabsd",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x1E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W0", "1E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vpabsd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x1E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W0", "1E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vpabsd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x1E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W0", "1E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vpabsd",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x1E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W0", "1E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vpabsd",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x1E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.66.0F38.WIG", "1E", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm"},
			name = "vpabsd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x1E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.66.0F38.WIG", "1E", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vpabsd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x1E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.66.0F38.WIG", "1E", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vpabsd",
		},
	},
	['vpsrlvw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "10", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsrlvw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "10", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsrlvw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "10", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsrlvw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "10", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsrlvw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "10", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsrlvw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "10", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsrlvw",
		},
	},
	['pfcmpge'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x90" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "90"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pfcmpge",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x90" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "90"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pfcmpge",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x90" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "90"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pfcmpge",
		},
	},
	['cmovb'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "42", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "m32"},
			name = "cmovb",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "42", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "r32"},
			name = "cmovb",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "42", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "m64"},
			name = "cmovb",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "42", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "m64"},
			name = "cmovb",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "42", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "m32"},
			name = "cmovb",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "42", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "r64"},
			name = "cmovb",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "42", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r16", "r16"},
			name = "cmovb",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "42", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r16", "m16"},
			name = "cmovb",
		},
	},
	['vpunpckldq'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "62", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpunpckldq",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "62", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpunpckldq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "62", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpunpckldq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "62", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpunpckldq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "62", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpunpckldq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "62", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpunpckldq",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "62", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpunpckldq",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "62", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpunpckldq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "62", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpunpckldq",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "62", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpunpckldq",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "62", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpunpckldq",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "62", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpunpckldq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "62", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpunpckldq",
		},
	},
	['vgatherpf0dps'] = {
		['m64z {k}'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64z {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C6", "/1"},
			metadata = "AVX512_PFI",
			operands = {"m64z {k}"},
			name = "vgatherpf0dps",
		},
		['vm32'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C6", "/1"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vgatherpf0dps",
		},
	},
	['rcpss'] = {
		['xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "53", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "xmm[3:0]"},
			name = "rcpss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "53", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m32"},
			name = "rcpss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "53", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m64"},
			name = "rcpss",
		},
	},
	['vhaddpd'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "7C", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vhaddpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "7C", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vhaddpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "7C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vhaddpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "7C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vhaddpd",
		},
	},
	['vunpckhpd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "15", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vunpckhpd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vunpckhpd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vunpckhpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "15", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vunpckhpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "15", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vunpckhpd",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "15", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vunpckhpd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "15", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vunpckhpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "15", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vunpckhpd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vunpckhpd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "15", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vunpckhpd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vunpckhpd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vunpckhpd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vunpckhpd",
		},
	},
	['vcvtudq2pd'] = {
		['zmm {kz},ymm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "ymm"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32",
			opcode = {"EVEX.512.F3.0F.W0", "7A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "ymm"},
			name = "vcvtudq2pd",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.F3.0F.W0", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vcvtudq2pd",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.F3.0F.W0", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vcvtudq2pd",
		},
		['zmm {kz},b32'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32",
			opcode = {"EVEX.512.F3.0F.W0", "7A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32"},
			name = "vcvtudq2pd",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.F3.0F.W0", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vcvtudq2pd",
		},
		['ymm {kz},xmm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.F3.0F.W0", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm"},
			name = "vcvtudq2pd",
		},
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32",
			opcode = {"EVEX.512.F3.0F.W0", "7A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m256"},
			name = "vcvtudq2pd",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.F3.0F.W0", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vcvtudq2pd",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.F3.0F.W0", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vcvtudq2pd",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.F3.0F.W0", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vcvtudq2pd",
		},
	},
	['sidt'] = {
		['m32'] = {
			func = function(op1) return "\x0F\x01"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"0F", "01", "/1"},
			metadata = "ANY Volatile",
			operands = {"m32"},
			name = "sidt",
		},
		['m64'] = {
			func = function(op1) return "\x0F\x01"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"0F", "01", "/1"},
			metadata = "ANY Volatile",
			operands = {"m64"},
			name = "sidt",
		},
	},
	['lodsw'] = {
		[''] = {
			func = function() return "\x66\xAD" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "w:<ax>, X:<ds:zsi>",
			opcode = {"66", "AD"},
			metadata = "ANY _Rep         DF=R",
			operands = {},
			name = "lodsw",
		},
	},
	['kmovw'] = {
		['m16,k[1:0]'] = {
			func = function(op1, op2) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m16", "k[1:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m16, k[1:0]",
			opcode = {"VEX.L0.0F.W0", "91", "/r"},
			metadata = "AVX512_F",
			operands = {"m16", "k[1:0]"},
			name = "kmovw",
		},
		['k[1:0],r32[1:0]'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[1:0]", "r32[1:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[1:0], r32[1:0]",
			opcode = {"VEX.L0.0F.W0", "92", "/r"},
			metadata = "AVX512_F",
			operands = {"k[1:0]", "r32[1:0]"},
			name = "kmovw",
		},
		['r64[1:0],k[1:0]'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[1:0]", "k[1:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64[1:0], k[1:0]",
			opcode = {"VEX.L0.0F.W0", "93", "/r"},
			metadata = "AVX512_F  X64",
			operands = {"r64[1:0]", "k[1:0]"},
			name = "kmovw",
		},
		['k[1:0],r64[1:0]'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[1:0]", "r64[1:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[1:0], r64[1:0]",
			opcode = {"VEX.L0.0F.W0", "92", "/r"},
			metadata = "AVX512_F  X64",
			operands = {"k[1:0]", "r64[1:0]"},
			name = "kmovw",
		},
		['k[1:0],k[1:0]'] = {
			func = function(op1, op2) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[1:0]", "k[1:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[1:0], k[1:0]/m16",
			opcode = {"VEX.L0.0F.W0", "90", "/r"},
			metadata = "AVX512_F",
			operands = {"k[1:0]", "k[1:0]"},
			name = "kmovw",
		},
		['k[1:0],m16'] = {
			func = function(op1, op2) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[1:0]", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[1:0], k[1:0]/m16",
			opcode = {"VEX.L0.0F.W0", "90", "/r"},
			metadata = "AVX512_F",
			operands = {"k[1:0]", "m16"},
			name = "kmovw",
		},
		['r32[1:0],k[1:0]'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[1:0]", "k[1:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32[1:0], k[1:0]",
			opcode = {"VEX.L0.0F.W0", "93", "/r"},
			metadata = "AVX512_F",
			operands = {"r32[1:0]", "k[1:0]"},
			name = "kmovw",
		},
	},
	['vpshrdvw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "72", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpshrdvw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "72", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpshrdvw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "72", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpshrdvw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "72", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpshrdvw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "72", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpshrdvw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "72", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpshrdvw",
		},
	},
	['vaesenclast'] = {
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "DD", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"ymm", "ymm", "m256"},
			name = "vaesenclast",
		},
		['zmm,zmm,m512'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "DD", "/r"},
			metadata = "AVX512_F    VAES",
			operands = {"zmm", "zmm", "m512"},
			name = "vaesenclast",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "DD", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"ymm", "ymm", "ymm"},
			name = "vaesenclast",
		},
		['zmm,zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "DD", "/r"},
			metadata = "AVX512_F    VAES",
			operands = {"zmm", "zmm", "zmm"},
			name = "vaesenclast",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "DD", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"xmm", "xmm", "m128"},
			name = "vaesenclast",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "DD", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"xmm", "xmm", "xmm"},
			name = "vaesenclast",
		},
	},
	['cvtpi2pd'] = {
		['xmm,m64'] = {
			func = function(op1, op2) return "\x66\x0F\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, R:mm[7:0]/m32/m64",
			opcode = {"66", "0F", "2A", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m64"},
			name = "cvtpi2pd",
		},
		['xmm,mm[7:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "mm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, R:mm[7:0]/m32/m64",
			opcode = {"66", "0F", "2A", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "mm[7:0]"},
			name = "cvtpi2pd",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x66\x0F\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, R:mm[7:0]/m32/m64",
			opcode = {"66", "0F", "2A", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m32"},
			name = "cvtpi2pd",
		},
	},
	['sha1msg1'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x38\xC9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "xmm, xmm/m128",
			opcode = {"0F", "38", "C9", "/r"},
			metadata = "SHA",
			operands = {"xmm", "m128"},
			name = "sha1msg1",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x38\xC9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "xmm, xmm/m128",
			opcode = {"0F", "38", "C9", "/r"},
			metadata = "SHA",
			operands = {"xmm", "xmm"},
			name = "sha1msg1",
		},
	},
	['vpmovzxbw'] = {
		['zmm {kz},ymm'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "ymm"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256",
			opcode = {"EVEX.512.66.0F38.WIG", "30", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "ymm"},
			name = "vpmovzxbw",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "30", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[7:0]"},
			name = "vpmovzxbw",
		},
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256",
			opcode = {"EVEX.512.66.0F38.WIG", "30", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "m256"},
			name = "vpmovzxbw",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "30", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m64"},
			name = "vpmovzxbw",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "30", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m32"},
			name = "vpmovzxbw",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128",
			opcode = {"EVEX.256.66.0F38.WIG", "30", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vpmovzxbw",
		},
		['ymm {kz},xmm'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128",
			opcode = {"EVEX.256.66.0F38.WIG", "30", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "xmm"},
			name = "vpmovzxbw",
		},
		['ymm,m128'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.66.0F38.WIG", "30", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m128"},
			name = "vpmovzxbw",
		},
		['ymm,xmm'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.66.0F38.WIG", "30", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm"},
			name = "vpmovzxbw",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "30", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vpmovzxbw",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "30", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vpmovzxbw",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "30", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vpmovzxbw",
		},
	},
	['vmulpd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "59", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vmulpd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vmulpd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vmulpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "59", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vmulpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "59", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vmulpd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "59", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vmulpd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "59", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vmulpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "59", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vmulpd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vmulpd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "59", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vmulpd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vmulpd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vmulpd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vmulpd",
		},
	},
	['vpcmpgtq'] = {
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x37"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "37", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vpcmpgtq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x37"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "37", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpcmpgtq",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x37"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "37", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "m512"},
			name = "vpcmpgtq",
		},
		['k {k},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x37"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "b64"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "37", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "b64"},
			name = "vpcmpgtq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x37"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "37", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpcmpgtq",
		},
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x37"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "37", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vpcmpgtq",
		},
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x37"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "37", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vpcmpgtq",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x37"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "37", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpcmpgtq",
		},
		['k {k},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x37"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "b64"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "37", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "b64"},
			name = "vpcmpgtq",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x37"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "37", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpcmpgtq",
		},
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x37"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "37", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vpcmpgtq",
		},
		['k {k},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x37"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "b64"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "37", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "b64"},
			name = "vpcmpgtq",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x37"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "37", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vpcmpgtq",
		},
	},
	['kshiftrw'] = {
		['k[1:0],k[1:0],i8'] = {
			func = function(op1, op2, op3) return "\x30"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[1:0]", "k[1:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[1:0], k[1:0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W1", "30", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k[1:0]", "k[1:0]", "i8"},
			name = "kshiftrw",
		},
		['k[1:0],k[1:0],u8'] = {
			func = function(op1, op2, op3) return "\x30"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[1:0]", "k[1:0]", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[1:0], k[1:0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W1", "30", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k[1:0]", "k[1:0]", "u8"},
			name = "kshiftrw",
		},
	},
	['vpmaxub'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "DE", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmaxub",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "DE", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmaxub",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "DE", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmaxub",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "DE", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmaxub",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "DE", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpmaxub",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "DE", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmaxub",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "DE", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmaxub",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "DE", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpmaxub",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "DE", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmaxub",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "DE", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmaxub",
		},
	},
	['vbroadcasti128'] = {
		['ymm,m128'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, m128",
			opcode = {"VEX.256.66.0F38.W0", "5A", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m128"},
			name = "vbroadcasti128",
		},
	},
	['cmovz'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "44", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r32", "m32"},
			name = "cmovz",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "44", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r32", "r32"},
			name = "cmovz",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "44", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r32", "m64"},
			name = "cmovz",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "44", "/r"},
			metadata = "CMOV X64         ZF=R",
			operands = {"r64", "m64"},
			name = "cmovz",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "44", "/r"},
			metadata = "CMOV X64         ZF=R",
			operands = {"r64", "m32"},
			name = "cmovz",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "44", "/r"},
			metadata = "CMOV X64         ZF=R",
			operands = {"r64", "r64"},
			name = "cmovz",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "44", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r16", "r16"},
			name = "cmovz",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "44", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r16", "m16"},
			name = "cmovz",
		},
	},
	['vpminsw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xEA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "EA", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpminsw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xEA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "EA", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpminsw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xEA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "EA", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpminsw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xEA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "EA", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpminsw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xEA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "EA", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpminsw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xEA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "EA", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpminsw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xEA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "EA", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpminsw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xEA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "EA", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpminsw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xEA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "EA", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpminsw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xEA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "EA", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpminsw",
		},
	},
	['vfnmaddss'] = {
		['xmm[3:0],xmm[3:0],m32,xmm[3:0]'] = {
			func = function(op1, op2, op3, op4) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32", "xmm[3:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64, xmm[3:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7A", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32", "xmm[3:0]"},
			name = "vfnmaddss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3, op4) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "7A", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfnmaddss",
		},
		['xmm[3:0],xmm[3:0],m64,xmm[3:0]'] = {
			func = function(op1, op2, op3, op4) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64", "xmm[3:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64, xmm[3:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7A", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64", "xmm[3:0]"},
			name = "vfnmaddss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3, op4) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64, xmm[3:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7A", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfnmaddss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3, op4) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "7A", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfnmaddss",
		},
	},
	['fucomi'] = {
		['st(i)'] = {
			func = function(op1) return "\xDB" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "R:st(i)",
			opcode = {"DB", "E8+i"},
			metadata = "FPU              C1=0 ZF=W PF=W CF=W",
			operands = {"st(i)"},
			name = "fucomi",
		},
	},
	['pmovsxbq'] = {
		['xmm,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[1:0]/m16",
			opcode = {"66", "0F", "38", "22", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m16"},
			name = "pmovsxbq",
		},
		['xmm,xmm[1:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[1:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[1:0]/m16",
			opcode = {"66", "0F", "38", "22", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm[1:0]"},
			name = "pmovsxbq",
		},
	},
	['vfmadd213ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "A8", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmadd213ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "A8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfmadd213ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "A8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmadd213ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "A8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmadd213ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "A8", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmadd213ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "A8", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmadd213ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "A8", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfmadd213ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "A8", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmadd213ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "A8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmadd213ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "A8", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmadd213ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "A8", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmadd213ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "A8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfmadd213ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "A8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmadd213ps",
		},
	},
	['vpunpcklbw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x60"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "60", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpunpcklbw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x60"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "60", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpunpcklbw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x60"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "60", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpunpcklbw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x60"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "60", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpunpcklbw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x60"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "60", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpunpcklbw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x60"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "60", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpunpcklbw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x60"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "60", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpunpcklbw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x60"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "60", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpunpcklbw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x60"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "60", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpunpcklbw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x60"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "60", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpunpcklbw",
		},
	},
	['loopne'] = {
		['i8'] = {
			func = function(op1) return "\xE0"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "X:<rcx>, rel8",
			opcode = {"E0", "cb"},
			metadata = "X64              Control=Branch ZF=R",
			operands = {"string"},
			name = "loopne",
		},
		['string'] = {
			func = function(op1) return "\xE0"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "X:<rcx>, rel8",
			opcode = {"E0", "cb"},
			metadata = "X64              Control=Branch ZF=R",
			operands = {"string"},
			name = "loopne",
		},
	},
	['rdtsc'] = {
		[''] = {
			func = function() return "\x0F\x31" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:<edx>, W:<eax>",
			opcode = {"0F", "31"},
			metadata = "RDTSC            Volatile",
			operands = {},
			name = "rdtsc",
		},
	},
	['outsw'] = {
		['dx,ds:zsi'] = {
			func = function(op1, op2) return "\x66\x6F" end,
			real_operands = {"dx", "ds:zsi"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:dx, R:ds:zsi",
			opcode = {"66", "6F"},
			metadata = "ANY _Rep         Volatile",
			operands = {"dx", "ds:zsi"},
			name = "outsw",
		},
	},
	['vpgatherqq'] = {
		['ymm {k},m64y'] = {
			func = function(op1, op2) return "\x91" end,
			real_operands = {"ymm {k}", "m64y"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W1", "91"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "m64y"},
			name = "vpgatherqq",
		},
		['xmm,m64x,xmm'] = {
			func = function(op1, op2, op3) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64x", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64x, X:xmm",
			opcode = {"VEX.DDS.128.66.0F38.W1", "91", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m64x", "xmm"},
			name = "vpgatherqq",
		},
		['ymm,m64y,ymm'] = {
			func = function(op1, op2, op3) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64y", "ymm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:ymm, vm32/m64y, X:ymm",
			opcode = {"VEX.DDS.256.66.0F38.W1", "91", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m64y", "ymm"},
			name = "vpgatherqq",
		},
		['xmm {k},m64x'] = {
			func = function(op1, op2) return "\x91" end,
			real_operands = {"xmm {k}", "m64x"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W1", "91"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "m64x"},
			name = "vpgatherqq",
		},
		['ymm {k},vm32'] = {
			func = function(op1, op2) return "\x91" end,
			real_operands = {"ymm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W1", "91"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "vm32"},
			name = "vpgatherqq",
		},
		['zmm {k},m64z'] = {
			func = function(op1, op2) return "\x91" end,
			real_operands = {"zmm {k}", "m64z"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W1", "91"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "m64z"},
			name = "vpgatherqq",
		},
		['ymm,vm32,ymm'] = {
			func = function(op1, op2, op3) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "vm32", "ymm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:ymm, vm32/m64y, X:ymm",
			opcode = {"VEX.DDS.256.66.0F38.W1", "91", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "vm32", "ymm"},
			name = "vpgatherqq",
		},
		['zmm {k},vm32'] = {
			func = function(op1, op2) return "\x91" end,
			real_operands = {"zmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W1", "91"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "vm32"},
			name = "vpgatherqq",
		},
		['xmm {k},vm32'] = {
			func = function(op1, op2) return "\x91" end,
			real_operands = {"xmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W1", "91"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "vm32"},
			name = "vpgatherqq",
		},
		['xmm,vm32,xmm'] = {
			func = function(op1, op2, op3) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "vm32", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64x, X:xmm",
			opcode = {"VEX.DDS.128.66.0F38.W1", "91", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "vm32", "xmm"},
			name = "vpgatherqq",
		},
	},
	['vpmovusqb'] = {
		['m16 {kz},xmm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m16 {kz}", "xmm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[1:0]/m16 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "12", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m16 {kz}", "xmm"},
			name = "vpmovusqb",
		},
		['m64 {kz},zmm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "zmm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "12", "/r"},
			metadata = "AVX512_F",
			operands = {"m64 {kz}", "zmm"},
			name = "vpmovusqb",
		},
		['xmm[1:0],xmm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[1:0]", "xmm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[1:0]/m16 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "12", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[1:0]", "xmm"},
			name = "vpmovusqb",
		},
		['xmm[3:0],ymm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "ymm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "12", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[3:0]", "ymm"},
			name = "vpmovusqb",
		},
		['m32,zmm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "zmm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "12", "/r"},
			metadata = "AVX512_F",
			operands = {"m32", "zmm"},
			name = "vpmovusqb",
		},
		['m64 {kz},ymm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "ymm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "12", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "ymm"},
			name = "vpmovusqb",
		},
		['xmm[7:0],zmm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "zmm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "12", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0]", "zmm"},
			name = "vpmovusqb",
		},
		['m32,ymm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "ymm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "12", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "ymm"},
			name = "vpmovusqb",
		},
	},
	['fnclex'] = {
		[''] = {
			func = function(op1) return "\xDB\xE2" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"DB", "E2"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {""},
			name = "fnclex",
		},
	},
	['cvtpd2ps'] = {
		['xmm[7:0],xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm/m128",
			opcode = {"66", "0F", "5A", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "xmm"},
			name = "cvtpd2ps",
		},
		['xmm[7:0],m128'] = {
			func = function(op1, op2) return "\x66\x0F\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm/m128",
			opcode = {"66", "0F", "5A", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m128"},
			name = "cvtpd2ps",
		},
	},
	['bndmk'] = {
		['bnd,m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:bnd, m32/m64",
			opcode = {"F3", "0F", "1B", "/r"},
			metadata = "MPX",
			operands = {"bnd", "m64"},
			name = "bndmk",
		},
		['bnd,m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:bnd, m32/m64",
			opcode = {"F3", "0F", "1B", "/r"},
			metadata = "MPX",
			operands = {"bnd", "m32"},
			name = "bndmk",
		},
	},
	['leave'] = {
		[''] = {
			func = function(op1) return "\xC9" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"C9"},
			metadata = "ANY              Volatile",
			operands = {""},
			name = "leave",
		},
	},
	['vpcomub'] = {
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xEC"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "EC", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vpcomub",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xEC"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "EC", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vpcomub",
		},
	},
	['or'] = {
		['r64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/1", "id"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "i32"},
			name = "or",
		},
		['m64,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/1", "id"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "u32"},
			name = "or",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x09"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64,~r64",
			opcode = {"REX.W", "09", "/r"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "r64"},
			name = "or",
		},
		['m16,u16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"m16", "uw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, iw/uw",
			opcode = {"66", "81", "/1", "iw"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m16", "u16"},
			name = "or",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32,~r32/m32/m64",
			opcode = {"0B", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "m32"},
			name = "or",
		},
		['m32,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/1", "id"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "i32"},
			name = "or",
		},
		['ax,u16'] = {
			func = function(op1, op2) return "\x66\x0D"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "uw"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:ax, iw/uw",
			opcode = {"66", "0D", "iw"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"ax", "u16"},
			name = "or",
		},
		['r8,m8'] = {
			func = function(op1, op2) return "\x0A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:~r8,~r8/m8",
			opcode = {"0A", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r8", "m8"},
			name = "or",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x09"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64,~r32",
			opcode = {"09", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "r32"},
			name = "or",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x09"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r16/m16,~r16",
			opcode = {"66", "09", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m16", "r16"},
			name = "or",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x09"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64,~r64",
			opcode = {"REX.W", "09", "/r"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "r64"},
			name = "or",
		},
		['eax,u32'] = {
			func = function(op1, op2) return "\x0D"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "ud"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:eax, id/ud",
			opcode = {"0D", "id"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"eax", "u32"},
			name = "or",
		},
		['eax,i32'] = {
			func = function(op1, op2) return "\x0D"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:eax, id/ud",
			opcode = {"0D", "id"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"eax", "i32"},
			name = "or",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x09"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r16/m16,~r16",
			opcode = {"66", "09", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r16", "r16"},
			name = "or",
		},
		['r8,r8'] = {
			func = function(op1, op2) return "\x08"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r8/m8,~r8",
			opcode = {"08", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r8", "r8"},
			name = "or",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x09"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64,~r32",
			opcode = {"09", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "r32"},
			name = "or",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"80", "/1", "ib"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m8", "u8"},
			name = "or",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/1", "ib"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "i8"},
			name = "or",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32,~r32/m32/m64",
			opcode = {"0B", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "m64"},
			name = "or",
		},
		['r32,i32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/1", "id"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "i32"},
			name = "or",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\x83"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib",
			opcode = {"83", "/1", "ib"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "i8"},
			name = "or",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64,~r64/m32/m64",
			opcode = {"REX.W", "0B", "/r"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "m32"},
			name = "or",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:~r16,~r16/m16",
			opcode = {"66", "0B", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r16", "m16"},
			name = "or",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64,~r64/m32/m64",
			opcode = {"REX.W", "0B", "/r"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "m64"},
			name = "or",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x09"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64,~r32",
			opcode = {"09", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "r32"},
			name = "or",
		},
		['m16,i8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib",
			opcode = {"66", "83", "/1", "ib"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m16", "i8"},
			name = "or",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x09"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64,~r64",
			opcode = {"REX.W", "09", "/r"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "r64"},
			name = "or",
		},
		['m64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/1", "id"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "i32"},
			name = "or",
		},
		['m8,r8'] = {
			func = function(op1, op2) return "\x08"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r8/m8,~r8",
			opcode = {"08", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m8", "r8"},
			name = "or",
		},
		['al,u8'] = {
			func = function(op1, op2) return "\x0C"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:al, ib/ub",
			opcode = {"0C", "ib"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"al", "u8"},
			name = "or",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib",
			opcode = {"66", "83", "/1", "ib"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r16", "i8"},
			name = "or",
		},
		['rax,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0D"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"rax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:rax, id",
			opcode = {"REX.W", "0D", "id"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"rax", "i32"},
			name = "or",
		},
		['r16,i16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"r16", "iw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, iw/uw",
			opcode = {"66", "81", "/1", "iw"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r16", "i16"},
			name = "or",
		},
		['al,i8'] = {
			func = function(op1, op2) return "\x0C"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:al, ib/ub",
			opcode = {"0C", "ib"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"al", "i8"},
			name = "or",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"80", "/1", "ib"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r8", "i8"},
			name = "or",
		},
		['m64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/1", "ib"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "i8"},
			name = "or",
		},
		['m32,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/1", "ib"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "i8"},
			name = "or",
		},
		['m32,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/1", "id"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "u32"},
			name = "or",
		},
		['ax,i16'] = {
			func = function(op1, op2) return "\x66\x0D"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "iw"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:ax, iw/uw",
			opcode = {"66", "0D", "iw"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"ax", "i16"},
			name = "or",
		},
	},
	['fucom'] = {
		[''] = {
			func = function(op1) return "\xDD\xE1" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"DD", "E1"},
			metadata = "FPU              C0=W C1=0 C2=W C3=W",
			operands = {""},
			name = "fucom",
		},
		['st(i)'] = {
			func = function(op1) return "\xDD" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "R:st(i)",
			opcode = {"DD", "E0+i"},
			metadata = "FPU              C0=W C1=0 C2=W C3=W",
			operands = {"st(i)"},
			name = "fucom",
		},
	},
	['vpsrldq'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.WIG", "73", "/3", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm", "xmm", "i8"},
			name = "vpsrldq",
		},
		['xmm,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "73", "/3", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "u8"},
			name = "vpsrldq",
		},
		['ymm,ymm,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "73", "/3", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "u8"},
			name = "vpsrldq",
		},
		['zmm,zmm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm", "zmm", "ib"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.WIG", "73", "/3", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm", "zmm", "i8"},
			name = "vpsrldq",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.WIG", "73", "/3", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm", "ymm", "i8"},
			name = "vpsrldq",
		},
		['ymm,m256,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "m256", "ub"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.WIG", "73", "/3", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm", "m256", "u8"},
			name = "vpsrldq",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.WIG", "73", "/3", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm", "m128", "u8"},
			name = "vpsrldq",
		},
		['zmm,m512,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm", "m512", "ub"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.WIG", "73", "/3", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm", "m512", "u8"},
			name = "vpsrldq",
		},
	},
	['vpcmpud'] = {
		['k {k},ymm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "1E", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "b32", "u8"},
			name = "vpcmpud",
		},
		['k {k},xmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "1E", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "b32", "u8"},
			name = "vpcmpud",
		},
		['k {k},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "1E", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "m256", "u8"},
			name = "vpcmpud",
		},
		['k {k},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "1E", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "ymm", "i8"},
			name = "vpcmpud",
		},
		['k {k},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "1E", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "zmm", "i8"},
			name = "vpcmpud",
		},
		['k {k},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "1E", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "xmm", "i8"},
			name = "vpcmpud",
		},
		['k {k},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "1E", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "m512", "u8"},
			name = "vpcmpud",
		},
		['k {k},zmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "1E", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "b32", "u8"},
			name = "vpcmpud",
		},
		['k {k},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "1E", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "m128", "u8"},
			name = "vpcmpud",
		},
	},
	['vinsertf32x4'] = {
		['zmm {kz},zmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x18"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "xmm", "ib"},
			encoding = "RVMI-T4",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "18", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "xmm", "i8"},
			name = "vinsertf32x4",
		},
		['ymm {kz},ymm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x18"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "xmm", "ib"},
			encoding = "RVMI-T4",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "18", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "xmm", "i8"},
			name = "vinsertf32x4",
		},
		['zmm {kz},zmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x18"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m128", "ub"},
			encoding = "RVMI-T4",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "18", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m128", "u8"},
			name = "vinsertf32x4",
		},
		['ymm {kz},ymm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x18"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m128", "ub"},
			encoding = "RVMI-T4",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "18", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m128", "u8"},
			name = "vinsertf32x4",
		},
	},
	['pinsrd'] = {
		['xmm,r64[3:0],u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "r64[3:0]", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r64[3:0], ib/ub",
			opcode = {"66", "0F", "3A", "22", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"xmm", "r64[3:0]", "u8"},
			name = "pinsrd",
		},
		['xmm,r32[3:0],i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "r32[3:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r32[3:0]/m32/m64, ib/ub",
			opcode = {"66", "0F", "3A", "22", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "r32[3:0]", "i8"},
			name = "pinsrd",
		},
		['xmm,m32,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m32", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r32[3:0]/m32/m64, ib/ub",
			opcode = {"66", "0F", "3A", "22", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "m32", "u8"},
			name = "pinsrd",
		},
		['xmm,r64[3:0],i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "r64[3:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r64[3:0], ib/ub",
			opcode = {"66", "0F", "3A", "22", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"xmm", "r64[3:0]", "i8"},
			name = "pinsrd",
		},
		['xmm,m64,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m64", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r32[3:0]/m32/m64, ib/ub",
			opcode = {"66", "0F", "3A", "22", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "m64", "u8"},
			name = "pinsrd",
		},
	},
	['vaddsubpd'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xD0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D0", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vaddsubpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xD0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D0", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vaddsubpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D0", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vaddsubpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D0", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vaddsubpd",
		},
	},
	['punpcklwd'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x61"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "61", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "punpcklwd",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x61"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "61", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "punpcklwd",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x61"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "61", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "punpcklwd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x61"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "61", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "punpcklwd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x61"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "61", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "punpcklwd",
		},
	},
	['aas'] = {
		[''] = {
			func = function() return "\x3F" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "x:<ax>",
			opcode = {"3F"},
			metadata = "X86 Deprecated   OF=U SF=U ZF=U AF=W PF=U CF=W",
			operands = {},
			name = "aas",
		},
	},
	['xor'] = {
		['r64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/6", "id"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "i32"},
			name = "xor",
		},
		['m64,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/6", "id"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "u32"},
			name = "xor",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x31"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64, ~r64",
			opcode = {"REX.W", "31", "/r"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "r64"},
			name = "xor",
		},
		['m16,u16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"m16", "uw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, iw/uw",
			opcode = {"66", "81", "/6", "iw"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m16", "u16"},
			name = "xor",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32, ~r32/m32/m64",
			opcode = {"33", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "m32"},
			name = "xor",
		},
		['m32,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/6", "id"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "i32"},
			name = "xor",
		},
		['ax,u16'] = {
			func = function(op1, op2) return "\x66\x35"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "uw"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:ax, iw/uw",
			opcode = {"66", "35", "iw"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"ax", "u16"},
			name = "xor",
		},
		['r8,m8'] = {
			func = function(op1, op2) return "\x32"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:~r8, ~r8/m8",
			opcode = {"32", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r8", "m8"},
			name = "xor",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64, ~r32",
			opcode = {"31", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "r32"},
			name = "xor",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x31"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r16/m16, ~r16",
			opcode = {"66", "31", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m16", "r16"},
			name = "xor",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64, ~r64",
			opcode = {"REX.W", "31", "/r"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "r64"},
			name = "xor",
		},
		['eax,u32'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "ud"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:eax, id/ud",
			opcode = {"35", "id"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"eax", "u32"},
			name = "xor",
		},
		['eax,i32'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:eax, id/ud",
			opcode = {"35", "id"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"eax", "i32"},
			name = "xor",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r16/m16, ~r16",
			opcode = {"66", "31", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r16", "r16"},
			name = "xor",
		},
		['r8,r8'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r8/m8, ~r8",
			opcode = {"30", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r8", "r8"},
			name = "xor",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64, ~r32",
			opcode = {"31", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "r32"},
			name = "xor",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"80", "/6", "ib"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m8", "u8"},
			name = "xor",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/6", "ib"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "i8"},
			name = "xor",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32, ~r32/m32/m64",
			opcode = {"33", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "m64"},
			name = "xor",
		},
		['r32,i32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/6", "id"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "i32"},
			name = "xor",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\x83"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib",
			opcode = {"83", "/6", "ib"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "i8"},
			name = "xor",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64, ~r64/m32/m64",
			opcode = {"REX.W", "33", "/r"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "m32"},
			name = "xor",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:~r16, ~r16/m16",
			opcode = {"66", "33", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r16", "m16"},
			name = "xor",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64, ~r64/m32/m64",
			opcode = {"REX.W", "33", "/r"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "m64"},
			name = "xor",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64, ~r32",
			opcode = {"31", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "r32"},
			name = "xor",
		},
		['m16,i8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib",
			opcode = {"66", "83", "/6", "ib"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m16", "i8"},
			name = "xor",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x31"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64, ~r64",
			opcode = {"REX.W", "31", "/r"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "r64"},
			name = "xor",
		},
		['m64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/6", "id"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "i32"},
			name = "xor",
		},
		['m8,r8'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r8/m8, ~r8",
			opcode = {"30", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m8", "r8"},
			name = "xor",
		},
		['al,u8'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:al, ib/ub",
			opcode = {"34", "ib"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"al", "u8"},
			name = "xor",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib",
			opcode = {"66", "83", "/6", "ib"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r16", "i8"},
			name = "xor",
		},
		['rax,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x35"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"rax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:rax, id",
			opcode = {"REX.W", "35", "id"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"rax", "i32"},
			name = "xor",
		},
		['r16,i16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"r16", "iw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, iw/uw",
			opcode = {"66", "81", "/6", "iw"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r16", "i16"},
			name = "xor",
		},
		['al,i8'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:al, ib/ub",
			opcode = {"34", "ib"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"al", "i8"},
			name = "xor",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"80", "/6", "ib"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r8", "i8"},
			name = "xor",
		},
		['m64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/6", "ib"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "i8"},
			name = "xor",
		},
		['m32,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/6", "ib"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "i8"},
			name = "xor",
		},
		['m32,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/6", "id"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "u32"},
			name = "xor",
		},
		['ax,i16'] = {
			func = function(op1, op2) return "\x66\x35"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "iw"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:ax, iw/uw",
			opcode = {"66", "35", "iw"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"ax", "i16"},
			name = "xor",
		},
	},
	['fbstp'] = {
		['m80bcd'] = {
			func = function(op1) return "\xDF"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m80bcd"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m80bcd",
			opcode = {"DF", "/6"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {"m80bcd"},
			name = "fbstp",
		},
	},
	['vpermt2pd'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "7F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermt2pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermt2pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermt2pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpermt2pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpermt2pd",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "7F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpermt2pd",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "7F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermt2pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermt2pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermt2pd",
		},
	},
	['vcvtpd2udq'] = {
		['xmm[7:0] {kz},m128'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.0F.W1", "79", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0] {kz}", "m128"},
			name = "vcvtpd2udq",
		},
		['ymm {kz},m512'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.0F.W1", "79", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "m512"},
			name = "vcvtpd2udq",
		},
		['xmm[7:0] {kz},b64'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.0F.W1", "79", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0] {kz}", "b64"},
			name = "vcvtpd2udq",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.0F.W1", "79", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vcvtpd2udq",
		},
		['ymm {kz},zmm'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.0F.W1", "79", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "zmm"},
			name = "vcvtpd2udq",
		},
		['xmm {kz},ymm'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.0F.W1", "79", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "ymm"},
			name = "vcvtpd2udq",
		},
		['ymm {kz},b64 {er}'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64 {er}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.0F.W1", "79", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "b64 {er}"},
			name = "vcvtpd2udq",
		},
		['xmm[7:0] {kz},xmm'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.0F.W1", "79", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0] {kz}", "xmm"},
			name = "vcvtpd2udq",
		},
		['xmm {kz},m256'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.0F.W1", "79", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m256"},
			name = "vcvtpd2udq",
		},
	},
	['por'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "EB", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "por",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "EB", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "por",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "EB", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "por",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "EB", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "por",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "EB", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "por",
		},
	},
	['pslld'] = {
		['mm,u8'] = {
			func = function(op1, op2) return "\x0F\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "72", "/6", "ib"},
			metadata = "MMX",
			operands = {"mm", "u8"},
			name = "pslld",
		},
		['xmm,i8'] = {
			func = function(op1, op2) return "\x66\x0F\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "72", "/6", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "i8"},
			name = "pslld",
		},
		['mm,i8'] = {
			func = function(op1, op2) return "\x0F\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "72", "/6", "ib"},
			metadata = "MMX",
			operands = {"mm", "i8"},
			name = "pslld",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "F2", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pslld",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "F2", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "pslld",
		},
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "F2", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "pslld",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "F2", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "pslld",
		},
		['xmm,u8'] = {
			func = function(op1, op2) return "\x66\x0F\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "72", "/6", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "u8"},
			name = "pslld",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "F2", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pslld",
		},
	},
	['nop'] = {
		[''] = {
			func = function(op1) return "\x90" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"90"},
			metadata = "",
			operands = {""},
			name = "nop",
		},
		['r32'] = {
			func = function(op1) return "\x0F\x1F"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r32/m32/m64",
			opcode = {"0F", "1F", "/0"},
			metadata = "",
			operands = {"r32"},
			name = "nop",
		},
		['m32'] = {
			func = function(op1) return "\x0F\x1F"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r32/m32/m64",
			opcode = {"0F", "1F", "/0"},
			metadata = "",
			operands = {"m32"},
			name = "nop",
		},
		['r16'] = {
			func = function(op1) return "\x66\x0F\x1F"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r16/m16",
			opcode = {"66", "0F", "1F", "/0"},
			metadata = "",
			operands = {"r16"},
			name = "nop",
		},
		['m64'] = {
			func = function(op1) return "\x0F\x1F"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r32/m32/m64",
			opcode = {"0F", "1F", "/0"},
			metadata = "",
			operands = {"m64"},
			name = "nop",
		},
		['m16'] = {
			func = function(op1) return "\x66\x0F\x1F"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r16/m16",
			opcode = {"66", "0F", "1F", "/0"},
			metadata = "",
			operands = {"m16"},
			name = "nop",
		},
	},
	['finit'] = {
		[''] = {
			func = function(op1) return "\x9B\xDB\xE3" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"9B", "DB", "E3"},
			metadata = "FPU              C0=0 C1=0 C2=0 C3=0",
			operands = {""},
			name = "finit",
		},
	},
	['vfmsubpd'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "6D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vfmsubpd",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "6D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vfmsubpd",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vfmsubpd",
		},
		['ymm,ymm,ymm,m256'] = {
			func = function(op1, op2, op3, op4) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "m256"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "6D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "m256"},
			name = "vfmsubpd",
		},
		['xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "6D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "m128"},
			name = "vfmsubpd",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vfmsubpd",
		},
	},
	['vmptrst'] = {
		['m32'] = {
			func = function(op1) return "\x0F\xC7"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"0F", "C7", "/7"},
			metadata = "VMX              PRIVILEGE=L0",
			operands = {"m32"},
			name = "vmptrst",
		},
		['m64'] = {
			func = function(op1) return "\x0F\xC7"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"0F", "C7", "/7"},
			metadata = "VMX              PRIVILEGE=L0",
			operands = {"m64"},
			name = "vmptrst",
		},
	},
	['maxps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"0F", "5F", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "maxps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"0F", "5F", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "maxps",
		},
	},
	['vfnmadd213sd'] = {
		['xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3) return "\xAD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "AD", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfnmadd213sd",
		},
		['xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xAD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "AD", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfnmadd213sd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xAD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "AD", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfnmadd213sd",
		},
		['xmm[7:0] {kz},xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xAD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "AD", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			name = "vfnmadd213sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xAD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "AD", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			name = "vfnmadd213sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xAD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "AD", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			name = "vfnmadd213sd",
		},
	},
	['vfmadd231ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "B8", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmadd231ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "B8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfmadd231ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "B8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmadd231ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "B8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmadd231ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "B8", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmadd231ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "B8", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmadd231ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "B8", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfmadd231ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "B8", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmadd231ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "B8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmadd231ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "B8", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmadd231ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "B8", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmadd231ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "B8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfmadd231ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "B8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmadd231ps",
		},
	},
	['pextrq'] = {
		['m32,xmm,u8'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x66\x0F\x3A\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m32", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64/m32/m64, xmm, ib/ub",
			opcode = {"REX.W", "66", "0F", "3A", "16", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"m32", "xmm", "u8"},
			name = "pextrq",
		},
		['m64,xmm,u8'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x66\x0F\x3A\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m64", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64/m32/m64, xmm, ib/ub",
			opcode = {"REX.W", "66", "0F", "3A", "16", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"m64", "xmm", "u8"},
			name = "pextrq",
		},
		['r64,xmm,i8'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x66\x0F\x3A\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64", "xmm", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64/m32/m64, xmm, ib/ub",
			opcode = {"REX.W", "66", "0F", "3A", "16", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"r64", "xmm", "i8"},
			name = "pextrq",
		},
	},
	['pmuludq'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "F4", "/r"},
			metadata = "SSE2",
			operands = {"mm", "m32"},
			name = "pmuludq",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "F4", "/r"},
			metadata = "SSE2",
			operands = {"mm", "m64"},
			name = "pmuludq",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "F4", "/r"},
			metadata = "SSE2",
			operands = {"mm", "mm"},
			name = "pmuludq",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "F4", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pmuludq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xF4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "F4", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pmuludq",
		},
	},
	['kxnorb'] = {
		['k[0],k[0],k[0]'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[0]", "k[0]", "k[0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[0]  , k[0]  , k[0]",
			opcode = {"VEX.L1.66.0F.W0", "46", "/r"},
			metadata = "AVX512_DQ",
			operands = {"k[0]", "k[0]", "k[0]"},
			name = "kxnorb",
		},
	},
	['lar'] = {
		['r32,m16'] = {
			func = function(op1, op2) return "\x0F\x02"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, R:r32/m16",
			opcode = {"0F", "02", "/r"},
			metadata = "ANY              Volatile ZF=W",
			operands = {"r32", "m16"},
			name = "lar",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x02"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, R:r32/m16",
			opcode = {"0F", "02", "/r"},
			metadata = "ANY              Volatile ZF=W",
			operands = {"r32", "r32"},
			name = "lar",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x02"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, R:r16/m16",
			opcode = {"66", "0F", "02", "/r"},
			metadata = "ANY              Volatile ZF=W",
			operands = {"r16", "r16"},
			name = "lar",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x02"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, R:r16/m16",
			opcode = {"66", "0F", "02", "/r"},
			metadata = "ANY              Volatile ZF=W",
			operands = {"r16", "m16"},
			name = "lar",
		},
	},
	['vmovntdqa'] = {
		['zmm,m512'] = {
			func = function(op1, op2) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm, m512",
			opcode = {"EVEX.512.66.0F38.W0", "2A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm", "m512"},
			name = "vmovntdqa",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm, m128",
			opcode = {"EVEX.128.66.0F38.W0", "2A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "m128"},
			name = "vmovntdqa",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm, m256",
			opcode = {"EVEX.256.66.0F38.W0", "2A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm", "m256"},
			name = "vmovntdqa",
		},
	},
	['clflush'] = {
		['m32'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "AE", "/7"},
			metadata = "CLFLUSH          Volatile",
			operands = {"m32"},
			name = "clflush",
		},
		['m64'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "AE", "/7"},
			metadata = "CLFLUSH          Volatile",
			operands = {"m64"},
			name = "clflush",
		},
	},
	['vpsllvd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "47", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsllvd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "47", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpsllvd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "47", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsllvd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "47", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsllvd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W0", "47", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsllvd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W0", "47", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsllvd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "47", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpsllvd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "47", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsllvd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "47", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsllvd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "47", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsllvd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "47", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsllvd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "47", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpsllvd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "47", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsllvd",
		},
	},
	['movlpd'] = {
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\x66\x0F\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], m32/m64",
			opcode = {"66", "0F", "12", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m64"},
			name = "movlpd",
		},
		['m64,xmm[7:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x13"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[7:0]",
			opcode = {"66", "0F", "13", "/r"},
			metadata = "SSE2",
			operands = {"m64", "xmm[7:0]"},
			name = "movlpd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\x66\x0F\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], m32/m64",
			opcode = {"66", "0F", "12", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m32"},
			name = "movlpd",
		},
		['m32,xmm[7:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x13"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[7:0]",
			opcode = {"66", "0F", "13", "/r"},
			metadata = "SSE2",
			operands = {"m32", "xmm[7:0]"},
			name = "movlpd",
		},
	},
	['vpcmpd'] = {
		['k {k},ymm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "1F", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "b32", "u8"},
			name = "vpcmpd",
		},
		['k {k},xmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "1F", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "b32", "u8"},
			name = "vpcmpd",
		},
		['k {k},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "1F", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "m256", "u8"},
			name = "vpcmpd",
		},
		['k {k},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "1F", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "ymm", "i8"},
			name = "vpcmpd",
		},
		['k {k},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "1F", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "zmm", "i8"},
			name = "vpcmpd",
		},
		['k {k},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "1F", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "xmm", "i8"},
			name = "vpcmpd",
		},
		['k {k},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "1F", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "m512", "u8"},
			name = "vpcmpd",
		},
		['k {k},zmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "1F", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "b32", "u8"},
			name = "vpcmpd",
		},
		['k {k},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "1F", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "m128", "u8"},
			name = "vpcmpd",
		},
	},
	['sete'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x94"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "94", "/r"},
			metadata = "ANY              ZF=R",
			operands = {"m8"},
			name = "sete",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x94"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "94", "/r"},
			metadata = "ANY              ZF=R",
			operands = {"r8"},
			name = "sete",
		},
	},
	['movmskps'] = {
		['r64[0],xmm'] = {
			func = function(op1, op2) return "\x0F\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64[0], xmm",
			opcode = {"0F", "50", "/r"},
			metadata = "SSE X64",
			operands = {"r64[0]", "xmm"},
			name = "movmskps",
		},
		['r32[0],xmm'] = {
			func = function(op1, op2) return "\x0F\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32[0], xmm",
			opcode = {"0F", "50", "/r"},
			metadata = "SSE",
			operands = {"r32[0]", "xmm"},
			name = "movmskps",
		},
	},
	['vmaxpd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64 {sae}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "5F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vmaxpd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vmaxpd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vmaxpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "5F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vmaxpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "5F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vmaxpd",
		},
		['zmm {kz},zmm,b64 {sae}'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {sae}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64 {sae}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "5F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {sae}"},
			name = "vmaxpd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64 {sae}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "5F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vmaxpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "5F", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vmaxpd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vmaxpd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "5F", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vmaxpd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vmaxpd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vmaxpd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vmaxpd",
		},
	},
	['syscall'] = {
		[''] = {
			func = function(op1) return "\x0F\x05" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "05"},
			metadata = "X64              Volatile",
			operands = {""},
			name = "syscall",
		},
	},
	['stmxcsr'] = {
		['m32'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"0F", "AE", "/3"},
			metadata = "SSE",
			operands = {"m32"},
			name = "stmxcsr",
		},
		['m64'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"0F", "AE", "/3"},
			metadata = "SSE",
			operands = {"m64"},
			name = "stmxcsr",
		},
	},
	['cvtpd2pi'] = {
		['mm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, xmm/m128",
			opcode = {"66", "0F", "2D", "/r"},
			metadata = "SSE2",
			operands = {"mm", "m128"},
			name = "cvtpd2pi",
		},
		['mm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, xmm/m128",
			opcode = {"66", "0F", "2D", "/r"},
			metadata = "SSE2",
			operands = {"mm", "xmm"},
			name = "cvtpd2pi",
		},
	},
	['vinsertf32x8'] = {
		['zmm {kz},zmm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x1A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "ymm", "ib"},
			encoding = "RVMI-T8",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "1A", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "ymm", "i8"},
			name = "vinsertf32x8",
		},
		['zmm {kz},zmm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m256", "ub"},
			encoding = "RVMI-T8",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "1A", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "m256", "u8"},
			name = "vinsertf32x8",
		},
	},
	['pmaddwd'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "F5", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "pmaddwd",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "F5", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "pmaddwd",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "F5", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "pmaddwd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "F5", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pmaddwd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "F5", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pmaddwd",
		},
	},
	['vpslld'] = {
		['xmm,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "72", "/6", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "u8"},
			name = "vpslld",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W0", "72", "/6", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vpslld",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.W0", "F2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpslld",
		},
		['ymm,ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "F2", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "xmm"},
			name = "vpslld",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "F2", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpslld",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "72", "/6", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "i8"},
			name = "vpslld",
		},
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "72", "/6", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "i8"},
			name = "vpslld",
		},
		['zmm {kz},zmm,m128'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.W0", "F2", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m128"},
			name = "vpslld",
		},
		['xmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b32", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W0", "72", "/6", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32", "u8"},
			name = "vpslld",
		},
		['ymm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b32", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W0", "72", "/6", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32", "u8"},
			name = "vpslld",
		},
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W0", "72", "/6", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vpslld",
		},
		['ymm {kz},ymm,m128'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.W0", "F2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m128"},
			name = "vpslld",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W0", "72", "/6", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vpslld",
		},
		['ymm {kz},ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.W0", "F2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "xmm"},
			name = "vpslld",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W0", "72", "/6", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vpslld",
		},
		['zmm {kz},zmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.W0", "F2", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "xmm"},
			name = "vpslld",
		},
		['zmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b32", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W0", "72", "/6", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32", "u8"},
			name = "vpslld",
		},
		['ymm,ymm,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "72", "/6", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "u8"},
			name = "vpslld",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "F2", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpslld",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W0", "72", "/6", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vpslld",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W0", "72", "/6", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vpslld",
		},
		['ymm,ymm,m128'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "F2", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m128"},
			name = "vpslld",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.W0", "F2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpslld",
		},
	},
	['kaddd'] = {
		['k[3:0],k[3:0],k[3:0]'] = {
			func = function(op1, op2, op3) return "\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[3:0]", "k[3:0]", "k[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[3:0],~k[3:0],~k[3:0]",
			opcode = {"VEX.L1.66.0F.W1", "4A", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "k[3:0]", "k[3:0]"},
			name = "kaddd",
		},
	},
	['stosw'] = {
		[''] = {
			func = function() return "\x66\xAB" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<es:zdi>, R:<ax>",
			opcode = {"66", "AB"},
			metadata = "ANY _Rep         DF=R",
			operands = {},
			name = "stosw",
		},
	},
	['fsubp'] = {
		[''] = {
			func = function(op1) return "\xDE\xE9" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"DE", "E9"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fsubp",
		},
		['st(i)'] = {
			func = function(op1) return "\xDE" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"DE", "E8+i"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fsubp",
		},
	},
	['sqrtpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"66", "0F", "51", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "sqrtpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"66", "0F", "51", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "sqrtpd",
		},
	},
	['vcomiss'] = {
		['xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "R:xmm[3:0], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.0F.W0", "2F", "/r"},
			metadata = "AVX512_F OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[3:0]", "xmm[3:0]"},
			name = "vcomiss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "R:xmm[3:0], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.0F.W0", "2F", "/r"},
			metadata = "AVX512_F OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[3:0]", "m32"},
			name = "vcomiss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.LIG.0F.WIG", "2F", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[3:0]", "m64"},
			name = "vcomiss",
		},
		['xmm[3:0],m64 {sae}'] = {
			func = function(op1, op2) return "\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64 {sae}"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "R:xmm[3:0], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.0F.W0", "2F", "/r"},
			metadata = "AVX512_F OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[3:0]", "m64 {sae}"},
			name = "vcomiss",
		},
	},
	['paddb'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xFC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "FC", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "paddb",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xFC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "FC", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "paddb",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xFC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "FC", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "paddb",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xFC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "FC", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "paddb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xFC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "FC", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "paddb",
		},
	},
	['vmpsadbw'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x42"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.WIG", "42", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vmpsadbw",
		},
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x42"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.WIG", "42", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vmpsadbw",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x42"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.WIG", "42", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vmpsadbw",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x42"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.WIG", "42", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vmpsadbw",
		},
	},
	['vcvtss2si'] = {
		['r32,xmm[3:0]'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "xmm[3:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F3.0F.W0", "2D", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "xmm[3:0]"},
			name = "vcvtss2si",
		},
		['r32,m64 {er}'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64 {er}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F3.0F.W0", "2D", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m64 {er}"},
			name = "vcvtss2si",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64",
			opcode = {"VEX.LIG.F3.0F.W0", "2D", "/r"},
			metadata = "AVX",
			operands = {"r32", "m64"},
			name = "vcvtss2si",
		},
		['r64,xmm[3:0]'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "xmm[3:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F3.0F.W1", "2D", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "xmm[3:0]"},
			name = "vcvtss2si",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F3.0F.W0", "2D", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m32"},
			name = "vcvtss2si",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64",
			opcode = {"VEX.LIG.F3.0F.W1", "2D", "/r"},
			metadata = "AVX X64",
			operands = {"r64", "m64"},
			name = "vcvtss2si",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F3.0F.W1", "2D", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m32"},
			name = "vcvtss2si",
		},
		['r64,m64 {er}'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64 {er}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F3.0F.W1", "2D", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m64 {er}"},
			name = "vcvtss2si",
		},
	},
	['setnb'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "93", "/r"},
			metadata = "ANY              CF=R",
			operands = {"m8"},
			name = "setnb",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "93", "/r"},
			metadata = "ANY              CF=R",
			operands = {"r8"},
			name = "setnb",
		},
	},
	['vpsignb'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "08", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsignb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "08", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsignb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "08", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsignb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "08", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsignb",
		},
	},
	['cmovnl'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4D", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r32", "m32"},
			name = "cmovnl",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4D", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r32", "r32"},
			name = "cmovnl",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4D", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r32", "m64"},
			name = "cmovnl",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4D", "/r"},
			metadata = "CMOV X64         SF=R OF=R",
			operands = {"r64", "m64"},
			name = "cmovnl",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4D", "/r"},
			metadata = "CMOV X64         SF=R OF=R",
			operands = {"r64", "m32"},
			name = "cmovnl",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4D", "/r"},
			metadata = "CMOV X64         SF=R OF=R",
			operands = {"r64", "r64"},
			name = "cmovnl",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4D", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r16", "r16"},
			name = "cmovnl",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4D", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r16", "m16"},
			name = "cmovnl",
		},
	},
	['pmuldq'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "28", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "pmuldq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "28", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm"},
			name = "pmuldq",
		},
	},
	['vmulss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "59", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			name = "vmulss",
		},
		['xmm,xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "59", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			name = "vmulss",
		},
		['xmm {kz},xmm[15:4],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "59", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m64 {er}"},
			name = "vmulss",
		},
		['xmm,xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "59", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m32"},
			name = "vmulss",
		},
		['xmm,xmm[15:4],m64'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "59", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m64"},
			name = "vmulss",
		},
		['xmm {kz},xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "59", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			name = "vmulss",
		},
	},
	['vphsubw'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "05", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vphsubw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "05", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vphsubw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "05", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vphsubw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "05", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vphsubw",
		},
	},
	['vprord'] = {
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W0", "72", "/0", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vprord",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W0", "72", "/0", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vprord",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W0", "72", "/0", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vprord",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W0", "72", "/0", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vprord",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W0", "72", "/0", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vprord",
		},
		['zmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b32", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W0", "72", "/0", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32", "u8"},
			name = "vprord",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W0", "72", "/0", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vprord",
		},
		['xmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b32", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W0", "72", "/0", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32", "u8"},
			name = "vprord",
		},
		['ymm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b32", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W0", "72", "/0", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32", "u8"},
			name = "vprord",
		},
	},
	['vpackssdw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "6B", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpackssdw",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "6B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpackssdw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "6B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpackssdw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "6B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpackssdw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "6B", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpackssdw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "6B", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpackssdw",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "6B", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpackssdw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "6B", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpackssdw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "6B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpackssdw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "6B", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpackssdw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "6B", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpackssdw",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "6B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpackssdw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "6B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpackssdw",
		},
	},
	['pmulhw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xE5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "E5", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "pmulhw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xE5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "E5", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "pmulhw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xE5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "E5", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "pmulhw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xE5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "E5", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pmulhw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xE5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "E5", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pmulhw",
		},
	},
	['vblendpd'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x0D"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.WIG", "0D", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vblendpd",
		},
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x0D"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.WIG", "0D", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vblendpd",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x0D"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.WIG", "0D", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vblendpd",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x0D"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.WIG", "0D", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vblendpd",
		},
	},
	['vpshad'] = {
		['xmm,m128,xmm'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "9A", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128", "xmm"},
			name = "vpshad",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"XOP.NDS.L0.P0.M09.W1", "9A", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128"},
			name = "vpshad",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "9A", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpshad",
		},
	},
	['vpminub'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xDA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F", "DA", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpminub",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F", "DA", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpminub",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F", "DA", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpminub",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "DA", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpminub",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "DA", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpminub",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "DA", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpminub",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F", "DA", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpminub",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "DA", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpminub",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xDA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F", "DA", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpminub",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F", "DA", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpminub",
		},
	},
	['frndint'] = {
		[''] = {
			func = function(op1) return "\xD9\xFC" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "FC"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "frndint",
		},
	},
	['vpsignw'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "09", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsignw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "09", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsignw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "09", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsignw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "09", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsignw",
		},
	},
	['vpsubusw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xD9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "D9", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsubusw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "D9", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsubusw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xD9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "D9", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsubusw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D9", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsubusw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D9", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsubusw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xD9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D9", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsubusw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xD9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "D9", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsubusw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xD9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D9", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsubusw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xD9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "D9", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsubusw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "D9", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsubusw",
		},
	},
	['pmaxsd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "3D", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "pmaxsd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "3D", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm"},
			name = "pmaxsd",
		},
	},
	['ucomisd'] = {
		['xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "2E", "/r"},
			metadata = "SSE2 OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[7:0]", "xmm[7:0]"},
			name = "ucomisd",
		},
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\x66\x0F\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "2E", "/r"},
			metadata = "SSE2 OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[7:0]", "m64"},
			name = "ucomisd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\x66\x0F\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "2E", "/r"},
			metadata = "SSE2 OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[7:0]", "m32"},
			name = "ucomisd",
		},
	},
	['vpsravd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "46", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsravd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "46", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpsravd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "46", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsravd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "46", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsravd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W0", "46", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsravd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W0", "46", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsravd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "46", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpsravd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "46", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsravd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "46", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsravd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "46", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsravd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "46", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsravd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "46", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpsravd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "46", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsravd",
		},
	},
	['vcvtph2ps'] = {
		['zmm {kz},ymm'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "ymm"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256 {sae}",
			opcode = {"EVEX.512.66.0F38.W0", "13", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "ymm"},
			name = "vcvtph2ps",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.W0", "13", "/r"},
			metadata = "F16C",
			operands = {"xmm", "xmm[7:0]"},
			name = "vcvtph2ps",
		},
		['zmm {kz},m256 {sae}'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256 {sae}"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256 {sae}",
			opcode = {"EVEX.512.66.0F38.W0", "13", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m256 {sae}"},
			name = "vcvtph2ps",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.W0", "13", "/r"},
			metadata = "F16C",
			operands = {"xmm", "m64"},
			name = "vcvtph2ps",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.W0", "13", "/r"},
			metadata = "F16C",
			operands = {"xmm", "m32"},
			name = "vcvtph2ps",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128",
			opcode = {"EVEX.256.66.0F38.W0", "13", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vcvtph2ps",
		},
		['ymm {kz},xmm'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128",
			opcode = {"EVEX.256.66.0F38.W0", "13", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm"},
			name = "vcvtph2ps",
		},
		['ymm,m128'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.66.0F38.W0", "13", "/r"},
			metadata = "F16C",
			operands = {"ymm", "m128"},
			name = "vcvtph2ps",
		},
		['ymm,xmm'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.66.0F38.W0", "13", "/r"},
			metadata = "F16C",
			operands = {"ymm", "xmm"},
			name = "vcvtph2ps",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "13", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vcvtph2ps",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "13", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vcvtph2ps",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "13", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vcvtph2ps",
		},
	},
	['vpinsrw'] = {
		['xmm,xmm,r64[1:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "r64[1:0]", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r64[1:0], ib/ub",
			opcode = {"VEX.NDS.128.66.0F.W0", "C4", "/r", "ib"},
			metadata = "AVX X64",
			operands = {"xmm", "xmm", "r64[1:0]", "i8"},
			name = "vpinsrw",
		},
		['xmm {kz},xmm,r64[1:0],u8'] = {
			func = function(op1, op2, op3, op4) return "\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "r64[1:0]", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r64[1:0], ib/ub",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "C4", "/r", "ib"},
			metadata = "AVX512_BW X64",
			operands = {"xmm {kz}", "xmm", "r64[1:0]", "u8"},
			name = "vpinsrw",
		},
		['xmm {kz},xmm,r64[1:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "r64[1:0]", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r64[1:0], ib/ub",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "C4", "/r", "ib"},
			metadata = "AVX512_BW X64",
			operands = {"xmm {kz}", "xmm", "r64[1:0]", "i8"},
			name = "vpinsrw",
		},
		['xmm {kz},xmm,m16,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m16", "ub"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r32[1:0]/m16, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "C4", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"xmm {kz}", "xmm", "m16", "u8"},
			name = "vpinsrw",
		},
		['xmm,xmm,r64[1:0],u8'] = {
			func = function(op1, op2, op3, op4) return "\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "r64[1:0]", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r64[1:0], ib/ub",
			opcode = {"VEX.NDS.128.66.0F.W0", "C4", "/r", "ib"},
			metadata = "AVX X64",
			operands = {"xmm", "xmm", "r64[1:0]", "u8"},
			name = "vpinsrw",
		},
		['xmm,xmm,m16,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m16", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r32[1:0]/m16, ib/ub",
			opcode = {"VEX.NDS.128.66.0F.W0", "C4", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m16", "u8"},
			name = "vpinsrw",
		},
		['xmm {kz},xmm,r32[1:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "r32[1:0]", "ib"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r32[1:0]/m16, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "C4", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"xmm {kz}", "xmm", "r32[1:0]", "i8"},
			name = "vpinsrw",
		},
		['xmm,xmm,r32[1:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "r32[1:0]", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r32[1:0]/m16, ib/ub",
			opcode = {"VEX.NDS.128.66.0F.W0", "C4", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "r32[1:0]", "i8"},
			name = "vpinsrw",
		},
	},
	['vfnmsub132ss'] = {
		['xmm[3:0] {kz},xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "9F", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			name = "vfnmsub132ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "9F", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			name = "vfnmsub132ss",
		},
		['xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3) return "\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "9F", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfnmsub132ss",
		},
		['xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "9F", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfnmsub132ss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "9F", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfnmsub132ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "9F", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			name = "vfnmsub132ss",
		},
	},
	['vpexpandd'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x89"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W0", "89", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vpexpandd",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x89"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W0", "89", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vpexpandd",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x89"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W0", "89", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vpexpandd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x89"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W0", "89", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vpexpandd",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x89"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W0", "89", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vpexpandd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x89"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W0", "89", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vpexpandd",
		},
	},
	['vpandn'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "DF", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpandn",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "DF", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpandn",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "DF", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpandn",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "DF", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpandn",
		},
	},
	['pblendw'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x0E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "0E", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm", "i8"},
			name = "pblendw",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x0E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "0E", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128", "u8"},
			name = "pblendw",
		},
	},
	['movlps'] = {
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\x0F\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], m32/m64",
			opcode = {"0F", "12", "/r"},
			metadata = "SSE",
			operands = {"xmm[7:0]", "m64"},
			name = "movlps",
		},
		['m64,xmm[7:0]'] = {
			func = function(op1, op2) return "\x0F\x13"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[7:0]",
			opcode = {"0F", "13", "/r"},
			metadata = "SSE",
			operands = {"m64", "xmm[7:0]"},
			name = "movlps",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\x0F\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], m32/m64",
			opcode = {"0F", "12", "/r"},
			metadata = "SSE",
			operands = {"xmm[7:0]", "m32"},
			name = "movlps",
		},
		['m32,xmm[7:0]'] = {
			func = function(op1, op2) return "\x0F\x13"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[7:0]",
			opcode = {"0F", "13", "/r"},
			metadata = "SSE",
			operands = {"m32", "xmm[7:0]"},
			name = "movlps",
		},
	},
	['vfmsub231ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "BA", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmsub231ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "BA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfmsub231ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "BA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmsub231ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "BA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmsub231ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "BA", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmsub231ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "BA", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmsub231ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "BA", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfmsub231ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "BA", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmsub231ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "BA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmsub231ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "BA", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmsub231ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "BA", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmsub231ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "BA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfmsub231ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "BA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmsub231ps",
		},
	},
	['movbe'] = {
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x38\xF0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, m32/m64",
			opcode = {"REX.W", "0F", "38", "F0", "/r"},
			metadata = "MOVBE X64",
			operands = {"r64", "m64"},
			name = "movbe",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x38\xF1"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, r64",
			opcode = {"REX.W", "0F", "38", "F1", "/r"},
			metadata = "MOVBE X64",
			operands = {"m32", "r64"},
			name = "movbe",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x0F\x38\xF1"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, r32",
			opcode = {"0F", "38", "F1", "/r"},
			metadata = "MOVBE",
			operands = {"m64", "r32"},
			name = "movbe",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x0F\x38\xF1"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, r32",
			opcode = {"0F", "38", "F1", "/r"},
			metadata = "MOVBE",
			operands = {"m32", "r32"},
			name = "movbe",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x38\xF0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, m32/m64",
			opcode = {"0F", "38", "F0", "/r"},
			metadata = "MOVBE",
			operands = {"r32", "m32"},
			name = "movbe",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x38\xF0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, m32/m64",
			opcode = {"0F", "38", "F0", "/r"},
			metadata = "MOVBE",
			operands = {"r32", "m64"},
			name = "movbe",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x38\xF1"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, r64",
			opcode = {"REX.W", "0F", "38", "F1", "/r"},
			metadata = "MOVBE X64",
			operands = {"m64", "r64"},
			name = "movbe",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xF1"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m16, r16",
			opcode = {"66", "0F", "38", "F1", "/r"},
			metadata = "MOVBE",
			operands = {"m16", "r16"},
			name = "movbe",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x38\xF0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, m32/m64",
			opcode = {"REX.W", "0F", "38", "F0", "/r"},
			metadata = "MOVBE X64",
			operands = {"r64", "m32"},
			name = "movbe",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xF0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, m16",
			opcode = {"66", "0F", "38", "F0", "/r"},
			metadata = "MOVBE",
			operands = {"r16", "m16"},
			name = "movbe",
		},
	},
	['vfmadd132sd'] = {
		['xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "99", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfmadd132sd",
		},
		['xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "99", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfmadd132sd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "99", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfmadd132sd",
		},
		['xmm[7:0] {kz},xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz},xmm[7:0],xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "99", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			name = "vfmadd132sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz},xmm[7:0],xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "99", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			name = "vfmadd132sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz},xmm[7:0],xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "99", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			name = "vfmadd132sd",
		},
	},
	['vrcp14pd'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F38.W1", "4C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vrcp14pd",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F38.W1", "4C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vrcp14pd",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F38.W1", "4C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vrcp14pd",
		},
		['zmm {kz},b64'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64",
			opcode = {"EVEX.512.66.0F38.W1", "4C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b64"},
			name = "vrcp14pd",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F38.W1", "4C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vrcp14pd",
		},
		['ymm {kz},b64'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F38.W1", "4C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b64"},
			name = "vrcp14pd",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F38.W1", "4C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vrcp14pd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64",
			opcode = {"EVEX.512.66.0F38.W1", "4C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vrcp14pd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64",
			opcode = {"EVEX.512.66.0F38.W1", "4C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vrcp14pd",
		},
	},
	['psrldq'] = {
		['xmm,i8'] = {
			func = function(op1, op2) return "\x66\x0F\x73"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "73", "/3", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "i8"},
			name = "psrldq",
		},
		['xmm,u8'] = {
			func = function(op1, op2) return "\x66\x0F\x73"..x86_64.encode_modrm_sib(op1, 3)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "73", "/3", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "u8"},
			name = "psrldq",
		},
	},
	['fisttp'] = {
		['m64int'] = {
			func = function(op1) return "\xDD"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64int"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64int",
			opcode = {"DD", "/1"},
			metadata = "FPU_POP SSE3     C0=U C1=0 C2=U C3=U",
			operands = {"m64int"},
			name = "fisttp",
		},
		['m16int'] = {
			func = function(op1) return "\xDF"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m16int"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m16int",
			opcode = {"DF", "/1"},
			metadata = "FPU_POP SSE3     C0=U C1=0 C2=U C3=U",
			operands = {"m16int"},
			name = "fisttp",
		},
		['m32'] = {
			func = function(op1) return "\xDD"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64int",
			opcode = {"DD", "/1"},
			metadata = "FPU_POP SSE3     C0=U C1=0 C2=U C3=U",
			operands = {"m32"},
			name = "fisttp",
		},
	},
	['psubd'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "FA", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "psubd",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "FA", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "psubd",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "FA", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "psubd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "FA", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psubd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xFA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "FA", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psubd",
		},
	},
	['vpcmpeqb'] = {
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x74"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "74", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vpcmpeqb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x74"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "74", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpcmpeqb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x74"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "74", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpcmpeqb",
		},
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x74"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "74", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vpcmpeqb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x74"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "74", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpcmpeqb",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x74"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "74", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "m512"},
			name = "vpcmpeqb",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x74"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "74", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpcmpeqb",
		},
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x74"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "74", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vpcmpeqb",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x74"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "74", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vpcmpeqb",
		},
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x74"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "74", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vpcmpeqb",
		},
	},
	['vpsraw'] = {
		['xmm,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "71", "/4", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "u8"},
			name = "vpsraw",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.WIG", "71", "/4", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vpsraw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "E1", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsraw",
		},
		['ymm,ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E1", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "xmm"},
			name = "vpsraw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E1", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsraw",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "71", "/4", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "i8"},
			name = "vpsraw",
		},
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "71", "/4", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "i8"},
			name = "vpsraw",
		},
		['zmm {kz},zmm,m128'] = {
			func = function(op1, op2, op3) return "\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "E1", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m128"},
			name = "vpsraw",
		},
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.WIG", "71", "/4", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vpsraw",
		},
		['ymm {kz},ymm,m128'] = {
			func = function(op1, op2, op3) return "\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "E1", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m128"},
			name = "vpsraw",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.WIG", "71", "/4", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vpsraw",
		},
		['ymm {kz},ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "E1", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "xmm"},
			name = "vpsraw",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.WIG", "71", "/4", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vpsraw",
		},
		['zmm {kz},zmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "E1", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "xmm"},
			name = "vpsraw",
		},
		['ymm,ymm,u8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "71", "/4", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "u8"},
			name = "vpsraw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E1", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsraw",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.WIG", "71", "/4", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vpsraw",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.WIG", "71", "/4", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vpsraw",
		},
		['ymm,ymm,m128'] = {
			func = function(op1, op2, op3) return "\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E1", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m128"},
			name = "vpsraw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "E1", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsraw",
		},
	},
	['vpmullw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xD5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "D5", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmullw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "D5", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmullw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xD5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "D5", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmullw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D5", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmullw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D5", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpmullw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xD5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D5", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmullw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xD5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "D5", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmullw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xD5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D5", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpmullw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xD5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "D5", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmullw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "D5", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmullw",
		},
	},
	['vfixupimmsd'] = {
		['xmm {kz},xmm[15:8],m32,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x55"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W1", "55", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m32", "ub {sae}"},
			name = "vfixupimmsd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x55"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]", "ib"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W1", "55", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]", "i8"},
			name = "vfixupimmsd",
		},
		['xmm {kz},xmm[15:8],m64,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x55"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W1", "55", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m64", "ub {sae}"},
			name = "vfixupimmsd",
		},
	},
	['fst'] = {
		['st(i)'] = {
			func = function(op1) return "\xDD" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "W:st(i)",
			opcode = {"DD", "D0+i"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fst",
		},
		['m32'] = {
			func = function(op1) return "\xDD"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64fp",
			opcode = {"DD", "/2"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fst",
		},
		['m64fp'] = {
			func = function(op1) return "\xDD"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64fp"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64fp",
			opcode = {"DD", "/2"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m64fp"},
			name = "fst",
		},
	},
	['gf2p8mulb'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xCF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "CF", "/r"},
			metadata = "GFNI",
			operands = {"xmm", "m128"},
			name = "gf2p8mulb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xCF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "CF", "/r"},
			metadata = "GFNI",
			operands = {"xmm", "xmm"},
			name = "gf2p8mulb",
		},
	},
	['fist'] = {
		['m64int'] = {
			func = function(op1) return "\xDB"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64int"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64int",
			opcode = {"DB", "/2"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m64int"},
			name = "fist",
		},
		['m16int'] = {
			func = function(op1) return "\xDF"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m16int"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m16int",
			opcode = {"DF", "/2"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m16int"},
			name = "fist",
		},
		['m32'] = {
			func = function(op1) return "\xDB"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64int",
			opcode = {"DB", "/2"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fist",
		},
	},
	['vminps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32 {sae}",
			opcode = {"EVEX.NDS.512.0F.W0", "5D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vminps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vminps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vminps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vminps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "5D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vminps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "5D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vminps",
		},
		['zmm {kz},zmm,b32 {sae}'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {sae}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32 {sae}",
			opcode = {"EVEX.NDS.512.0F.W0", "5D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {sae}"},
			name = "vminps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "5D", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vminps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vminps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "5D", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vminps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32 {sae}",
			opcode = {"EVEX.NDS.512.0F.W0", "5D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vminps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vminps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vminps",
		},
	},
	['vcvtsi2sd'] = {
		['xmm,xmm[15:8],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], r64/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "2A", "/r"},
			metadata = "AVX512_F X64",
			operands = {"xmm", "xmm[15:8]", "m64 {er}"},
			name = "vcvtsi2sd",
		},
		['xmm,xmm[15:8],m64'] = {
			func = function(op1, op2, op3) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], r64/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.W1", "2A", "/r"},
			metadata = "AVX X64",
			operands = {"xmm", "xmm[15:8]", "m64"},
			name = "vcvtsi2sd",
		},
		['xmm,xmm[15:8],r64'] = {
			func = function(op1, op2, op3) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "r64"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], r64/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "2A", "/r"},
			metadata = "AVX512_F X64",
			operands = {"xmm", "xmm[15:8]", "r64"},
			name = "vcvtsi2sd",
		},
		['xmm,xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], r64/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "2A", "/r"},
			metadata = "AVX512_F X64",
			operands = {"xmm", "xmm[15:8]", "m32"},
			name = "vcvtsi2sd",
		},
		['xmm,xmm[15:8],r32'] = {
			func = function(op1, op2, op3) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "r32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], r32/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W0", "2A", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm[15:8]", "r32"},
			name = "vcvtsi2sd",
		},
	},
	['pminsb'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "38", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "pminsb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "38", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm"},
			name = "pminsb",
		},
	},
	['vpshufhw'] = {
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "RMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128, ib/ub",
			opcode = {"EVEX.128.F3.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vpshufhw",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "RMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256, ib/ub",
			opcode = {"EVEX.256.F3.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vpshufhw",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "RMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512, ib/ub",
			opcode = {"EVEX.512.F3.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vpshufhw",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "RMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128, ib/ub",
			opcode = {"EVEX.128.F3.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vpshufhw",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "RMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256, ib/ub",
			opcode = {"EVEX.256.F3.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vpshufhw",
		},
		['ymm,m256,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "m256", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.F3.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "m256", "u8"},
			name = "vpshufhw",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.F3.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "m128", "u8"},
			name = "vpshufhw",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.F3.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "i8"},
			name = "vpshufhw",
		},
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.F3.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "i8"},
			name = "vpshufhw",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "RMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512, ib/ub",
			opcode = {"EVEX.512.F3.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vpshufhw",
		},
	},
	['fninit'] = {
		[''] = {
			func = function(op1) return "\xDB\xE3" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"DB", "E3"},
			metadata = "FPU              C0=0 C1=0 C2=0 C3=0",
			operands = {""},
			name = "fninit",
		},
	},
	['vphaddbq'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xC3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "C3", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vphaddbq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xC3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "C3", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vphaddbq",
		},
	},
	['kxnorq'] = {
		['k[7:0],k[7:0],k[7:0]'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[7:0]", "k[7:0]", "k[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[7:0], k[7:0], k[7:0]",
			opcode = {"VEX.L1.0F.W1", "46", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[7:0]", "k[7:0]", "k[7:0]"},
			name = "kxnorq",
		},
	},
	['pmovsxwq'] = {
		['xmm,m64'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"66", "0F", "38", "24", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m64"},
			name = "pmovsxwq",
		},
		['xmm,xmm[3:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"66", "0F", "38", "24", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm[3:0]"},
			name = "pmovsxwq",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"66", "0F", "38", "24", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m32"},
			name = "pmovsxwq",
		},
	},
	['vpsrlq'] = {
		['xmm,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "73", "/2", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "u8"},
			name = "vpsrlq",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W1", "73", "/2", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vpsrlq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.W1", "D3", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsrlq",
		},
		['ymm,ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D3", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "xmm"},
			name = "vpsrlq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D3", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsrlq",
		},
		['zmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b64", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W1", "73", "/2", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b64", "u8"},
			name = "vpsrlq",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "73", "/2", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "i8"},
			name = "vpsrlq",
		},
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "73", "/2", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "i8"},
			name = "vpsrlq",
		},
		['zmm {kz},zmm,m128'] = {
			func = function(op1, op2, op3) return "\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.W1", "D3", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m128"},
			name = "vpsrlq",
		},
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W1", "73", "/2", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vpsrlq",
		},
		['ymm {kz},ymm,m128'] = {
			func = function(op1, op2, op3) return "\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.W1", "D3", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m128"},
			name = "vpsrlq",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W1", "73", "/2", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vpsrlq",
		},
		['ymm {kz},ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.W1", "D3", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "xmm"},
			name = "vpsrlq",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W1", "73", "/2", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vpsrlq",
		},
		['zmm {kz},zmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.W1", "D3", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "xmm"},
			name = "vpsrlq",
		},
		['xmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b64", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W1", "73", "/2", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64", "u8"},
			name = "vpsrlq",
		},
		['ymm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b64", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W1", "73", "/2", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b64", "u8"},
			name = "vpsrlq",
		},
		['ymm,ymm,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "73", "/2", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "u8"},
			name = "vpsrlq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D3", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsrlq",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W1", "73", "/2", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vpsrlq",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W1", "73", "/2", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vpsrlq",
		},
		['ymm,ymm,m128'] = {
			func = function(op1, op2, op3) return "\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D3", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m128"},
			name = "vpsrlq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.W1", "D3", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsrlq",
		},
	},
	['vmovaps'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.0F.W0", "28", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vmovaps",
		},
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.0F.W0", "29", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vmovaps",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.0F.W0", "29", "/r"},
			metadata = "AVX512_F",
			operands = {"m512 {kz}", "zmm"},
			name = "vmovaps",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.0F.W0", "28", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vmovaps",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:ymm/m256, ymm",
			opcode = {"VEX.256.0F.WIG", "29", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vmovaps",
		},
		['m128,xmm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"VEX.128.0F.WIG", "29", "/r"},
			metadata = "AVX",
			operands = {"m128", "xmm"},
			name = "vmovaps",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.0F.WIG", "28", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vmovaps",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.0F.W0", "28", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vmovaps",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.0F.W0", "28", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vmovaps",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.0F.W0", "28", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vmovaps",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.0F.W0", "29", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm", "zmm"},
			name = "vmovaps",
		},
		['m256,ymm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256", "ymm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:ymm/m256, ymm",
			opcode = {"VEX.256.0F.WIG", "29", "/r"},
			metadata = "AVX",
			operands = {"m256", "ymm"},
			name = "vmovaps",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.0F.W0", "28", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vmovaps",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.0F.W0", "29", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vmovaps",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.0F.WIG", "28", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vmovaps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"VEX.128.0F.WIG", "29", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vmovaps",
		},
	},
	['vpexpandw'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W1", "62", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vpexpandw",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W1", "62", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vpexpandw",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W1", "62", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vpexpandw",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W1", "62", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "m512"},
			name = "vpexpandw",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W1", "62", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vpexpandw",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W1", "62", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm"},
			name = "vpexpandw",
		},
	},
	['sub'] = {
		['r64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/5", "id"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "i32"},
			name = "sub",
		},
		['m64,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/5", "id"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "u32"},
			name = "sub",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x29"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64",
			opcode = {"REX.W", "29", "/r"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "r64"},
			name = "sub",
		},
		['m16,u16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"m16", "uw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, iw/uw",
			opcode = {"66", "81", "/5", "iw"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "u16"},
			name = "sub",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"2B", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "m32"},
			name = "sub",
		},
		['m32,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/5", "id"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "i32"},
			name = "sub",
		},
		['ax,u16'] = {
			func = function(op1, op2) return "\x66\x2D"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "uw"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:ax, iw/uw",
			opcode = {"66", "2D", "iw"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"ax", "u16"},
			name = "sub",
		},
		['r8,m8'] = {
			func = function(op1, op2) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r8, r8/m8",
			opcode = {"2A", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "m8"},
			name = "sub",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32",
			opcode = {"29", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "r32"},
			name = "sub",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x29"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16",
			opcode = {"66", "29", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "r16"},
			name = "sub",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64",
			opcode = {"REX.W", "29", "/r"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "r64"},
			name = "sub",
		},
		['eax,u32'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "ud"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:eax, id/ud",
			opcode = {"2D", "id"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"eax", "u32"},
			name = "sub",
		},
		['eax,i32'] = {
			func = function(op1, op2) return "\x2D"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:eax, id/ud",
			opcode = {"2D", "id"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"eax", "i32"},
			name = "sub",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16",
			opcode = {"66", "29", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "r16"},
			name = "sub",
		},
		['r8,r8'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r8/m8, r8",
			opcode = {"28", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "r8"},
			name = "sub",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32",
			opcode = {"29", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "r32"},
			name = "sub",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"80", "/5", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "u8"},
			name = "sub",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/5", "ib"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "i8"},
			name = "sub",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"2B", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "m64"},
			name = "sub",
		},
		['r32,i32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/5", "id"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "i32"},
			name = "sub",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\x83"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib",
			opcode = {"83", "/5", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "i8"},
			name = "sub",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "2B", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "m32"},
			name = "sub",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "2B", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "m16"},
			name = "sub",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "2B", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "m64"},
			name = "sub",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32",
			opcode = {"29", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "r32"},
			name = "sub",
		},
		['m16,i8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib",
			opcode = {"66", "83", "/5", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "i8"},
			name = "sub",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x29"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64",
			opcode = {"REX.W", "29", "/r"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "r64"},
			name = "sub",
		},
		['m64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/5", "id"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "i32"},
			name = "sub",
		},
		['m8,r8'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r8/m8, r8",
			opcode = {"28", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "r8"},
			name = "sub",
		},
		['al,u8'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:al, ib/ub",
			opcode = {"2C", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"al", "u8"},
			name = "sub",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib",
			opcode = {"66", "83", "/5", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "i8"},
			name = "sub",
		},
		['rax,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x2D"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"rax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:rax, id",
			opcode = {"REX.W", "2D", "id"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"rax", "i32"},
			name = "sub",
		},
		['r16,i16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"r16", "iw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, iw/uw",
			opcode = {"66", "81", "/5", "iw"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "i16"},
			name = "sub",
		},
		['al,i8'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:al, ib/ub",
			opcode = {"2C", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"al", "i8"},
			name = "sub",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"80", "/5", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "i8"},
			name = "sub",
		},
		['m64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/5", "ib"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "i8"},
			name = "sub",
		},
		['m32,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/5", "ib"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "i8"},
			name = "sub",
		},
		['m32,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/5", "id"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "u32"},
			name = "sub",
		},
		['ax,i16'] = {
			func = function(op1, op2) return "\x66\x2D"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "iw"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:ax, iw/uw",
			opcode = {"66", "2D", "iw"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"ax", "i16"},
			name = "sub",
		},
	},
	['vpmovzxwq'] = {
		['zmm {kz},m128'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m128"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm/m128",
			opcode = {"EVEX.512.66.0F38.WIG", "34", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m128"},
			name = "vpmovzxwq",
		},
		['xmm,xmm[3:0]'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "34", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[3:0]"},
			name = "vpmovzxwq",
		},
		['zmm {kz},xmm'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "xmm"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm/m128",
			opcode = {"EVEX.512.66.0F38.WIG", "34", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "xmm"},
			name = "vpmovzxwq",
		},
		['ymm,m32'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[7:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "34", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m32"},
			name = "vpmovzxwq",
		},
		['ymm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[7:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "34", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm[7:0]"},
			name = "vpmovzxwq",
		},
		['xmm {kz},xmm[3:0]'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[3:0]"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "34", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[3:0]"},
			name = "vpmovzxwq",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "34", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m64"},
			name = "vpmovzxwq",
		},
		['ymm,m64'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[7:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "34", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m64"},
			name = "vpmovzxwq",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "34", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vpmovzxwq",
		},
		['ymm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm[7:0]"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "34", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm[7:0]"},
			name = "vpmovzxwq",
		},
		['ymm {kz},m64'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m64"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "34", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m64"},
			name = "vpmovzxwq",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "34", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vpmovzxwq",
		},
		['ymm {kz},m32'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m32"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "34", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m32"},
			name = "vpmovzxwq",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "34", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m32"},
			name = "vpmovzxwq",
		},
	},
	['invd'] = {
		[''] = {
			func = function(op1) return "\x0F\x08" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "08"},
			metadata = "I486             Volatile PRIVILEGE=L0",
			operands = {""},
			name = "invd",
		},
	},
	['vfmaddsd'] = {
		['xmm[7:0],xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3, op4) return "\x6b"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "6b", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfmaddsd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3, op4) return "\x6b"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "6b", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfmaddsd",
		},
		['xmm[7:0],xmm[7:0],m32,xmm[7:0]'] = {
			func = function(op1, op2, op3, op4) return "\x6b"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32", "xmm[7:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64, xmm[7:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6b", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32", "xmm[7:0]"},
			name = "vfmaddsd",
		},
		['xmm[7:0],xmm[7:0],m64,xmm[7:0]'] = {
			func = function(op1, op2, op3, op4) return "\x6b"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64", "xmm[7:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64, xmm[7:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6b", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64", "xmm[7:0]"},
			name = "vfmaddsd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3, op4) return "\x6b"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64, xmm[7:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6b", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfmaddsd",
		},
	},
	['enter'] = {
		['i16,i8'] = {
			func = function(op1, op2) return "\xC8"..x86_64.encode_int("int16_t", op2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"iw", "ib"},
			encoding = "II",
			has_relative = false,
			operands2 = "iw/uw, ib/ub",
			opcode = {"C8", "iw", "ib"},
			metadata = "ANY              Volatile",
			operands = {"i16", "i8"},
			name = "enter",
		},
		['u16,u8'] = {
			func = function(op1, op2) return "\xC8"..x86_64.encode_int("int16_t", op2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"uw", "ub"},
			encoding = "II",
			has_relative = false,
			operands2 = "iw/uw, ib/ub",
			opcode = {"C8", "iw", "ib"},
			metadata = "ANY              Volatile",
			operands = {"u16", "u8"},
			name = "enter",
		},
	},
	['vpmulhuw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xE4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "E4", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmulhuw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "E4", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmulhuw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xE4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "E4", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmulhuw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E4", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmulhuw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E4", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpmulhuw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xE4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E4", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmulhuw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xE4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "E4", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmulhuw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xE4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E4", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpmulhuw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xE4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "E4", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmulhuw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "E4", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmulhuw",
		},
	},
	['vpmovsqb'] = {
		['m16 {kz},xmm'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m16 {kz}", "xmm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[1:0]/m16 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "22", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m16 {kz}", "xmm"},
			name = "vpmovsqb",
		},
		['m64 {kz},zmm'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "zmm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "22", "/r"},
			metadata = "AVX512_F",
			operands = {"m64 {kz}", "zmm"},
			name = "vpmovsqb",
		},
		['xmm[1:0],xmm'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[1:0]", "xmm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[1:0]/m16 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "22", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[1:0]", "xmm"},
			name = "vpmovsqb",
		},
		['xmm[3:0],ymm'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "ymm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "22", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[3:0]", "ymm"},
			name = "vpmovsqb",
		},
		['m32,zmm'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "zmm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "22", "/r"},
			metadata = "AVX512_F",
			operands = {"m32", "zmm"},
			name = "vpmovsqb",
		},
		['m64 {kz},ymm'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "ymm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "22", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "ymm"},
			name = "vpmovsqb",
		},
		['xmm[7:0],zmm'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "zmm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "22", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0]", "zmm"},
			name = "vpmovsqb",
		},
		['m32,ymm'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "ymm"},
			encoding = "MR-OVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "22", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "ymm"},
			name = "vpmovsqb",
		},
	},
	['kxord'] = {
		['k[3:0],k[3:0],k[3:0]'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[3:0]", "k[3:0]", "k[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[3:0],~k[3:0],~k[3:0]",
			opcode = {"VEX.L1.66.0F.W1", "47", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "k[3:0]", "k[3:0]"},
			name = "kxord",
		},
	},
	['vpmovsdw'] = {
		['xmm,ymm'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "23", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "ymm"},
			name = "vpmovsdw",
		},
		['xmm[7:0],xmm'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "23", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0]", "xmm"},
			name = "vpmovsdw",
		},
		['m256 {kz},zmm'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "23", "/r"},
			metadata = "AVX512_F",
			operands = {"m256 {kz}", "zmm"},
			name = "vpmovsdw",
		},
		['ymm,zmm'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "23", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm", "zmm"},
			name = "vpmovsdw",
		},
		['m128 {kz},ymm'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "23", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "ymm"},
			name = "vpmovsdw",
		},
		['m64 {kz},xmm'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "23", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "xmm"},
			name = "vpmovsdw",
		},
		['m32,xmm'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "23", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "xmm"},
			name = "vpmovsdw",
		},
	},
	['cmovns'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x49"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "49", "/r"},
			metadata = "CMOV             SF=R",
			operands = {"r32", "m32"},
			name = "cmovns",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x49"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "49", "/r"},
			metadata = "CMOV             SF=R",
			operands = {"r32", "r32"},
			name = "cmovns",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x49"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "49", "/r"},
			metadata = "CMOV             SF=R",
			operands = {"r32", "m64"},
			name = "cmovns",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x49"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "49", "/r"},
			metadata = "CMOV X64         SF=R",
			operands = {"r64", "m64"},
			name = "cmovns",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x49"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "49", "/r"},
			metadata = "CMOV X64         SF=R",
			operands = {"r64", "m32"},
			name = "cmovns",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x49"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "49", "/r"},
			metadata = "CMOV X64         SF=R",
			operands = {"r64", "r64"},
			name = "cmovns",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x49"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "49", "/r"},
			metadata = "CMOV             SF=R",
			operands = {"r16", "r16"},
			name = "cmovns",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x49"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "49", "/r"},
			metadata = "CMOV             SF=R",
			operands = {"r16", "m16"},
			name = "cmovns",
		},
	},
	['korw'] = {
		['k[1:0],k[1:0],k[1:0]'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[1:0]", "k[1:0]", "k[1:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[1:0], ~k[1:0], ~k[1:0]",
			opcode = {"VEX.NDS.L1.0F.W0", "45", "/r"},
			metadata = "AVX512_F",
			operands = {"k[1:0]", "k[1:0]", "k[1:0]"},
			name = "korw",
		},
	},
	['cmovbe'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "46", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r32", "m32"},
			name = "cmovbe",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "46", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r32", "r32"},
			name = "cmovbe",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "46", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r32", "m64"},
			name = "cmovbe",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "46", "/r"},
			metadata = "CMOV X64         CF=R ZF=R",
			operands = {"r64", "m64"},
			name = "cmovbe",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "46", "/r"},
			metadata = "CMOV X64         CF=R ZF=R",
			operands = {"r64", "m32"},
			name = "cmovbe",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "46", "/r"},
			metadata = "CMOV X64         CF=R ZF=R",
			operands = {"r64", "r64"},
			name = "cmovbe",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "46", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r16", "r16"},
			name = "cmovbe",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "46", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r16", "m16"},
			name = "cmovbe",
		},
	},
	['vpaddusb'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "DC", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpaddusb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "DC", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpaddusb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "DC", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpaddusb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "DC", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpaddusb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "DC", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpaddusb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "DC", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpaddusb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "DC", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpaddusb",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "DC", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpaddusb",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "DC", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpaddusb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "DC", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpaddusb",
		},
	},
	['vmovdqu16'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.F2.0F.W1", "6F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vmovdqu16",
		},
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.F2.0F.W1", "7F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vmovdqu16",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.F2.0F.W1", "7F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm", "ymm"},
			name = "vmovdqu16",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.F2.0F.W1", "7F", "/r"},
			metadata = "AVX512_BW",
			operands = {"m512 {kz}", "zmm"},
			name = "vmovdqu16",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.F2.0F.W1", "6F", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "m512"},
			name = "vmovdqu16",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.F2.0F.W1", "6F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vmovdqu16",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.F2.0F.W1", "7F", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm", "zmm"},
			name = "vmovdqu16",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.F2.0F.W1", "6F", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm"},
			name = "vmovdqu16",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.F2.0F.W1", "6F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vmovdqu16",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.F2.0F.W1", "7F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vmovdqu16",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.F2.0F.W1", "6F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vmovdqu16",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.F2.0F.W1", "7F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm", "xmm"},
			name = "vmovdqu16",
		},
	},
	['cmovnb'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "43", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "m32"},
			name = "cmovnb",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "43", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "r32"},
			name = "cmovnb",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "43", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "m64"},
			name = "cmovnb",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "43", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "m64"},
			name = "cmovnb",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "43", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "m32"},
			name = "cmovnb",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "43", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "r64"},
			name = "cmovnb",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "43", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r16", "r16"},
			name = "cmovnb",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "43", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r16", "m16"},
			name = "cmovnb",
		},
	},
	['vmsave'] = {
		[''] = {
			func = function() return "\x0F\x01\xDB" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:<rax>",
			opcode = {"0F", "01", "DB"},
			metadata = "SVM X64          PRIVILEGE=L0",
			operands = {},
			name = "vmsave",
		},
	},
	['punpckhqdq'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "6D", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "punpckhqdq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "6D", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "punpckhqdq",
		},
	},
	['rcl'] = {
		['m16,u8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/2", "ib"},
			metadata = "ANY CF=X OF=X",
			operands = {"m16", "u8"},
			name = "rcl",
		},
		['m8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/2"},
			metadata = "ANY CF=X OF=X",
			operands = {"m8", "1"},
			name = "rcl",
		},
		['m32,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/2", "ib"},
			metadata = "X64 CF=X OF=X",
			operands = {"m32", "u8"},
			name = "rcl",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/2", "ib"},
			metadata = "ANY CF=X OF=X",
			operands = {"m8", "u8"},
			name = "rcl",
		},
		['r8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/2"},
			metadata = "ANY CF=X OF=X",
			operands = {"r8", "cl"},
			name = "rcl",
		},
		['r16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/2"},
			metadata = "ANY CF=X OF=X",
			operands = {"r16", "cl"},
			name = "rcl",
		},
		['m16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/2"},
			metadata = "ANY CF=X OF=X",
			operands = {"m16", "cl"},
			name = "rcl",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\xC1"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib/ub",
			opcode = {"C1", "/2", "ib"},
			metadata = "ANY CF=X OF=X",
			operands = {"r32", "i8"},
			name = "rcl",
		},
		['r32,cl'] = {
			func = function(op1, op2) return "\xD3"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, cl",
			opcode = {"D3", "/2"},
			metadata = "ANY CF=X OF=X",
			operands = {"r32", "cl"},
			name = "rcl",
		},
		['r32,1'] = {
			func = function(op1, op2) return "\xD1"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, 1",
			opcode = {"D1", "/2"},
			metadata = "ANY CF=X OF=X",
			operands = {"r32", "1"},
			name = "rcl",
		},
		['m64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/2"},
			metadata = "X64 CF=X OF=X",
			operands = {"m64", "cl"},
			name = "rcl",
		},
		['m64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/2"},
			metadata = "X64 CF=X OF=X",
			operands = {"m64", "1"},
			name = "rcl",
		},
		['r16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/2"},
			metadata = "ANY CF=X OF=X",
			operands = {"r16", "1"},
			name = "rcl",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/2", "ib"},
			metadata = "X64 CF=X OF=X",
			operands = {"r64", "i8"},
			name = "rcl",
		},
		['r64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/2"},
			metadata = "X64 CF=X OF=X",
			operands = {"r64", "cl"},
			name = "rcl",
		},
		['r64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/2"},
			metadata = "X64 CF=X OF=X",
			operands = {"r64", "1"},
			name = "rcl",
		},
		['m64,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/2", "ib"},
			metadata = "X64 CF=X OF=X",
			operands = {"m64", "u8"},
			name = "rcl",
		},
		['m8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/2"},
			metadata = "ANY CF=X OF=X",
			operands = {"m8", "cl"},
			name = "rcl",
		},
		['m32,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/2"},
			metadata = "X64 CF=X OF=X",
			operands = {"m32", "1"},
			name = "rcl",
		},
		['r8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/2"},
			metadata = "ANY CF=X OF=X",
			operands = {"r8", "1"},
			name = "rcl",
		},
		['m32,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/2"},
			metadata = "X64 CF=X OF=X",
			operands = {"m32", "cl"},
			name = "rcl",
		},
		['m16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/2"},
			metadata = "ANY CF=X OF=X",
			operands = {"m16", "1"},
			name = "rcl",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/2", "ib"},
			metadata = "ANY CF=X OF=X",
			operands = {"r16", "i8"},
			name = "rcl",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/2", "ib"},
			metadata = "ANY CF=X OF=X",
			operands = {"r8", "i8"},
			name = "rcl",
		},
	},
	['fadd'] = {
		['st(0),st(i)'] = {
			func = function(op1, op2) return "\xD8" end,
			real_operands = {"st(0)", "st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(0), st(i)",
			opcode = {"D8", "C0+i"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"st(0)", "st(i)"},
			name = "fadd",
		},
		['st(i),st(0)'] = {
			func = function(op1, op2) return "\xDC" end,
			real_operands = {"st(i)", "st(0)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i), st(0)",
			opcode = {"DC", "C0+i"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"st(i)", "st(0)"},
			name = "fadd",
		},
		['m32'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DC", "/0"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fadd",
		},
		['m64fp'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m64fp"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DC", "/0"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m64fp"},
			name = "fadd",
		},
	},
	['vmload'] = {
		[''] = {
			func = function() return "\x0F\x01\xDA" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:<rax>",
			opcode = {"0F", "01", "DA"},
			metadata = "SVM X64          PRIVILEGE=L0",
			operands = {},
			name = "vmload",
		},
	},
	['fucompp'] = {
		[''] = {
			func = function(op1) return "\xDA\xE9" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"DA", "E9"},
			metadata = "FPU_POP=2        C0=W C1=W C2=W C3=W",
			operands = {""},
			name = "fucompp",
		},
	},
	['popad'] = {
		[''] = {
			func = function(op1) return "\x61" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"61"},
			metadata = "X86 Deprecated",
			operands = {""},
			name = "popad",
		},
	},
	['vblendmq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "64", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vblendmq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "64", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vblendmq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "64", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vblendmq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "64", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vblendmq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "64", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vblendmq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "64", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vblendmq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "64", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vblendmq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "64", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vblendmq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "64", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vblendmq",
		},
	},
	['fsin'] = {
		[''] = {
			func = function(op1) return "\xD9\xFE" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "FE"},
			metadata = "FPU              C0=U C1=W C2=W C3=U",
			operands = {""},
			name = "fsin",
		},
	},
	['pfsubr'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xAA" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "AA"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pfsubr",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xAA" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "AA"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pfsubr",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xAA" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "AA"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pfsubr",
		},
	},
	['vpsrld'] = {
		['xmm,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "72", "/2", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "u8"},
			name = "vpsrld",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W0", "72", "/2", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vpsrld",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.W0", "D2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsrld",
		},
		['ymm,ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D2", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "xmm"},
			name = "vpsrld",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D2", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsrld",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "72", "/2", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "i8"},
			name = "vpsrld",
		},
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "72", "/2", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "i8"},
			name = "vpsrld",
		},
		['zmm {kz},zmm,m128'] = {
			func = function(op1, op2, op3) return "\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.W0", "D2", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m128"},
			name = "vpsrld",
		},
		['xmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b32", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W0", "72", "/2", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32", "u8"},
			name = "vpsrld",
		},
		['ymm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b32", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W0", "72", "/2", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32", "u8"},
			name = "vpsrld",
		},
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W0", "72", "/2", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vpsrld",
		},
		['ymm {kz},ymm,m128'] = {
			func = function(op1, op2, op3) return "\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.W0", "D2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m128"},
			name = "vpsrld",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W0", "72", "/2", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vpsrld",
		},
		['ymm {kz},ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.W0", "D2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "xmm"},
			name = "vpsrld",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W0", "72", "/2", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vpsrld",
		},
		['zmm {kz},zmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.W0", "D2", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "xmm"},
			name = "vpsrld",
		},
		['zmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b32", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W0", "72", "/2", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32", "u8"},
			name = "vpsrld",
		},
		['ymm,ymm,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "72", "/2", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "u8"},
			name = "vpsrld",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D2", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsrld",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W0", "72", "/2", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vpsrld",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W0", "72", "/2", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vpsrld",
		},
		['ymm,ymm,m128'] = {
			func = function(op1, op2, op3) return "\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D2", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m128"},
			name = "vpsrld",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.W0", "D2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsrld",
		},
	},
	['fistp'] = {
		['m64int'] = {
			func = function(op1) return "\xDF"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m64int"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64int",
			opcode = {"DF", "/7"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {"m64int"},
			name = "fistp",
		},
		['m16int'] = {
			func = function(op1) return "\xDF"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m16int"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m16int",
			opcode = {"DF", "/3"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {"m16int"},
			name = "fistp",
		},
		['m32'] = {
			func = function(op1) return "\xDF"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64int",
			opcode = {"DF", "/7"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fistp",
		},
	},
	['t1mskc'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r32", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/7"},
			metadata = "TBM",
			operands = {"r32", "m32"},
			name = "t1mskc",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r32", "r32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/7"},
			metadata = "TBM",
			operands = {"r32", "r32"},
			name = "t1mskc",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r32", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/7"},
			metadata = "TBM",
			operands = {"r32", "m64"},
			name = "t1mskc",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r64", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/7"},
			metadata = "TBM X64",
			operands = {"r64", "m64"},
			name = "t1mskc",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r64", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/7"},
			metadata = "TBM X64",
			operands = {"r64", "m32"},
			name = "t1mskc",
		},
		['r64,r64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r64", "r64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/7"},
			metadata = "TBM X64",
			operands = {"r64", "r64"},
			name = "t1mskc",
		},
	},
	['minps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"0F", "5D", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "minps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"0F", "5D", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "minps",
		},
	},
	['mul'] = {
		['m8'] = {
			func = function(op1) return "\xF6"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:<ax>, r8/m8",
			opcode = {"F6", "/4"},
			metadata = "ANY              OF=W SF=U ZF=U AF=U PF=U CF=W",
			operands = {"m8"},
			name = "mul",
		},
		['r8'] = {
			func = function(op1) return "\xF6"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:<ax>, r8/m8",
			opcode = {"F6", "/4"},
			metadata = "ANY              OF=W SF=U ZF=U AF=U PF=U CF=W",
			operands = {"r8"},
			name = "mul",
		},
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:<rdx>, X:<rax>, r64/m32/m64",
			opcode = {"REX.W", "F7", "/4"},
			metadata = "X64              OF=W SF=U ZF=U AF=U PF=U CF=W",
			operands = {"m32"},
			name = "mul",
		},
		['r16'] = {
			func = function(op1) return "\x66\xF7"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:<dx>, x:<ax>, r16/m16",
			opcode = {"66", "F7", "/4"},
			metadata = "ANY              OF=W SF=U ZF=U AF=U PF=U CF=W",
			operands = {"r16"},
			name = "mul",
		},
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:<rdx>, X:<rax>, r64/m32/m64",
			opcode = {"REX.W", "F7", "/4"},
			metadata = "X64              OF=W SF=U ZF=U AF=U PF=U CF=W",
			operands = {"r64"},
			name = "mul",
		},
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:<rdx>, X:<rax>, r64/m32/m64",
			opcode = {"REX.W", "F7", "/4"},
			metadata = "X64              OF=W SF=U ZF=U AF=U PF=U CF=W",
			operands = {"m64"},
			name = "mul",
		},
		['r32'] = {
			func = function(op1) return "\xF7"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:<edx>, X:<eax>, r32/m32/m64",
			opcode = {"F7", "/4"},
			metadata = "ANY              OF=W SF=U ZF=U AF=U PF=U CF=W",
			operands = {"r32"},
			name = "mul",
		},
		['m16'] = {
			func = function(op1) return "\x66\xF7"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:<dx>, x:<ax>, r16/m16",
			opcode = {"66", "F7", "/4"},
			metadata = "ANY              OF=W SF=U ZF=U AF=U PF=U CF=W",
			operands = {"m16"},
			name = "mul",
		},
	},
	['psubsb'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xE8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "E8", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "psubsb",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xE8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "E8", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "psubsb",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xE8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "E8", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "psubsb",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xE8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "E8", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psubsb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xE8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "E8", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psubsb",
		},
	},
	['vpshlw'] = {
		['xmm,m128,xmm'] = {
			func = function(op1, op2, op3) return "\x95"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "95", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128", "xmm"},
			name = "vpshlw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x95"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"XOP.NDS.L0.P0.M09.W1", "95", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128"},
			name = "vpshlw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x95"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "95", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpshlw",
		},
	},
	['pcmpgtw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "65", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "pcmpgtw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "65", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "pcmpgtw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "65", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "pcmpgtw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "65", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pcmpgtw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "65", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pcmpgtw",
		},
	},
	['vphsubdq'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "E3", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vphsubdq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "E3", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vphsubdq",
		},
	},
	['setnae'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "92", "/r"},
			metadata = "ANY              CF=R",
			operands = {"m8"},
			name = "setnae",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "92", "/r"},
			metadata = "ANY              CF=R",
			operands = {"r8"},
			name = "setnae",
		},
	},
	['jp'] = {
		['i8'] = {
			func = function(op1) return "\x7A"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"7A", "cb"},
			metadata = "ANY              Control=Branch PF=R",
			operands = {"string"},
			name = "jp",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x8A"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "8A", "cw"},
			metadata = "X86              Control=Branch PF=R",
			operands = {"string"},
			name = "jp",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x8A"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "8A", "cd"},
			metadata = "ANY              Control=Branch PF=R",
			operands = {"string"},
			name = "jp",
		},
		['string'] = {
			func = function(op1) return "\x0F\x8A"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "8A", "cd"},
			metadata = "ANY              Control=Branch PF=R",
			operands = {"string"},
			name = "jp",
		},
	},
	['vextractf32x8'] = {
		['ymm,zmm,i8'] = {
			func = function(op1, op2, op3) return "\x1B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "zmm", "ib"},
			encoding = "MRI-T8",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "1B", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"ymm", "zmm", "i8"},
			name = "vextractf32x8",
		},
		['m256 {kz},zmm,u8'] = {
			func = function(op1, op2, op3) return "\x1B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m256 {kz}", "zmm", "ub"},
			encoding = "MRI-T8",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "1B", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"m256 {kz}", "zmm", "u8"},
			name = "vextractf32x8",
		},
	},
	['kord'] = {
		['k[3:0],k[3:0],k[3:0]'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[3:0]", "k[3:0]", "k[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[3:0], ~k[3:0], ~k[3:0]",
			opcode = {"VEX.L1.66.0F.W1", "45", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "k[3:0]", "k[3:0]"},
			name = "kord",
		},
	},
	['cmovnp'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4B", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r32", "m32"},
			name = "cmovnp",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4B", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r32", "r32"},
			name = "cmovnp",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4B", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r32", "m64"},
			name = "cmovnp",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4B", "/r"},
			metadata = "CMOV X64         PF=R",
			operands = {"r64", "m64"},
			name = "cmovnp",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4B", "/r"},
			metadata = "CMOV X64         PF=R",
			operands = {"r64", "m32"},
			name = "cmovnp",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4B", "/r"},
			metadata = "CMOV X64         PF=R",
			operands = {"r64", "r64"},
			name = "cmovnp",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4B", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r16", "r16"},
			name = "cmovnp",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4B", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r16", "m16"},
			name = "cmovnp",
		},
	},
	['andnps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"0F", "55", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "andnps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"0F", "55", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "andnps",
		},
	},
	['packssdw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "6B", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "packssdw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "6B", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "packssdw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "6B", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "packssdw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "6B", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "packssdw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x6B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "6B", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "packssdw",
		},
	},
	['fcmovnu'] = {
		['st(i)'] = {
			func = function(op1) return "\xDB" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"DB", "D8+i"},
			metadata = "FPU CMOV         C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fcmovnu",
		},
	},
	['setnz'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x95"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "95", "/r"},
			metadata = "ANY              ZF=R",
			operands = {"m8"},
			name = "setnz",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x95"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "95", "/r"},
			metadata = "ANY              ZF=R",
			operands = {"r8"},
			name = "setnz",
		},
	},
	['cbw'] = {
		[''] = {
			func = function() return "\x66\x98" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "x:<ax>",
			opcode = {"66", "98"},
			metadata = "ANY",
			operands = {},
			name = "cbw",
		},
	},
	['andpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "54", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "andpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "54", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "andpd",
		},
	},
	['vzeroall'] = {
		[''] = {
			func = function(op1) return "\x77" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"VEX.256.0F.WIG", "77"},
			metadata = "AVX Volatile",
			operands = {""},
			name = "vzeroall",
		},
	},
	['psubsw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xE9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "E9", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "psubsw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xE9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "E9", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "psubsw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xE9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "E9", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "psubsw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xE9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "E9", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psubsw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xE9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "E9", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psubsw",
		},
	},
	['pavgw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "E3", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m32"},
			name = "pavgw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "E3", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m64"},
			name = "pavgw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "E3", "/r"},
			metadata = "MMX2",
			operands = {"mm", "mm"},
			name = "pavgw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "E3", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pavgw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "E3", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pavgw",
		},
	},
	['setpo'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9B", "/r"},
			metadata = "ANY              PF=R",
			operands = {"m8"},
			name = "setpo",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9B", "/r"},
			metadata = "ANY              PF=R",
			operands = {"r8"},
			name = "setpo",
		},
	},
	['vpmovd2m'] = {
		['k,zmm'] = {
			func = function(op1, op2) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k", "zmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "39", "/r"},
			metadata = "AVX512_DQ",
			operands = {"k", "zmm"},
			name = "vpmovd2m",
		},
		['k,xmm'] = {
			func = function(op1, op2) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "39", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"k", "xmm"},
			name = "vpmovd2m",
		},
		['k,ymm'] = {
			func = function(op1, op2) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "39", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"k", "ymm"},
			name = "vpmovd2m",
		},
	},
	['vcvtps2uqq'] = {
		['zmm {kz},ymm'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "ymm"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32 {er}",
			opcode = {"EVEX.512.66.0F.W0", "79", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "ymm"},
			name = "vcvtps2uqq",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "79", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vcvtps2uqq",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.66.0F.W0", "79", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vcvtps2uqq",
		},
		['zmm {kz},b32 {er}'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {er}"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32 {er}",
			opcode = {"EVEX.512.66.0F.W0", "79", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "b32 {er}"},
			name = "vcvtps2uqq",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.66.0F.W0", "79", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vcvtps2uqq",
		},
		['ymm {kz},xmm'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.66.0F.W0", "79", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "xmm"},
			name = "vcvtps2uqq",
		},
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32 {er}",
			opcode = {"EVEX.512.66.0F.W0", "79", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m256"},
			name = "vcvtps2uqq",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "79", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vcvtps2uqq",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "79", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vcvtps2uqq",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "79", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vcvtps2uqq",
		},
	},
	['cli'] = {
		[''] = {
			func = function(op1) return "\xFA" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"FA"},
			metadata = "ANY              Volatile IF=W",
			operands = {""},
			name = "cli",
		},
	},
	['vpaddq'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "D4", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpaddq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "D4", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpaddq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "D4", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpaddq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D4", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpaddq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D4", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpaddq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "D4", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpaddq",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "D4", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpaddq",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D4", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpaddq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "D4", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpaddq",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D4", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpaddq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "D4", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpaddq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "D4", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpaddq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "D4", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpaddq",
		},
	},
	['rorx'] = {
		['r32,r32,i8'] = {
			func = function(op1, op2, op3) return "\xF0"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32", "r32", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, ib/ub",
			opcode = {"VEX.LZ.F2.0F3A.W0", "F0", "/r", "ib"},
			metadata = "BMI2",
			operands = {"r32", "r32", "i8"},
			name = "rorx",
		},
		['r64,r64,i8'] = {
			func = function(op1, op2, op3) return "\xF0"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64", "r64", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, ib/ub",
			opcode = {"VEX.LZ.F2.0F3A.W1", "F0", "/r", "ib"},
			metadata = "BMI2 X64",
			operands = {"r64", "r64", "i8"},
			name = "rorx",
		},
		['r64,m32,u8'] = {
			func = function(op1, op2, op3) return "\xF0"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64", "m32", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, ib/ub",
			opcode = {"VEX.LZ.F2.0F3A.W1", "F0", "/r", "ib"},
			metadata = "BMI2 X64",
			operands = {"r64", "m32", "u8"},
			name = "rorx",
		},
		['r64,m64,u8'] = {
			func = function(op1, op2, op3) return "\xF0"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64", "m64", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, ib/ub",
			opcode = {"VEX.LZ.F2.0F3A.W1", "F0", "/r", "ib"},
			metadata = "BMI2 X64",
			operands = {"r64", "m64", "u8"},
			name = "rorx",
		},
		['r32,m32,u8'] = {
			func = function(op1, op2, op3) return "\xF0"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32", "m32", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, ib/ub",
			opcode = {"VEX.LZ.F2.0F3A.W0", "F0", "/r", "ib"},
			metadata = "BMI2",
			operands = {"r32", "m32", "u8"},
			name = "rorx",
		},
		['r32,m64,u8'] = {
			func = function(op1, op2, op3) return "\xF0"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32", "m64", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, ib/ub",
			opcode = {"VEX.LZ.F2.0F3A.W0", "F0", "/r", "ib"},
			metadata = "BMI2",
			operands = {"r32", "m64", "u8"},
			name = "rorx",
		},
	},
	['vroundps'] = {
		['ymm,m256,u8'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "m256", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.66.0F3A.WIG", "08", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "m256", "u8"},
			name = "vroundps",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.66.0F3A.WIG", "08", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "i8"},
			name = "vroundps",
		},
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.66.0F3A.WIG", "08", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "i8"},
			name = "vroundps",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.66.0F3A.WIG", "08", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "m128", "u8"},
			name = "vroundps",
		},
	},
	['vsubss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "5C", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			name = "vsubss",
		},
		['xmm,xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "5C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			name = "vsubss",
		},
		['xmm {kz},xmm[15:4],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "5C", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m64 {er}"},
			name = "vsubss",
		},
		['xmm,xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "5C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m32"},
			name = "vsubss",
		},
		['xmm,xmm[15:4],m64'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "5C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m64"},
			name = "vsubss",
		},
		['xmm {kz},xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "5C", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			name = "vsubss",
		},
	},
	['blci'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x02"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r32", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "02", "/6"},
			metadata = "TBM",
			operands = {"r32", "m32"},
			name = "blci",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x02"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r32", "r32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "02", "/6"},
			metadata = "TBM",
			operands = {"r32", "r32"},
			name = "blci",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x02"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r32", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "02", "/6"},
			metadata = "TBM",
			operands = {"r32", "m64"},
			name = "blci",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\x02"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r64", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "02", "/6"},
			metadata = "TBM X64",
			operands = {"r64", "m64"},
			name = "blci",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x02"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r64", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "02", "/6"},
			metadata = "TBM X64",
			operands = {"r64", "m32"},
			name = "blci",
		},
		['r64,r64'] = {
			func = function(op1, op2) return "\x02"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r64", "r64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "02", "/6"},
			metadata = "TBM X64",
			operands = {"r64", "r64"},
			name = "blci",
		},
	},
	['knotq'] = {
		['k[7:0],k[7:0]'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[7:0]", "k[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[7:0], k[7:0]",
			opcode = {"VEX.L0.0F.W1", "44", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[7:0]", "k[7:0]"},
			name = "knotq",
		},
	},
	['iret'] = {
		[''] = {
			func = function(op1) return "\xCF" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"CF"},
			metadata = "ANY              Control=Return OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {""},
			name = "iret",
		},
	},
	['cmova'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "47", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r32", "m32"},
			name = "cmova",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "47", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r32", "r32"},
			name = "cmova",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "47", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r32", "m64"},
			name = "cmova",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "47", "/r"},
			metadata = "CMOV X64         CF=R ZF=R",
			operands = {"r64", "m64"},
			name = "cmova",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "47", "/r"},
			metadata = "CMOV X64         CF=R ZF=R",
			operands = {"r64", "m32"},
			name = "cmova",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "47", "/r"},
			metadata = "CMOV X64         CF=R ZF=R",
			operands = {"r64", "r64"},
			name = "cmova",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "47", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r16", "r16"},
			name = "cmova",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "47", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r16", "m16"},
			name = "cmova",
		},
	},
	['fbld'] = {
		['m80dec'] = {
			func = function(op1) return "\xDF"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m80dec"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m80dec",
			opcode = {"DF", "/4"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {"m80dec"},
			name = "fbld",
		},
	},
	['fcomi'] = {
		['st(i)'] = {
			func = function(op1) return "\xDB" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "R:st(i)",
			opcode = {"DB", "F0+i"},
			metadata = "FPU              C1=0 ZF=W PF=W CF=W",
			operands = {"st(i)"},
			name = "fcomi",
		},
	},
	['vroundss'] = {
		['xmm,xmm[15:4],m32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x0A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm[15:4]", "m32", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64, ib/ub",
			opcode = {"VEX.NDS.LIG.66.0F3A.WIG", "0A", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m32", "u8"},
			name = "vroundss",
		},
		['xmm,xmm[15:4],xmm[3:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x0A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm[15:4]", "xmm[3:0]", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64, ib/ub",
			opcode = {"VEX.NDS.LIG.66.0F3A.WIG", "0A", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "xmm[3:0]", "i8"},
			name = "vroundss",
		},
		['xmm,xmm[15:4],m64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x0A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm[15:4]", "m64", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64, ib/ub",
			opcode = {"VEX.NDS.LIG.66.0F3A.WIG", "0A", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m64", "u8"},
			name = "vroundss",
		},
	},
	['vfmadd132ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "98", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmadd132ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "98", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfmadd132ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "98", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmadd132ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "98", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmadd132ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "98", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmadd132ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "98", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmadd132ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "98", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfmadd132ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "98", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmadd132ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "98", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmadd132ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "98", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmadd132ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "98", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmadd132ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "98", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfmadd132ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "98", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmadd132ps",
		},
	},
	['vpmovzxwd'] = {
		['zmm {kz},ymm'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "ymm"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256",
			opcode = {"EVEX.512.66.0F38.WIG", "33", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "ymm"},
			name = "vpmovzxwd",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "33", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[7:0]"},
			name = "vpmovzxwd",
		},
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256",
			opcode = {"EVEX.512.66.0F38.WIG", "33", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m256"},
			name = "vpmovzxwd",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "33", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m64"},
			name = "vpmovzxwd",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "33", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m32"},
			name = "vpmovzxwd",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128",
			opcode = {"EVEX.256.66.0F38.WIG", "33", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vpmovzxwd",
		},
		['ymm {kz},xmm'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128",
			opcode = {"EVEX.256.66.0F38.WIG", "33", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm"},
			name = "vpmovzxwd",
		},
		['ymm,m128'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.66.0F38.WIG", "33", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m128"},
			name = "vpmovzxwd",
		},
		['ymm,xmm'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.66.0F38.WIG", "33", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm"},
			name = "vpmovzxwd",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "33", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vpmovzxwd",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "33", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vpmovzxwd",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "33", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vpmovzxwd",
		},
	},
	['vhsubps'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.F2.0F.WIG", "7D", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vhsubps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.F2.0F.WIG", "7D", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vhsubps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.F2.0F.WIG", "7D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vhsubps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.F2.0F.WIG", "7D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vhsubps",
		},
	},
	['fdiv'] = {
		['st(0),st(i)'] = {
			func = function(op1, op2) return "\xD8" end,
			real_operands = {"st(0)", "st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(0), st(i)",
			opcode = {"D8", "F0+i"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"st(0)", "st(i)"},
			name = "fdiv",
		},
		['st(i),st(0)'] = {
			func = function(op1, op2) return "\xDC" end,
			real_operands = {"st(i)", "st(0)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i), st(0)",
			opcode = {"DC", "F8+i"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"st(i)", "st(0)"},
			name = "fdiv",
		},
		['m32'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DC", "/6"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fdiv",
		},
		['m64fp'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64fp"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DC", "/6"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m64fp"},
			name = "fdiv",
		},
	},
	['vmcall'] = {
		[''] = {
			func = function(op1) return "\x0F\x01\xC1" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "01", "C1"},
			metadata = "VMX              PRIVILEGE=L0",
			operands = {""},
			name = "vmcall",
		},
	},
	['btr'] = {
		['m16,u8'] = {
			func = function(op1, op2) return "\x66\x0F\xBA"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "0F", "BA", "/6", "ib"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m16", "u8"},
			name = "btr",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\xB3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32",
			opcode = {"0F", "B3", "/r"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r32", "r32"},
			name = "btr",
		},
		['m32,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xBA"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "0F", "BA", "/6", "ib"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m32", "u8"},
			name = "btr",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xB3"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64",
			opcode = {"REX.W", "0F", "B3", "/r"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m32", "r64"},
			name = "btr",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x0F\xB3"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32",
			opcode = {"0F", "B3", "/r"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m64", "r32"},
			name = "btr",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x0F\xB3"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32",
			opcode = {"0F", "B3", "/r"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m32", "r32"},
			name = "btr",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\xB3"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16",
			opcode = {"66", "0F", "B3", "/r"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m16", "r16"},
			name = "btr",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xBA"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "0F", "BA", "/6", "ib"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r64", "i8"},
			name = "btr",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xB3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64",
			opcode = {"REX.W", "0F", "B3", "/r"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r64", "r64"},
			name = "btr",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xB3"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64",
			opcode = {"REX.W", "0F", "B3", "/r"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m64", "r64"},
			name = "btr",
		},
		['m64,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xBA"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "0F", "BA", "/6", "ib"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m64", "u8"},
			name = "btr",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\x0F\xBA"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib/ub",
			opcode = {"0F", "BA", "/6", "ib"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r32", "i8"},
			name = "btr",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\xB3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16",
			opcode = {"66", "0F", "B3", "/r"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r16", "r16"},
			name = "btr",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\x0F\xBA"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "0F", "BA", "/6", "ib"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r16", "i8"},
			name = "btr",
		},
	},
	['vfnmaddpd'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "79", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vfnmaddpd",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "79", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vfnmaddpd",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "79", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vfnmaddpd",
		},
		['ymm,ymm,ymm,m256'] = {
			func = function(op1, op2, op3, op4) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "m256"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "79", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "m256"},
			name = "vfnmaddpd",
		},
		['xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "79", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "m128"},
			name = "vfnmaddpd",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "79", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vfnmaddpd",
		},
	},
	['vpermi2d'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "76", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermi2d",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpermi2d",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermi2d",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermi2d",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpermi2d",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "76", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpermi2d",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "76", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermi2d",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermi2d",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermi2d",
		},
	},
	['vshufi32x4'] = {
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x43"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "43", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vshufi32x4",
		},
		['ymm {kz},ymm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x43"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "43", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32", "u8"},
			name = "vshufi32x4",
		},
		['zmm {kz},zmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x43"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "43", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32", "u8"},
			name = "vshufi32x4",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x43"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "43", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vshufi32x4",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x43"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "43", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vshufi32x4",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x43"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "43", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vshufi32x4",
		},
	},
	['xsavec'] = {
		['m32'] = {
			func = function(op1) return "\x0F\xC7"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"0F", "C7", "/4"},
			metadata = "XSAVEC           Volatile XCR=R",
			operands = {"m32"},
			name = "xsavec",
		},
		['m64'] = {
			func = function(op1) return "\x0F\xC7"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"0F", "C7", "/4"},
			metadata = "XSAVEC           Volatile XCR=R",
			operands = {"m64"},
			name = "xsavec",
		},
	},
	['vinsertf64x2'] = {
		['zmm {kz},zmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x18"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "xmm", "ib"},
			encoding = "RVMI-T2",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "18", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "xmm", "i8"},
			name = "vinsertf64x2",
		},
		['ymm {kz},ymm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x18"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "xmm", "ib"},
			encoding = "RVMI-T2",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "18", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "xmm", "i8"},
			name = "vinsertf64x2",
		},
		['zmm {kz},zmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x18"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m128", "ub"},
			encoding = "RVMI-T2",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "18", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "m128", "u8"},
			name = "vinsertf64x2",
		},
		['ymm {kz},ymm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x18"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m128", "ub"},
			encoding = "RVMI-T2",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "18", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "m128", "u8"},
			name = "vinsertf64x2",
		},
	},
	['je'] = {
		['i8'] = {
			func = function(op1) return "\x74"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"74", "cb"},
			metadata = "ANY              Control=Branch ZF=R",
			operands = {"string"},
			name = "je",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x84"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "84", "cw"},
			metadata = "X86              Control=Branch ZF=R",
			operands = {"string"},
			name = "je",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x84"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "84", "cd"},
			metadata = "ANY              Control=Branch ZF=R",
			operands = {"string"},
			name = "je",
		},
		['string'] = {
			func = function(op1) return "\x0F\x84"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "84", "cd"},
			metadata = "ANY              Control=Branch ZF=R",
			operands = {"string"},
			name = "je",
		},
	},
	['cmp'] = {
		['r64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/7", "id"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "i32"},
			name = "cmp",
		},
		['m64,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r32/m32/m64, id/ud",
			opcode = {"81", "/7", "id"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "u32"},
			name = "cmp",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x39"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r64/m32/m64, r64",
			opcode = {"REX.W", "39", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "r64"},
			name = "cmp",
		},
		['m16,u16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"m16", "uw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r16/m16, iw/uw",
			opcode = {"66", "81", "/7", "iw"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "u16"},
			name = "cmp",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r32, r32/m32/m64",
			opcode = {"3B", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "m32"},
			name = "cmp",
		},
		['m32,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/7", "id"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "i32"},
			name = "cmp",
		},
		['ax,u16'] = {
			func = function(op1, op2) return "\x66\x3D"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "uw"},
			encoding = "I",
			has_relative = false,
			operands2 = "R:ax, iw/uw",
			opcode = {"66", "3D", "iw"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"ax", "u16"},
			name = "cmp",
		},
		['r8,m8'] = {
			func = function(op1, op2) return "\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r8, r8/m8",
			opcode = {"3A", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "m8"},
			name = "cmp",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x39"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r32/m32/m64, r32",
			opcode = {"39", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "r32"},
			name = "cmp",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x39"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r16/m16, r16",
			opcode = {"66", "39", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "r16"},
			name = "cmp",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r64/m32/m64, r64",
			opcode = {"REX.W", "39", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "r64"},
			name = "cmp",
		},
		['eax,u32'] = {
			func = function(op1, op2) return "\x3D"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "ud"},
			encoding = "I",
			has_relative = false,
			operands2 = "R:eax, id/ud",
			opcode = {"3D", "id"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"eax", "u32"},
			name = "cmp",
		},
		['eax,i32'] = {
			func = function(op1, op2) return "\x3D"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "R:eax, id/ud",
			opcode = {"3D", "id"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"eax", "i32"},
			name = "cmp",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r16/m16, r16",
			opcode = {"66", "39", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "r16"},
			name = "cmp",
		},
		['r8,r8'] = {
			func = function(op1, op2) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r8/m8, r8",
			opcode = {"38", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "r8"},
			name = "cmp",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x39"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r32/m32/m64, r32",
			opcode = {"39", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "r32"},
			name = "cmp",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r8/m8, ib/ub",
			opcode = {"80", "/7", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "u8"},
			name = "cmp",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/7", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "i8"},
			name = "cmp",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r32, r32/m32/m64",
			opcode = {"3B", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "m64"},
			name = "cmp",
		},
		['r32,i32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r32/m32/m64, id/ud",
			opcode = {"81", "/7", "id"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "i32"},
			name = "cmp",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\x83"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r32/m32/m64, ib",
			opcode = {"83", "/7", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "i8"},
			name = "cmp",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r64, r64/m32/m64",
			opcode = {"REX.W", "3B", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "m32"},
			name = "cmp",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r16, r16/m16",
			opcode = {"66", "3B", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "m16"},
			name = "cmp",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r64, r64/m32/m64",
			opcode = {"REX.W", "3B", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "m64"},
			name = "cmp",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r32/m32/m64, r32",
			opcode = {"39", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "r32"},
			name = "cmp",
		},
		['m16,i8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r16/m16, ib",
			opcode = {"66", "83", "/7", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "i8"},
			name = "cmp",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x39"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r64/m32/m64, r64",
			opcode = {"REX.W", "39", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "r64"},
			name = "cmp",
		},
		['m64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/7", "id"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "i32"},
			name = "cmp",
		},
		['m8,r8'] = {
			func = function(op1, op2) return "\x38"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r8/m8, r8",
			opcode = {"38", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "r8"},
			name = "cmp",
		},
		['al,u8'] = {
			func = function(op1, op2) return "\x3C"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "R:al, ib/ub",
			opcode = {"3C", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"al", "u8"},
			name = "cmp",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r16/m16, ib",
			opcode = {"66", "83", "/7", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "i8"},
			name = "cmp",
		},
		['rax,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x3D"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"rax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "R:rax, id",
			opcode = {"REX.W", "3D", "id"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"rax", "i32"},
			name = "cmp",
		},
		['r16,i16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"r16", "iw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r16/m16, iw/uw",
			opcode = {"66", "81", "/7", "iw"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "i16"},
			name = "cmp",
		},
		['al,i8'] = {
			func = function(op1, op2) return "\x3C"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "R:al, ib/ub",
			opcode = {"3C", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"al", "i8"},
			name = "cmp",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r8/m8, ib/ub",
			opcode = {"80", "/7", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "i8"},
			name = "cmp",
		},
		['m64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/7", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "i8"},
			name = "cmp",
		},
		['m32,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/7", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "i8"},
			name = "cmp",
		},
		['m32,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r32/m32/m64, id/ud",
			opcode = {"81", "/7", "id"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "u32"},
			name = "cmp",
		},
		['ax,i16'] = {
			func = function(op1, op2) return "\x66\x3D"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "iw"},
			encoding = "I",
			has_relative = false,
			operands2 = "R:ax, iw/uw",
			opcode = {"66", "3D", "iw"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"ax", "i16"},
			name = "cmp",
		},
	},
	['vshuff64x2'] = {
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x23"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "23", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vshuff64x2",
		},
		['ymm {kz},ymm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x23"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "23", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64", "u8"},
			name = "vshuff64x2",
		},
		['zmm {kz},zmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x23"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "23", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64", "u8"},
			name = "vshuff64x2",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x23"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "23", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vshuff64x2",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x23"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "23", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vshuff64x2",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x23"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "23", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vshuff64x2",
		},
	},
	['vpandq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "DB", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpandq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "DB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpandq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "DB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpandq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "DB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpandq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "DB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpandq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "DB", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpandq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "DB", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpandq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "DB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpandq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "DB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpandq",
		},
	},
	['vshuff32x4'] = {
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x23"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "23", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vshuff32x4",
		},
		['ymm {kz},ymm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x23"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "23", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32", "u8"},
			name = "vshuff32x4",
		},
		['zmm {kz},zmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x23"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "23", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32", "u8"},
			name = "vshuff32x4",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x23"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "23", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vshuff32x4",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x23"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "23", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vshuff32x4",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x23"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "23", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vshuff32x4",
		},
	},
	['vscatterqps'] = {
		['m64y {k},xmm'] = {
			func = function(op1, op2) return "\xA3" end,
			real_operands = {"m64y {k}", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, xmm",
			opcode = {"EVEX.256.66.0F38.W0", "A3"},
			metadata = "AVX512_F-VL",
			operands = {"m64y {k}", "xmm"},
			name = "vscatterqps",
		},
		['m64x {k},xmm'] = {
			func = function(op1, op2) return "\xA3" end,
			real_operands = {"m64x {k}", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, xmm",
			opcode = {"EVEX.128.66.0F38.W0", "A3"},
			metadata = "AVX512_F-VL",
			operands = {"m64x {k}", "xmm"},
			name = "vscatterqps",
		},
		['vm32,ymm'] = {
			func = function(op1, op2) return "\xA3" end,
			real_operands = {"vm32", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64z {k}, ymm",
			opcode = {"EVEX.512.66.0F38.W0", "A3"},
			metadata = "AVX512_F",
			operands = {"vm32", "ymm"},
			name = "vscatterqps",
		},
		['vm32,xmm'] = {
			func = function(op1, op2) return "\xA3" end,
			real_operands = {"vm32", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, xmm",
			opcode = {"EVEX.256.66.0F38.W0", "A3"},
			metadata = "AVX512_F-VL",
			operands = {"vm32", "xmm"},
			name = "vscatterqps",
		},
		['m64z {k},ymm'] = {
			func = function(op1, op2) return "\xA3" end,
			real_operands = {"m64z {k}", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64z {k}, ymm",
			opcode = {"EVEX.512.66.0F38.W0", "A3"},
			metadata = "AVX512_F",
			operands = {"m64z {k}", "ymm"},
			name = "vscatterqps",
		},
	},
	['packusdw'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "2B", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "packusdw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "2B", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm"},
			name = "packusdw",
		},
	},
	['vpmacsww'] = {
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x95"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "95", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vpmacsww",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x95"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "95", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vpmacsww",
		},
	},
	['vscatterpf1qps'] = {
		['m64z {k}'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64z {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C7", "/6"},
			metadata = "AVX512_PFI",
			operands = {"m64z {k}"},
			name = "vscatterpf1qps",
		},
		['vm32'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C7", "/6"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vscatterpf1qps",
		},
	},
	['vunpckhps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.0F.W0", "15", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vunpckhps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vunpckhps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vunpckhps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vunpckhps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "15", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vunpckhps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "15", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vunpckhps",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.0F.W0", "15", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vunpckhps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "15", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vunpckhps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vunpckhps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "15", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vunpckhps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.0F.W0", "15", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vunpckhps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vunpckhps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vunpckhps",
		},
	},
	['vscatterpf1dpd'] = {
		['m64y {k}'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64y {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64y {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C6", "/6"},
			metadata = "AVX512_PFI",
			operands = {"m64y {k}"},
			name = "vscatterpf1dpd",
		},
		['vm32'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64y {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C6", "/6"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vscatterpf1dpd",
		},
	},
	['vscatterpf0qps'] = {
		['m64z {k}'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m64z {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C7", "/5"},
			metadata = "AVX512_PFI",
			operands = {"m64z {k}"},
			name = "vscatterpf0qps",
		},
		['vm32'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C7", "/5"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vscatterpf0qps",
		},
	},
	['vfmsub213sd'] = {
		['xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3) return "\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "AB", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfmsub213sd",
		},
		['xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "AB", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfmsub213sd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "AB", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfmsub213sd",
		},
		['xmm[7:0] {kz},xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "AB", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			name = "vfmsub213sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "AB", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			name = "vfmsub213sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "AB", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			name = "vfmsub213sd",
		},
	},
	['vscatterpf0qpd'] = {
		['m64z {k}'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m64z {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C7", "/5"},
			metadata = "AVX512_PFI",
			operands = {"m64z {k}"},
			name = "vscatterpf0qpd",
		},
		['vm32'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C7", "/5"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vscatterpf0qpd",
		},
	},
	['divps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"0F", "5E", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "divps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"0F", "5E", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "divps",
		},
	},
	['dpps'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x40"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "40", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm", "i8"},
			name = "dpps",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x40"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "40", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128", "u8"},
			name = "dpps",
		},
	},
	['vfnmsub213sd'] = {
		['xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3) return "\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "AF", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfnmsub213sd",
		},
		['xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "AF", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfnmsub213sd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "AF", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfnmsub213sd",
		},
		['xmm[7:0] {kz},xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "AF", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			name = "vfnmsub213sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "AF", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			name = "vfnmsub213sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "AF", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			name = "vfnmsub213sd",
		},
	},
	['vpermi2ps'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "77", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermi2ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "77", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpermi2ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "77", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermi2ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "77", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermi2ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "77", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpermi2ps",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "77", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpermi2ps",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "77", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermi2ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "77", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermi2ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "77", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermi2ps",
		},
	},
	['vpermb'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "8D", "/r"},
			metadata = "AVX512_VBMI",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "8D", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "8D", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "8D", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermb",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "8D", "/r"},
			metadata = "AVX512_VBMI",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "8D", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermb",
		},
	},
	['vscatterdpd'] = {
		['m64x {k},xmm'] = {
			func = function(op1, op2) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64x {k}", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, xmm",
			opcode = {"EVEX.128.66.0F38.W1", "A2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64x {k}", "xmm"},
			name = "vscatterdpd",
		},
		['m64x {k},ymm'] = {
			func = function(op1, op2) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64x {k}", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, ymm",
			opcode = {"EVEX.256.66.0F38.W1", "A2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64x {k}", "ymm"},
			name = "vscatterdpd",
		},
		['vm32,ymm'] = {
			func = function(op1, op2) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, ymm",
			opcode = {"EVEX.256.66.0F38.W1", "A2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"vm32", "ymm"},
			name = "vscatterdpd",
		},
		['vm32,xmm'] = {
			func = function(op1, op2) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, xmm",
			opcode = {"EVEX.128.66.0F38.W1", "A2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"vm32", "xmm"},
			name = "vscatterdpd",
		},
		['vm32,zmm'] = {
			func = function(op1, op2) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, zmm",
			opcode = {"EVEX.512.66.0F38.W1", "A2", "/r"},
			metadata = "AVX512_F",
			operands = {"vm32", "zmm"},
			name = "vscatterdpd",
		},
		['m64y {k},zmm'] = {
			func = function(op1, op2) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64y {k}", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, zmm",
			opcode = {"EVEX.512.66.0F38.W1", "A2", "/r"},
			metadata = "AVX512_F",
			operands = {"m64y {k}", "zmm"},
			name = "vscatterdpd",
		},
	},
	['vpmovswb'] = {
		['xmm,ymm'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "20", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm", "ymm"},
			name = "vpmovswb",
		},
		['xmm[7:0],xmm'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "20", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm[7:0]", "xmm"},
			name = "vpmovswb",
		},
		['m256 {kz},zmm'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "20", "/r"},
			metadata = "AVX512_BW",
			operands = {"m256 {kz}", "zmm"},
			name = "vpmovswb",
		},
		['ymm,zmm'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "20", "/r"},
			metadata = "AVX512_BW",
			operands = {"ymm", "zmm"},
			name = "vpmovswb",
		},
		['m128 {kz},ymm'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "20", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"m128 {kz}", "ymm"},
			name = "vpmovswb",
		},
		['m64 {kz},xmm'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "20", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"m64 {kz}", "xmm"},
			name = "vpmovswb",
		},
		['m32,xmm'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "20", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"m32", "xmm"},
			name = "vpmovswb",
		},
	},
	['vscalefps'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "2C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vscalefps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "2C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vscalefps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "2C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vscalefps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "2C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vscalefps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "2C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vscalefps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "2C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vscalefps",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "2C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vscalefps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "2C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vscalefps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "2C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vscalefps",
		},
	},
	['vrsqrt28ss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xCD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "CD", "/r"},
			metadata = "AVX512_ERI",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			name = "vrsqrt28ss",
		},
		['xmm {kz},xmm[15:4],m64 {sae}'] = {
			func = function(op1, op2, op3) return "\xCD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64 {sae}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "CD", "/r"},
			metadata = "AVX512_ERI",
			operands = {"xmm {kz}", "xmm[15:4]", "m64 {sae}"},
			name = "vrsqrt28ss",
		},
		['xmm {kz},xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\xCD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "CD", "/r"},
			metadata = "AVX512_ERI",
			operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			name = "vrsqrt28ss",
		},
	},
	['insd'] = {
		['es:zdi,dx'] = {
			func = function(op1, op2) return "\x6D" end,
			real_operands = {"es:zdi", "dx"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:es:zdi, dx",
			opcode = {"6D"},
			metadata = "ANY _Rep         Volatile",
			operands = {"es:zdi", "dx"},
			name = "insd",
		},
	},
	['vrsqrt28sd'] = {
		['xmm {kz},xmm[15:8],m64 {sae}'] = {
			func = function(op1, op2, op3) return "\xCD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64 {sae}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "CD", "/r"},
			metadata = "AVX512_ERI",
			operands = {"xmm {kz}", "xmm[15:8]", "m64 {sae}"},
			name = "vrsqrt28sd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xCD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "CD", "/r"},
			metadata = "AVX512_ERI",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			name = "vrsqrt28sd",
		},
		['xmm {kz},xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\xCD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "CD", "/r"},
			metadata = "AVX512_ERI",
			operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			name = "vrsqrt28sd",
		},
	},
	['fchs'] = {
		[''] = {
			func = function(op1) return "\xD9\xE0" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "E0"},
			metadata = "FPU              C0=U C1=0 C2=U C3=U",
			operands = {""},
			name = "fchs",
		},
	},
	['vrsqrt28ps'] = {
		['zmm {kz},b32 {sae}'] = {
			func = function(op1, op2) return "\xCC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {sae}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.66.0F38.W0", "CC", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "b32 {sae}"},
			name = "vrsqrt28ps",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\xCC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.66.0F38.W0", "CC", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "zmm"},
			name = "vrsqrt28ps",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\xCC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.66.0F38.W0", "CC", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "m512"},
			name = "vrsqrt28ps",
		},
	},
	['vcvttpd2qq'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vcvttpd2qq",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vcvttpd2qq",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vcvttpd2qq",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vcvttpd2qq",
		},
		['ymm {kz},b64'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b64"},
			name = "vcvttpd2qq",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vcvttpd2qq",
		},
		['zmm {kz},b64 {sae}'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b64 {sae}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F.W1", "7A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b64 {sae}"},
			name = "vcvttpd2qq",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F.W1", "7A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vcvttpd2qq",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F.W1", "7A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vcvttpd2qq",
		},
	},
	['vpermi2pd'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "77", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermi2pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "77", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermi2pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "77", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermi2pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "77", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpermi2pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "77", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpermi2pd",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "77", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpermi2pd",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "77", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermi2pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "77", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermi2pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x77"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "77", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermi2pd",
		},
	},
	['vrsqrt28pd'] = {
		['zmm {kz},b64 {sae}'] = {
			func = function(op1, op2) return "\xCC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b64 {sae}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F38.W1", "CC", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "b64 {sae}"},
			name = "vrsqrt28pd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\xCC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F38.W1", "CC", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "zmm"},
			name = "vrsqrt28pd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\xCC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F38.W1", "CC", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "m512"},
			name = "vrsqrt28pd",
		},
	},
	['insb'] = {
		['es:zdi,dx'] = {
			func = function(op1, op2) return "\x6C" end,
			real_operands = {"es:zdi", "dx"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:es:zdi, dx",
			opcode = {"6C"},
			metadata = "ANY _Rep         Volatile",
			operands = {"es:zdi", "dx"},
			name = "insb",
		},
	},
	['vpord'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "EB", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpord",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "EB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpord",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "EB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpord",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "EB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpord",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "EB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpord",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "EB", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpord",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "EB", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpord",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "EB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpord",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xEB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "EB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpord",
		},
	},
	['vcvttps2dq'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.F3.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vcvttps2dq",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.F3.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vcvttps2dq",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.F3.0F.WIG", "5B", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vcvttps2dq",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.F3.0F.WIG", "5B", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vcvttps2dq",
		},
		['zmm {kz},b32 {sae}'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {sae}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.F3.0F.W0", "5B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32 {sae}"},
			name = "vcvttps2dq",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.F3.0F.W0", "5B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vcvttps2dq",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.F3.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vcvttps2dq",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.F3.0F.W0", "5B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vcvttps2dq",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.F3.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vcvttps2dq",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.F3.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vcvttps2dq",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.F3.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vcvttps2dq",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.F3.0F.WIG", "5B", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vcvttps2dq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.F3.0F.WIG", "5B", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vcvttps2dq",
		},
	},
	['blcmsk'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x02"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r32", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "02", "/1"},
			metadata = "TBM",
			operands = {"r32", "m32"},
			name = "blcmsk",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x02"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r32", "r32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "02", "/1"},
			metadata = "TBM",
			operands = {"r32", "r32"},
			name = "blcmsk",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x02"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r32", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "02", "/1"},
			metadata = "TBM",
			operands = {"r32", "m64"},
			name = "blcmsk",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\x02"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r64", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "02", "/1"},
			metadata = "TBM X64",
			operands = {"r64", "m64"},
			name = "blcmsk",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x02"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r64", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "02", "/1"},
			metadata = "TBM X64",
			operands = {"r64", "m32"},
			name = "blcmsk",
		},
		['r64,r64'] = {
			func = function(op1, op2) return "\x02"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r64", "r64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "02", "/1"},
			metadata = "TBM X64",
			operands = {"r64", "r64"},
			name = "blcmsk",
		},
	},
	['vpshrdvd'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "73", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpshrdvd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "73", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpshrdvd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "73", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpshrdvd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "73", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpshrdvd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "73", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpshrdvd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "73", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpshrdvd",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "73", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpshrdvd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "73", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpshrdvd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "73", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpshrdvd",
		},
	},
	['kshiftrq'] = {
		['k[7:0],k[7:0],u8'] = {
			func = function(op1, op2, op3) return "\x31"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[7:0]", "k[7:0]", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[7:0], k[7:0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W1", "31", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k[7:0]", "k[7:0]", "u8"},
			name = "kshiftrq",
		},
		['k[7:0],k[7:0],i8'] = {
			func = function(op1, op2, op3) return "\x31"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[7:0]", "k[7:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[7:0], k[7:0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W1", "31", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k[7:0]", "k[7:0]", "i8"},
			name = "kshiftrq",
		},
	},
	['wrfsbase'] = {
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF3\x0F\xAE"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r64",
			opcode = {"REX.W", "F3", "0F", "AE", "/2"},
			metadata = "FSGSBASE X64     Volatile",
			operands = {"r64"},
			name = "wrfsbase",
		},
		['r32'] = {
			func = function(op1) return "\xF3\x0F\xAE"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r32",
			opcode = {"F3", "0F", "AE", "/2"},
			metadata = "FSGSBASE X64     Volatile",
			operands = {"r32"},
			name = "wrfsbase",
		},
	},
	['vrsqrt14sd'] = {
		['xmm {kz},xmm[15:8],m64'] = {
			func = function(op1, op2, op3) return "\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "4F", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m64"},
			name = "vrsqrt14sd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "4F", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			name = "vrsqrt14sd",
		},
		['xmm {kz},xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "4F", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			name = "vrsqrt14sd",
		},
	},
	['vscatterpf0dpd'] = {
		['m64y {k}'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m64y {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64y {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C6", "/5"},
			metadata = "AVX512_PFI",
			operands = {"m64y {k}"},
			name = "vscatterpf0dpd",
		},
		['vm32'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64y {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C6", "/5"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vscatterpf0dpd",
		},
	},
	['vpunpcklqdq'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "6C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpunpcklqdq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "6C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpunpcklqdq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "6C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpunpcklqdq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "6C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpunpcklqdq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "6C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpunpcklqdq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "6C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpunpcklqdq",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "6C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpunpcklqdq",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "6C", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpunpcklqdq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "6C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpunpcklqdq",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "6C", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpunpcklqdq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "6C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpunpcklqdq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "6C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpunpcklqdq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "6C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpunpcklqdq",
		},
	},
	['vrsqrt14pd'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F38.W1", "4E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vrsqrt14pd",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F38.W1", "4E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vrsqrt14pd",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F38.W1", "4E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vrsqrt14pd",
		},
		['zmm {kz},b64'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64",
			opcode = {"EVEX.512.66.0F38.W1", "4E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b64"},
			name = "vrsqrt14pd",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F38.W1", "4E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vrsqrt14pd",
		},
		['ymm {kz},b64'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F38.W1", "4E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b64"},
			name = "vrsqrt14pd",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F38.W1", "4E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vrsqrt14pd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64",
			opcode = {"EVEX.512.66.0F38.W1", "4E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vrsqrt14pd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64",
			opcode = {"EVEX.512.66.0F38.W1", "4E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vrsqrt14pd",
		},
	},
	['fld'] = {
		['m80fp'] = {
			func = function(op1) return "\xDB"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m80fp"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m80fp",
			opcode = {"DB", "/5"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {"m80fp"},
			name = "fld",
		},
		['st(i)'] = {
			func = function(op1) return "\xD9" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "R:st(i)",
			opcode = {"D9", "C0+i"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fld",
		},
		['m32'] = {
			func = function(op1) return "\xDD"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DD", "/0"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fld",
		},
		['m64fp'] = {
			func = function(op1) return "\xDD"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m64fp"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DD", "/0"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {"m64fp"},
			name = "fld",
		},
	},
	['cmpsd'] = {
		[''] = {
			func = function() return "\xA7" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<ds:zsi>, X:<es:zdi>",
			opcode = {"A7"},
			metadata = "ANY _Rep         OF=W SF=W ZF=W AF=W PF=W CF=W DF=R",
			operands = {},
			name = "cmpsd",
		},
		['xmm[7:0],m32,u8'] = {
			func = function(op1, op2, op3) return "\xF2\x0F\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm[7:0]", "m32", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64, ib/ub",
			opcode = {"F2", "0F", "C2", "/r", "ib"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m32", "u8"},
			name = "cmpsd",
		},
		['xmm[7:0],m64,u8'] = {
			func = function(op1, op2, op3) return "\xF2\x0F\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm[7:0]", "m64", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64, ib/ub",
			opcode = {"F2", "0F", "C2", "/r", "ib"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m64", "u8"},
			name = "cmpsd",
		},
		['xmm[7:0],xmm[7:0],i8'] = {
			func = function(op1, op2, op3) return "\xF2\x0F\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64, ib/ub",
			opcode = {"F2", "0F", "C2", "/r", "ib"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "xmm[7:0]", "i8"},
			name = "cmpsd",
		},
	},
	['vgatherdps'] = {
		['ymm {k},m64y'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {k}", "m64y"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W0", "92", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "m64y"},
			name = "vgatherdps",
		},
		['xmm,m64x,xmm'] = {
			func = function(op1, op2, op3) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64x", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64x, X:xmm",
			opcode = {"VEX.DDS.128.66.0F38.W0", "92", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m64x", "xmm"},
			name = "vgatherdps",
		},
		['ymm,m64y,ymm'] = {
			func = function(op1, op2, op3) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64y", "ymm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:ymm, vm32/m64y, X:ymm",
			opcode = {"VEX.DDS.256.66.0F38.W0", "92", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m64y", "ymm"},
			name = "vgatherdps",
		},
		['xmm {k},m64x'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {k}", "m64x"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W0", "92", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "m64x"},
			name = "vgatherdps",
		},
		['ymm {k},vm32'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W0", "92", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "vm32"},
			name = "vgatherdps",
		},
		['zmm {k},m64z'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {k}", "m64z"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W0", "92", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "m64z"},
			name = "vgatherdps",
		},
		['ymm,vm32,ymm'] = {
			func = function(op1, op2, op3) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "vm32", "ymm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:ymm, vm32/m64y, X:ymm",
			opcode = {"VEX.DDS.256.66.0F38.W0", "92", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "vm32", "ymm"},
			name = "vgatherdps",
		},
		['zmm {k},vm32'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W0", "92", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "vm32"},
			name = "vgatherdps",
		},
		['xmm {k},vm32'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W0", "92", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "vm32"},
			name = "vgatherdps",
		},
		['xmm,vm32,xmm'] = {
			func = function(op1, op2, op3) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "vm32", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64x, X:xmm",
			opcode = {"VEX.DDS.128.66.0F38.W0", "92", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "vm32", "xmm"},
			name = "vgatherdps",
		},
	},
	['pmaddubsw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x38\x04"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "38", "04", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m32"},
			name = "pmaddubsw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x38\x04"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "38", "04", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m64"},
			name = "pmaddubsw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x38\x04"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "38", "04", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "mm"},
			name = "pmaddubsw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x04"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "04", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "m128"},
			name = "pmaddubsw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x04"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "04", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "xmm"},
			name = "pmaddubsw",
		},
	},
	['vpabsb'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x1C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38", "1C", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vpabsb",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x1C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38", "1C", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vpabsb",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x1C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.66.0F38.WIG", "1C", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m256"},
			name = "vpabsb",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x1C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38", "1C", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vpabsb",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x1C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38", "1C", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "m512"},
			name = "vpabsb",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x1C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38", "1C", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm"},
			name = "vpabsb",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x1C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38", "1C", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vpabsb",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x1C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.66.0F38.WIG", "1C", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm"},
			name = "vpabsb",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x1C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.66.0F38.WIG", "1C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vpabsb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x1C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.66.0F38.WIG", "1C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vpabsb",
		},
	},
	['vrndscaleps'] = {
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "08", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vrndscaleps",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "08", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vrndscaleps",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "08", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vrndscaleps",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "08", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vrndscaleps",
		},
		['zmm {kz},b32,ub {sae}'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b32", "ub {sae}"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub {sae}",
			opcode = {"EVEX.512.66.0F3A.W0", "08", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32", "ub {sae}"},
			name = "vrndscaleps",
		},
		['zmm {kz},m512,ub {sae}'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub {sae}"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub {sae}",
			opcode = {"EVEX.512.66.0F3A.W0", "08", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "ub {sae}"},
			name = "vrndscaleps",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub {sae}",
			opcode = {"EVEX.512.66.0F3A.W0", "08", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vrndscaleps",
		},
		['xmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b32", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "08", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32", "u8"},
			name = "vrndscaleps",
		},
		['ymm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x08"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b32", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "08", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32", "u8"},
			name = "vrndscaleps",
		},
	},
	['vfnmadd132ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "9C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfnmadd132ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "9C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfnmadd132ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "9C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfnmadd132ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "9C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfnmadd132ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "9C", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfnmadd132ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "9C", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfnmadd132ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "9C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfnmadd132ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "9C", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfnmadd132ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "9C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfnmadd132ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "9C", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfnmadd132ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "9C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfnmadd132ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "9C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfnmadd132ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "9C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfnmadd132ps",
		},
	},
	['rdmsr'] = {
		[''] = {
			func = function() return "\x0F\x32" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:<edx>,W:<eax>,R:<ecx>",
			opcode = {"0F", "32"},
			metadata = "ANY              Volatile PRIVILEGE=L0 MSR=R",
			operands = {},
			name = "rdmsr",
		},
	},
	['pmovzxbw'] = {
		['xmm,m64'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "30", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m64"},
			name = "pmovzxbw",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "30", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm[7:0]"},
			name = "pmovzxbw",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "30", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m32"},
			name = "pmovzxbw",
		},
	},
	['vreducesd'] = {
		['xmm {kz},xmm[15:8],m64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x57"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64", "ub"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64, ib/ub",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W1", "57", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm {kz}", "xmm[15:8]", "m64", "u8"},
			name = "vreducesd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x57"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]", "ib"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64, ib/ub",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W1", "57", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]", "i8"},
			name = "vreducesd",
		},
		['xmm {kz},xmm[15:8],m32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x57"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32", "ub"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64, ib/ub",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W1", "57", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm {kz}", "xmm[15:8]", "m32", "u8"},
			name = "vreducesd",
		},
	},
	['vreducepd'] = {
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "56", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vreducepd",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "56", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vreducepd",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "56", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vreducepd",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "56", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vreducepd",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "56", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vreducepd",
		},
		['xmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "56", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "b64", "u8"},
			name = "vreducepd",
		},
		['ymm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "56", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "b64", "u8"},
			name = "vreducepd",
		},
		['zmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "56", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "b64", "u8"},
			name = "vreducepd",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "56", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vreducepd",
		},
	},
	['pmovsxbw'] = {
		['xmm,m64'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "20", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m64"},
			name = "pmovsxbw",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "20", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm[7:0]"},
			name = "pmovsxbw",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "20", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m32"},
			name = "pmovsxbw",
		},
	},
	['xlatb'] = {
		[''] = {
			func = function(op1) return "\xD7" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D7"},
			metadata = "ANY              Volatile",
			operands = {""},
			name = "xlatb",
		},
	},
	['fild'] = {
		['m64int'] = {
			func = function(op1) return "\xDF"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m64int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DF", "/5"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {"m64int"},
			name = "fild",
		},
		['m16int'] = {
			func = function(op1) return "\xDF"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m16int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m16int",
			opcode = {"DF", "/0"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {"m16int"},
			name = "fild",
		},
		['m32'] = {
			func = function(op1) return "\xDF"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DF", "/5"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fild",
		},
	},
	['vrcp14ss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "4D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			name = "vrcp14ss",
		},
		['xmm {kz},xmm[15:4],m64'] = {
			func = function(op1, op2, op3) return "\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "4D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m64"},
			name = "vrcp14ss",
		},
		['xmm {kz},xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "4D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			name = "vrcp14ss",
		},
	},
	['vpmovusdb'] = {
		['xmm[7:0],ymm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "11", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0]", "ymm"},
			name = "vpmovusdb",
		},
		['m128 {kz},zmm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "zmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "11", "/r"},
			metadata = "AVX512_F",
			operands = {"m128 {kz}", "zmm"},
			name = "vpmovusdb",
		},
		['xmm,zmm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "zmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "11", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "zmm"},
			name = "vpmovusdb",
		},
		['m64 {kz},ymm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "11", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "ymm"},
			name = "vpmovusdb",
		},
		['m32,ymm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "11", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "ymm"},
			name = "vpmovusdb",
		},
		['xmm[3:0],xmm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "11", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[3:0]", "xmm"},
			name = "vpmovusdb",
		},
		['m64 {kz},xmm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "11", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "xmm"},
			name = "vpmovusdb",
		},
		['m32,xmm'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "11", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "xmm"},
			name = "vpmovusdb",
		},
	},
	['comiss'] = {
		['xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\x0F\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"0F", "2F", "/r"},
			metadata = "SSE  OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[3:0]", "xmm[3:0]"},
			name = "comiss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\x0F\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"0F", "2F", "/r"},
			metadata = "SSE  OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[3:0]", "m32"},
			name = "comiss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\x0F\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"0F", "2F", "/r"},
			metadata = "SSE  OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[3:0]", "m64"},
			name = "comiss",
		},
	},
	['vrangess'] = {
		['xmm {kz},xmm[15:4],xmm[3:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x51"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]", "ib"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W0", "51", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]", "i8"},
			name = "vrangess",
		},
		['xmm {kz},xmm[15:4],m64,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x51"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W0", "51", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm {kz}", "xmm[15:4]", "m64", "ub {sae}"},
			name = "vrangess",
		},
		['xmm {kz},xmm[15:4],m32,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x51"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W0", "51", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm {kz}", "xmm[15:4]", "m32", "ub {sae}"},
			name = "vrangess",
		},
	},
	['vrangeps'] = {
		['xmm {kz},xmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "50", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "b32", "u8"},
			name = "vrangeps",
		},
		['zmm {kz},zmm,m512,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub {sae}"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "50", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "m512", "ub {sae}"},
			name = "vrangeps",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "50", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vrangeps",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "50", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vrangeps",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "50", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vrangeps",
		},
		['zmm {kz},zmm,b32,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b32", "ub {sae}"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "50", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "b32", "ub {sae}"},
			name = "vrangeps",
		},
		['ymm {kz},ymm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "50", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "b32", "u8"},
			name = "vrangeps",
		},
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "50", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vrangeps",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "50", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vrangeps",
		},
	},
	['invlpg'] = {
		['m32'] = {
			func = function(op1) return "\x0F\x01"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "01", "/7"},
			metadata = "I486             Volatile PRIVILEGE=L0",
			operands = {"m32"},
			name = "invlpg",
		},
		['m64'] = {
			func = function(op1) return "\x0F\x01"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "01", "/7"},
			metadata = "I486             Volatile PRIVILEGE=L0",
			operands = {"m64"},
			name = "invlpg",
		},
	},
	['vrangepd'] = {
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "50", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vrangepd",
		},
		['ymm {kz},ymm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "50", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "b64", "u8"},
			name = "vrangepd",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "50", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vrangepd",
		},
		['xmm {kz},xmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "50", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "b64", "u8"},
			name = "vrangepd",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "50", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vrangepd",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "50", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vrangepd",
		},
		['zmm {kz},zmm,b64,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b64", "ub {sae}"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "50", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "b64", "ub {sae}"},
			name = "vrangepd",
		},
		['zmm {kz},zmm,m512,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub {sae}"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "50", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "m512", "ub {sae}"},
			name = "vrangepd",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x50"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "50", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vrangepd",
		},
	},
	['cmpsq'] = {
		[''] = {
			func = function() return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xA7" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<ds:zsi>, X:<es:zdi>",
			opcode = {"REX.W", "A7"},
			metadata = "X64 _Rep         OF=W SF=W ZF=W AF=W PF=W CF=W DF=R",
			operands = {},
			name = "cmpsq",
		},
	},
	['vpxorq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "EF", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpxorq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "EF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpxorq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "EF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpxorq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "EF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpxorq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "EF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpxorq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "EF", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpxorq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "EF", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpxorq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "EF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpxorq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "EF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpxorq",
		},
	},
	['vpxord'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "EF", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpxord",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "EF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpxord",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "EF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpxord",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "EF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpxord",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "EF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpxord",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "EF", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpxord",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "EF", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpxord",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "EF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpxord",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "EF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpxord",
		},
	},
	['vunpcklpd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "14", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vunpcklpd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vunpcklpd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vunpcklpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "14", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vunpcklpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "14", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vunpcklpd",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "14", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vunpcklpd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "14", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vunpcklpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "14", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vunpcklpd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vunpcklpd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "14", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vunpcklpd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vunpcklpd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vunpcklpd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vunpcklpd",
		},
	},
	['vpcmpgtw'] = {
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "65", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vpcmpgtw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "65", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpcmpgtw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "65", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpcmpgtw",
		},
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "65", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vpcmpgtw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "65", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpcmpgtw",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "65", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "m512"},
			name = "vpcmpgtw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "65", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpcmpgtw",
		},
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "65", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vpcmpgtw",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "65", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vpcmpgtw",
		},
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "65", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vpcmpgtw",
		},
	},
	['vpermilpd'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x0D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "0D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermilpd",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "05", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vpermilpd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x0D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "0D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermilpd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x0D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "0D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermilpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x0D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W0", "0D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpermilpd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x0D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "0D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpermilpd",
		},
		['zmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "05", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b64", "u8"},
			name = "vpermilpd",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.66.0F3A.W0", "05", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "i8"},
			name = "vpermilpd",
		},
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.66.0F3A.W0", "05", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "i8"},
			name = "vpermilpd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x0D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "0D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpermilpd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x0D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "0D", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpermilpd",
		},
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "05", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vpermilpd",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "05", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vpermilpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x0D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "0D", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vpermilpd",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x0D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "0D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpermilpd",
		},
		['ymm,m256,u8'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "m256", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.66.0F3A.W0", "05", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "m256", "u8"},
			name = "vpermilpd",
		},
		['xmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "05", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64", "u8"},
			name = "vpermilpd",
		},
		['ymm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "05", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b64", "u8"},
			name = "vpermilpd",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "05", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vpermilpd",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "05", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vpermilpd",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x0D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "0D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermilpd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x0D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "0D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermilpd",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.66.0F3A.W0", "05", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "m128", "u8"},
			name = "vpermilpd",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x05"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "05", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vpermilpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x0D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W0", "0D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpermilpd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x0D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "0D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermilpd",
		},
	},
	['vptestnmq'] = {
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.F3.0F38.W1", "27", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vptestnmq",
		},
		['k {k},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.F3.0F38.W1", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "b64"},
			name = "vptestnmq",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.F3.0F38.W1", "27", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "m512"},
			name = "vptestnmq",
		},
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.F3.0F38.W1", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vptestnmq",
		},
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.F3.0F38.W1", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vptestnmq",
		},
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.F3.0F38.W1", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vptestnmq",
		},
		['k {k},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.F3.0F38.W1", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "b64"},
			name = "vptestnmq",
		},
		['k {k},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.F3.0F38.W1", "27", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "b64"},
			name = "vptestnmq",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.F3.0F38.W1", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vptestnmq",
		},
	},
	['wbinvd'] = {
		[''] = {
			func = function(op1) return "\x0F\x09" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "09"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {""},
			name = "wbinvd",
		},
	},
	['vptestnmd'] = {
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.F3.0F38.W0", "27", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vptestnmd",
		},
		['k {k},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.F3.0F38.W0", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "b32"},
			name = "vptestnmd",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.F3.0F38.W0", "27", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "m512"},
			name = "vptestnmd",
		},
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.F3.0F38.W0", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vptestnmd",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.F3.0F38.W0", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vptestnmd",
		},
		['k {k},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.F3.0F38.W0", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "b32"},
			name = "vptestnmd",
		},
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.F3.0F38.W0", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vptestnmd",
		},
		['k {k},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.F3.0F38.W0", "27", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "b32"},
			name = "vptestnmd",
		},
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.F3.0F38.W0", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vptestnmd",
		},
	},
	['vptestnmb'] = {
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.F3.0F38.W0", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vptestnmb",
		},
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.F3.0F38.W0", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vptestnmb",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.F3.0F38.W0", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vptestnmb",
		},
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.F3.0F38.W0", "26", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vptestnmb",
		},
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.F3.0F38.W0", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vptestnmb",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.F3.0F38.W0", "26", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "m512"},
			name = "vptestnmb",
		},
	},
	['mwaitx'] = {
		[''] = {
			func = function() return "\x0F\x01\xFB" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:<eax>, R:<ecx>, R:<ebx>",
			opcode = {"0F", "01", "FB"},
			metadata = "MONITORX         Volatile",
			operands = {},
			name = "mwaitx",
		},
	},
	['vbroadcasti64x4'] = {
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-T4",
			has_relative = false,
			operands2 = "W:zmm {kz}, m256",
			opcode = {"EVEX.512.66.0F38.W1", "5B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m256"},
			name = "vbroadcasti64x4",
		},
	},
	['cvtpi2ps'] = {
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\x0F\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], mm/m32/m64",
			opcode = {"0F", "2A", "/r"},
			metadata = "SSE",
			operands = {"xmm[7:0]", "m64"},
			name = "cvtpi2ps",
		},
		['xmm[7:0],mm'] = {
			func = function(op1, op2) return "\x0F\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], mm/m32/m64",
			opcode = {"0F", "2A", "/r"},
			metadata = "SSE",
			operands = {"xmm[7:0]", "mm"},
			name = "cvtpi2ps",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\x0F\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], mm/m32/m64",
			opcode = {"0F", "2A", "/r"},
			metadata = "SSE",
			operands = {"xmm[7:0]", "m32"},
			name = "cvtpi2ps",
		},
	},
	['kandnw'] = {
		['k[1:0],k[1:0],k[1:0]'] = {
			func = function(op1, op2, op3) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[1:0]", "k[1:0]", "k[1:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[1:0], k[1:0], k[1:0]",
			opcode = {"VEX.NDS.L1.0F.W0", "42", "/r"},
			metadata = "AVX512_F",
			operands = {"k[1:0]", "k[1:0]", "k[1:0]"},
			name = "kandnw",
		},
	},
	['smsw'] = {
		['m16'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\x01"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r64/m16",
			opcode = {"REX.W", "0F", "01", "/4"},
			metadata = "X64 Volatile",
			operands = {"m16"},
			name = "smsw",
		},
		['r32'] = {
			func = function(op1) return "\x0F\x01"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r32/m16",
			opcode = {"0F", "01", "/4"},
			metadata = "ANY Volatile",
			operands = {"r32"},
			name = "smsw",
		},
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\x01"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r64/m16",
			opcode = {"REX.W", "0F", "01", "/4"},
			metadata = "X64 Volatile",
			operands = {"r64"},
			name = "smsw",
		},
		['r16'] = {
			func = function(op1) return "\x66\x0F\x01"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r16/m16",
			opcode = {"66", "0F", "01", "/4"},
			metadata = "ANY Volatile",
			operands = {"r16"},
			name = "smsw",
		},
	},
	['vpunpckhwd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "69", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpunpckhwd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "69", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpunpckhwd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "69", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpunpckhwd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "69", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpunpckhwd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "69", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpunpckhwd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "69", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpunpckhwd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "69", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpunpckhwd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "69", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpunpckhwd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "69", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpunpckhwd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "69", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpunpckhwd",
		},
	},
	['pabsd'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x38\x1E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "38", "1E", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m32"},
			name = "pabsd",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x38\x1E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "38", "1E", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m64"},
			name = "pabsd",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x38\x1E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "38", "1E", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "mm"},
			name = "pabsd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x1E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "1E", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "m128"},
			name = "pabsd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x1E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "1E", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "xmm"},
			name = "pabsd",
		},
	},
	['vpunpckhqdq'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "6D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpunpckhqdq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "6D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpunpckhqdq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "6D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpunpckhqdq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "6D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpunpckhqdq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "6D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpunpckhqdq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "6D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpunpckhqdq",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "6D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpunpckhqdq",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "6D", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpunpckhqdq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "6D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpunpckhqdq",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "6D", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpunpckhqdq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "6D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpunpckhqdq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "6D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpunpckhqdq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x6D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "6D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpunpckhqdq",
		},
	},
	['jnae'] = {
		['string'] = {
			func = function(op1) return "\x0F\x82"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"string"},
			encoding = "D",
			has_relative = false,
			operands2 = "rel32",
			opcode = {"0F", "82", "cd"},
			metadata = "ANY              Control=Branch CF=R",
			operands = {"string"},
			name = "jnae",
		},
	},
	['xsetbv'] = {
		[''] = {
			func = function() return "\x0F\x01\xD1" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:<edx>, R:<eax>, R:<ecx>",
			opcode = {"0F", "01", "D1"},
			metadata = "XSAVE            Volatile PRIVILEGE=L0 XCR=W",
			operands = {},
			name = "xsetbv",
		},
	},
	['vptestmd'] = {
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "27", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vptestmd",
		},
		['k {k},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "b32"},
			name = "vptestmd",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "27", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "m512"},
			name = "vptestmd",
		},
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vptestmd",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vptestmd",
		},
		['k {k},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "b32"},
			name = "vptestmd",
		},
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vptestmd",
		},
		['k {k},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "27", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "b32"},
			name = "vptestmd",
		},
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vptestmd",
		},
	},
	['subsd'] = {
		['xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "5C", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "xmm[7:0]"},
			name = "subsd",
		},
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\xF2\x0F\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "5C", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m64"},
			name = "subsd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\xF2\x0F\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "5C", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m32"},
			name = "subsd",
		},
	},
	['movnti'] = {
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xC3"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, r64",
			opcode = {"REX.W", "0F", "C3", "/r"},
			metadata = "SSE2 X64",
			operands = {"m32", "r64"},
			name = "movnti",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x0F\xC3"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, r32",
			opcode = {"0F", "C3", "/r"},
			metadata = "SSE2",
			operands = {"m64", "r32"},
			name = "movnti",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xC3"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, r64",
			opcode = {"REX.W", "0F", "C3", "/r"},
			metadata = "SSE2 X64",
			operands = {"m64", "r64"},
			name = "movnti",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x0F\xC3"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, r32",
			opcode = {"0F", "C3", "/r"},
			metadata = "SSE2",
			operands = {"m32", "r32"},
			name = "movnti",
		},
	},
	['movsq'] = {
		[''] = {
			func = function() return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xA5" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<es:zdi>, X:<ds:zsi>",
			opcode = {"REX.W", "A5"},
			metadata = "X64 _Rep         DF=R",
			operands = {},
			name = "movsq",
		},
	},
	['vfmadd132pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "98", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmadd132pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "98", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmadd132pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "98", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmadd132pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "98", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmadd132pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "98", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmadd132pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "98", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmadd132pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "98", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfmadd132pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "98", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmadd132pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "98", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfmadd132pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "98", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmadd132pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "98", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfmadd132pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "98", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmadd132pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "98", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmadd132pd",
		},
	},
	['vpsravw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "11", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsravw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "11", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsravw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "11", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsravw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "11", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsravw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "11", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsravw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "11", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsravw",
		},
	},
	['vpsravq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "46", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsravq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "46", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsravq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "46", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsravq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "46", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpsravq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "46", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpsravq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "46", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpsravq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "46", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsravq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "46", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsravq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "46", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsravq",
		},
	},
	['vpsraq'] = {
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W1", "72", "/4", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vpsraq",
		},
		['ymm {kz},ymm,m128'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.W1", "E2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m128"},
			name = "vpsraq",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W1", "72", "/4", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vpsraq",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W1", "72", "/4", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vpsraq",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W1", "72", "/4", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vpsraq",
		},
		['zmm {kz},zmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.W1", "E2", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "xmm"},
			name = "vpsraq",
		},
		['xmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b64", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W1", "72", "/4", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64", "u8"},
			name = "vpsraq",
		},
		['ymm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b64", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W1", "72", "/4", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b64", "u8"},
			name = "vpsraq",
		},
		['zmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b64", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W1", "72", "/4", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b64", "u8"},
			name = "vpsraq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.W1", "E2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsraq",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W1", "72", "/4", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vpsraq",
		},
		['zmm {kz},zmm,m128'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.W1", "E2", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m128"},
			name = "vpsraq",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W1", "72", "/4", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vpsraq",
		},
		['ymm {kz},ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.W1", "E2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "xmm"},
			name = "vpsraq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.W1", "E2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsraq",
		},
	},
	['vpsllvw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "12", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsllvw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "12", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsllvw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "12", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsllvw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "12", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsllvw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "12", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsllvw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "12", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsllvw",
		},
	},
	['vgatherpf0qps'] = {
		['m64z {k}'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64z {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C7", "/1"},
			metadata = "AVX512_PFI",
			operands = {"m64z {k}"},
			name = "vgatherpf0qps",
		},
		['vm32'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C7", "/1"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vgatherpf0qps",
		},
	},
	['rsqrtss'] = {
		['xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "52", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "xmm[3:0]"},
			name = "rsqrtss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "52", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m32"},
			name = "rsqrtss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "52", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m64"},
			name = "rsqrtss",
		},
	},
	['vpshrdw'] = {
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x72"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "72", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vpshrdw",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x72"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "72", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vpshrdw",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x72"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "72", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vpshrdw",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x72"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "72", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vpshrdw",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x72"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "72", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vpshrdw",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x72"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "72", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vpshrdw",
		},
	},
	['vpshrdvq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "73", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpshrdvq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "73", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpshrdvq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "73", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpshrdvq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "73", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpshrdvq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "73", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpshrdvq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "73", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpshrdvq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "73", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpshrdvq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "73", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpshrdvq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "73", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpshrdvq",
		},
	},
	['vpmovzxdq'] = {
		['zmm {kz},ymm'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "ymm"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256",
			opcode = {"EVEX.512.66.0F38.W0", "35", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "ymm"},
			name = "vpmovzxdq",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "35", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[7:0]"},
			name = "vpmovzxdq",
		},
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256",
			opcode = {"EVEX.512.66.0F38.W0", "35", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m256"},
			name = "vpmovzxdq",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "35", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m64"},
			name = "vpmovzxdq",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "35", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m32"},
			name = "vpmovzxdq",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128",
			opcode = {"EVEX.256.66.0F38.W0", "35", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vpmovzxdq",
		},
		['ymm {kz},xmm'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128",
			opcode = {"EVEX.256.66.0F38.W0", "35", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm"},
			name = "vpmovzxdq",
		},
		['ymm,m128'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.66.0F38.WIG", "35", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m128"},
			name = "vpmovzxdq",
		},
		['ymm,xmm'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.66.0F38.WIG", "35", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm"},
			name = "vpmovzxdq",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "35", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vpmovzxdq",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "35", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vpmovzxdq",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "35", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vpmovzxdq",
		},
	},
	['setns'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "99", "/r"},
			metadata = "ANY              SF=R",
			operands = {"m8"},
			name = "setns",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "99", "/r"},
			metadata = "ANY              SF=R",
			operands = {"r8"},
			name = "setns",
		},
	},
	['vcvtpd2qq'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "7B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vcvtpd2qq",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "7B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vcvtpd2qq",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "7B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vcvtpd2qq",
		},
		['zmm {kz},b64 {er}'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b64 {er}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.66.0F.W1", "7B", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "b64 {er}"},
			name = "vcvtpd2qq",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "7B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vcvtpd2qq",
		},
		['ymm {kz},b64'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "7B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "b64"},
			name = "vcvtpd2qq",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "7B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vcvtpd2qq",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.66.0F.W1", "7B", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm"},
			name = "vcvtpd2qq",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.66.0F.W1", "7B", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m512"},
			name = "vcvtpd2qq",
		},
	},
	['fldlg2'] = {
		[''] = {
			func = function(op1) return "\xD9\xEC" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "EC"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fldlg2",
		},
	},
	['lodsq'] = {
		[''] = {
			func = function() return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xAD" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:<rax>, X:<ds:zsi>",
			opcode = {"REX.W", "AD"},
			metadata = "X64 _Rep         DF=R",
			operands = {},
			name = "lodsq",
		},
	},
	['kandb'] = {
		['k[0],k[0],k[0]'] = {
			func = function(op1, op2, op3) return "\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[0]", "k[0]", "k[0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[0]  ,~k[0]  ,~k[0]",
			opcode = {"VEX.L1.66.0F.W0", "41", "/r"},
			metadata = "AVX512_DQ",
			operands = {"k[0]", "k[0]", "k[0]"},
			name = "kandb",
		},
	},
	['xsavec64'] = {
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xC7"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"REX.W", "0F", "C7", "/4"},
			metadata = "XSAVEC X64       Volatile XCR=R",
			operands = {"m32"},
			name = "xsavec64",
		},
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xC7"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"REX.W", "0F", "C7", "/4"},
			metadata = "XSAVEC X64       Volatile XCR=R",
			operands = {"m64"},
			name = "xsavec64",
		},
	},
	['vpshldvw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "70", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpshldvw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "70", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpshldvw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "70", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpshldvw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "70", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpshldvw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "70", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpshldvw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "70", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpshldvw",
		},
	},
	['vfixupimmss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x55"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]", "ib"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W0", "55", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]", "i8"},
			name = "vfixupimmss",
		},
		['xmm {kz},xmm[15:4],m64,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x55"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W0", "55", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m64", "ub {sae}"},
			name = "vfixupimmss",
		},
		['xmm {kz},xmm[15:4],m32,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x55"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W0", "55", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m32", "ub {sae}"},
			name = "vfixupimmss",
		},
	},
	['cvttps2dq'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xF3\x0F\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"F3", "0F", "5B", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "cvttps2dq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xF3\x0F\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"F3", "0F", "5B", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "cvttps2dq",
		},
	},
	['scasw'] = {
		[''] = {
			func = function() return "\x66\xAF" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:<ax>, X:<es:zdi>",
			opcode = {"66", "AF"},
			metadata = "ANY _Rep         OF=W SF=W ZF=W AF=W PF=W CF=W DF=R",
			operands = {},
			name = "scasw",
		},
	},
	['vpshldvd'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "71", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpshldvd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "71", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpshldvd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "71", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpshldvd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "71", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpshldvd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "71", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpshldvd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "71", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpshldvd",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "71", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpshldvd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "71", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpshldvd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "71", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpshldvd",
		},
	},
	['stc'] = {
		[''] = {
			func = function(op1) return "\xF9" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"F9"},
			metadata = "ANY              CF=1",
			operands = {""},
			name = "stc",
		},
	},
	['fxrstor64'] = {
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xAE"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m32"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"REX.W", "0F", "AE", "/1"},
			metadata = "FXSR X64         Volatile C0=W C1=W C2=W C3=W",
			operands = {"m32"},
			name = "fxrstor64",
		},
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xAE"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"REX.W", "0F", "AE", "/1"},
			metadata = "FXSR X64         Volatile C0=W C1=W C2=W C3=W",
			operands = {"m64"},
			name = "fxrstor64",
		},
	},
	['cvtps2pd'] = {
		['xmm,m64'] = {
			func = function(op1, op2) return "\x0F\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"0F", "5A", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m64"},
			name = "cvtps2pd",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x0F\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"0F", "5A", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm[7:0]"},
			name = "cvtps2pd",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x0F\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"0F", "5A", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m32"},
			name = "cvtps2pd",
		},
	},
	['vorps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.0F.W0", "56", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vorps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "56", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vorps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "56", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vorps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "56", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vorps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "56", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vorps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "56", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vorps",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.0F.W0", "56", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vorps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "56", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vorps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "56", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vorps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "56", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vorps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.0F.W0", "56", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vorps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "56", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vorps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "56", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vorps",
		},
	},
	['pf2id'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x1D" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "1D"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pf2id",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x1D" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "1D"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pf2id",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x1D" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "1D"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pf2id",
		},
	},
	['vpscatterdq'] = {
		['m64y {k},ymm'] = {
			func = function(op1, op2) return "\xA0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64y {k}", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, ymm",
			opcode = {"EVEX.256.66.0F38.W1", "A0", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64y {k}", "ymm"},
			name = "vpscatterdq",
		},
		['m64z {k},zmm'] = {
			func = function(op1, op2) return "\xA0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64z {k}", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64z {k}, zmm",
			opcode = {"EVEX.512.66.0F38.W1", "A0", "/r"},
			metadata = "AVX512_F",
			operands = {"m64z {k}", "zmm"},
			name = "vpscatterdq",
		},
		['vm32,xmm'] = {
			func = function(op1, op2) return "\xA0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, xmm",
			opcode = {"EVEX.128.66.0F38.W1", "A0", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"vm32", "xmm"},
			name = "vpscatterdq",
		},
		['m64x {k},xmm'] = {
			func = function(op1, op2) return "\xA0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64x {k}", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, xmm",
			opcode = {"EVEX.128.66.0F38.W1", "A0", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64x {k}", "xmm"},
			name = "vpscatterdq",
		},
		['vm32,zmm'] = {
			func = function(op1, op2) return "\xA0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64z {k}, zmm",
			opcode = {"EVEX.512.66.0F38.W1", "A0", "/r"},
			metadata = "AVX512_F",
			operands = {"vm32", "zmm"},
			name = "vpscatterdq",
		},
		['vm32,ymm'] = {
			func = function(op1, op2) return "\xA0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, ymm",
			opcode = {"EVEX.256.66.0F38.W1", "A0", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"vm32", "ymm"},
			name = "vpscatterdq",
		},
	},
	['insertps'] = {
		['xmm,xmm[3:0],i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x21"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm[3:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm[3:0]/m32/m64, ib/ub",
			opcode = {"66", "0F", "3A", "21", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm[3:0]", "i8"},
			name = "insertps",
		},
		['xmm,m32,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x21"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m32", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm[3:0]/m32/m64, ib/ub",
			opcode = {"66", "0F", "3A", "21", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "m32", "u8"},
			name = "insertps",
		},
		['xmm,m64,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x21"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m64", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm[3:0]/m32/m64, ib/ub",
			opcode = {"66", "0F", "3A", "21", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "m64", "u8"},
			name = "insertps",
		},
	},
	['sysexit64'] = {
		[''] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\x35" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"REX.W", "0F", "35"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {""},
			name = "sysexit64",
		},
	},
	['vpscatterdd'] = {
		['m64y {k},ymm'] = {
			func = function(op1, op2) return "\xA0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64y {k}", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, ymm",
			opcode = {"EVEX.256.66.0F38.W0", "A0", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64y {k}", "ymm"},
			name = "vpscatterdd",
		},
		['m64z {k},zmm'] = {
			func = function(op1, op2) return "\xA0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64z {k}", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64z {k}, zmm",
			opcode = {"EVEX.512.66.0F38.W0", "A0", "/r"},
			metadata = "AVX512_F",
			operands = {"m64z {k}", "zmm"},
			name = "vpscatterdd",
		},
		['vm32,xmm'] = {
			func = function(op1, op2) return "\xA0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, xmm",
			opcode = {"EVEX.128.66.0F38.W0", "A0", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"vm32", "xmm"},
			name = "vpscatterdd",
		},
		['m64x {k},xmm'] = {
			func = function(op1, op2) return "\xA0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64x {k}", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, xmm",
			opcode = {"EVEX.128.66.0F38.W0", "A0", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64x {k}", "xmm"},
			name = "vpscatterdd",
		},
		['vm32,zmm'] = {
			func = function(op1, op2) return "\xA0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64z {k}, zmm",
			opcode = {"EVEX.512.66.0F38.W0", "A0", "/r"},
			metadata = "AVX512_F",
			operands = {"vm32", "zmm"},
			name = "vpscatterdd",
		},
		['vm32,ymm'] = {
			func = function(op1, op2) return "\xA0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, ymm",
			opcode = {"EVEX.256.66.0F38.W0", "A0", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"vm32", "ymm"},
			name = "vpscatterdd",
		},
	},
	['movupd'] = {
		['m128,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"66", "0F", "11", "/r"},
			metadata = "SSE2",
			operands = {"m128", "xmm"},
			name = "movupd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"66", "0F", "10", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "movupd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"66", "0F", "11", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "movupd",
		},
	},
	['vfmadd213ss'] = {
		['xmm[3:0] {kz},xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xA9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "A9", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			name = "vfmadd213ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xA9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "A9", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			name = "vfmadd213ss",
		},
		['xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3) return "\xA9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "A9", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfmadd213ss",
		},
		['xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xA9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "A9", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfmadd213ss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xA9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "A9", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfmadd213ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xA9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "A9", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			name = "vfmadd213ss",
		},
	},
	['minpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "5D", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "minpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "5D", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "minpd",
		},
	},
	['vpcmpeqw'] = {
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "75", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vpcmpeqw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "75", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpcmpeqw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "75", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpcmpeqw",
		},
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "75", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vpcmpeqw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "75", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpcmpeqw",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "75", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "m512"},
			name = "vpcmpeqw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "75", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpcmpeqw",
		},
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "75", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vpcmpeqw",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "75", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vpcmpeqw",
		},
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "75", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vpcmpeqw",
		},
	},
	['vblendps'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x0C"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.WIG", "0C", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vblendps",
		},
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x0C"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.WIG", "0C", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vblendps",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x0C"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.WIG", "0C", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vblendps",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x0C"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.WIG", "0C", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vblendps",
		},
	},
	['vprorq'] = {
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W1", "72", "/0", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vprorq",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W1", "72", "/0", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vprorq",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W1", "72", "/0", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vprorq",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W1", "72", "/0", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vprorq",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W1", "72", "/0", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vprorq",
		},
		['xmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b64", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W1", "72", "/0", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64", "u8"},
			name = "vprorq",
		},
		['ymm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b64", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W1", "72", "/0", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b64", "u8"},
			name = "vprorq",
		},
		['zmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b64", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W1", "72", "/0", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b64", "u8"},
			name = "vprorq",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W1", "72", "/0", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vprorq",
		},
	},
	['vbroadcastf32x4'] = {
		['zmm {kz},m128'] = {
			func = function(op1, op2) return "\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m128"},
			encoding = "RM-T4",
			has_relative = false,
			operands2 = "W:zmm {kz}, m128",
			opcode = {"EVEX.512.66.0F38.W0", "1A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m128"},
			name = "vbroadcastf32x4",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-T4",
			has_relative = false,
			operands2 = "W:ymm {kz}, m128",
			opcode = {"EVEX.256.66.0F38.W0", "1A", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "m128"},
			name = "vbroadcastf32x4",
		},
	},
	['vprolvq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "15", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vprolvq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vprolvq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vprolvq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vprolvq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vprolvq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "15", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vprolvq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "15", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vprolvq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vprolvq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vprolvq",
		},
	},
	['clgi'] = {
		[''] = {
			func = function(op1) return "\x0F\x01\xDD" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "01", "DD"},
			metadata = "SVM              PRIVILEGE=L0",
			operands = {""},
			name = "clgi",
		},
	},
	['vcompressps'] = {
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x8A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F38.W0", "8A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vcompressps",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x8A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F38.W0", "8A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm", "zmm"},
			name = "vcompressps",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x8A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F38.W0", "8A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm", "ymm"},
			name = "vcompressps",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x8A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F38.W0", "8A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vcompressps",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x8A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F38.W0", "8A", "/r"},
			metadata = "AVX512_F",
			operands = {"m512 {kz}", "zmm"},
			name = "vcompressps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x8A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F38.W0", "8A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "xmm"},
			name = "vcompressps",
		},
	},
	['vpscatterqq'] = {
		['m64y {k},ymm'] = {
			func = function(op1, op2) return "\xA1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64y {k}", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, ymm",
			opcode = {"EVEX.256.66.0F38.W1", "A1", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64y {k}", "ymm"},
			name = "vpscatterqq",
		},
		['m64z {k},zmm'] = {
			func = function(op1, op2) return "\xA1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64z {k}", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64z {k}, zmm",
			opcode = {"EVEX.512.66.0F38.W1", "A1", "/r"},
			metadata = "AVX512_F",
			operands = {"m64z {k}", "zmm"},
			name = "vpscatterqq",
		},
		['vm32,xmm'] = {
			func = function(op1, op2) return "\xA1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, xmm",
			opcode = {"EVEX.128.66.0F38.W1", "A1", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"vm32", "xmm"},
			name = "vpscatterqq",
		},
		['m64x {k},xmm'] = {
			func = function(op1, op2) return "\xA1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64x {k}", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, xmm",
			opcode = {"EVEX.128.66.0F38.W1", "A1", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64x {k}", "xmm"},
			name = "vpscatterqq",
		},
		['vm32,zmm'] = {
			func = function(op1, op2) return "\xA1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64z {k}, zmm",
			opcode = {"EVEX.512.66.0F38.W1", "A1", "/r"},
			metadata = "AVX512_F",
			operands = {"vm32", "zmm"},
			name = "vpscatterqq",
		},
		['vm32,ymm'] = {
			func = function(op1, op2) return "\xA1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, ymm",
			opcode = {"EVEX.256.66.0F38.W1", "A1", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"vm32", "ymm"},
			name = "vpscatterqq",
		},
	},
	['vrsqrt14ss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "4F", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			name = "vrsqrt14ss",
		},
		['xmm {kz},xmm[15:4],m64'] = {
			func = function(op1, op2, op3) return "\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "4F", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m64"},
			name = "vrsqrt14ss",
		},
		['xmm {kz},xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "4F", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			name = "vrsqrt14ss",
		},
	},
	['vpopcntw'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W1", "54", "/r"},
			metadata = "AVX512_BITALG-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vpopcntw",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W1", "54", "/r"},
			metadata = "AVX512_BITALG-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vpopcntw",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W1", "54", "/r"},
			metadata = "AVX512_BITALG-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vpopcntw",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W1", "54", "/r"},
			metadata = "AVX512_BITALG",
			operands = {"zmm {kz}", "m512"},
			name = "vpopcntw",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W1", "54", "/r"},
			metadata = "AVX512_BITALG-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vpopcntw",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W1", "54", "/r"},
			metadata = "AVX512_BITALG",
			operands = {"zmm {kz}", "zmm"},
			name = "vpopcntw",
		},
	},
	['vpopcntd'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vpopcntd",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vpopcntd",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vpopcntd",
		},
		['zmm {kz},b32'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W0", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ",
			operands = {"zmm {kz}", "b32"},
			name = "vpopcntd",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vpopcntd",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vpopcntd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W0", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ",
			operands = {"zmm {kz}", "zmm"},
			name = "vpopcntd",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vpopcntd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W0", "55", "/r"},
			metadata = "AVX512_VPOPCNTDQ",
			operands = {"zmm {kz}", "m512"},
			name = "vpopcntd",
		},
	},
	['vinserti32x4'] = {
		['zmm {kz},zmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x38"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "xmm", "ib"},
			encoding = "RVMI-T4",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "38", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "xmm", "i8"},
			name = "vinserti32x4",
		},
		['ymm {kz},ymm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x38"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "xmm", "ib"},
			encoding = "RVMI-T4",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "38", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "xmm", "i8"},
			name = "vinserti32x4",
		},
		['zmm {kz},zmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x38"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m128", "ub"},
			encoding = "RVMI-T4",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "38", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m128", "u8"},
			name = "vinserti32x4",
		},
		['ymm {kz},ymm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x38"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m128", "ub"},
			encoding = "RVMI-T4",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "38", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m128", "u8"},
			name = "vinserti32x4",
		},
	},
	['vpopcntb'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W0", "54", "/r"},
			metadata = "AVX512_BITALG-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vpopcntb",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W0", "54", "/r"},
			metadata = "AVX512_BITALG-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vpopcntb",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W0", "54", "/r"},
			metadata = "AVX512_BITALG-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vpopcntb",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W0", "54", "/r"},
			metadata = "AVX512_BITALG",
			operands = {"zmm {kz}", "m512"},
			name = "vpopcntb",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W0", "54", "/r"},
			metadata = "AVX512_BITALG-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vpopcntb",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W0", "54", "/r"},
			metadata = "AVX512_BITALG",
			operands = {"zmm {kz}", "zmm"},
			name = "vpopcntb",
		},
	},
	['vpmultishiftqb'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x83"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "83", "/r"},
			metadata = "AVX512_VBMI",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmultishiftqb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x83"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "83", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmultishiftqb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x83"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "83", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmultishiftqb",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x83"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "83", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpmultishiftqb",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x83"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "83", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpmultishiftqb",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x83"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "83", "/r"},
			metadata = "AVX512_VBMI",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpmultishiftqb",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x83"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "83", "/r"},
			metadata = "AVX512_VBMI",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmultishiftqb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x83"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "83", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmultishiftqb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x83"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "83", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmultishiftqb",
		},
	},
	['movzx'] = {
		['r64,m16'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r16/m16",
			opcode = {"REX.W", "0F", "B7", "/r"},
			metadata = "X64",
			operands = {"r64", "m16"},
			name = "movzx",
		},
		['r32,m16'] = {
			func = function(op1, op2) return "\x0F\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r16/m16",
			opcode = {"0F", "B7", "/r"},
			metadata = "ANY",
			operands = {"r32", "m16"},
			name = "movzx",
		},
		['r64,r16'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r16/m16",
			opcode = {"REX.W", "0F", "B7", "/r"},
			metadata = "X64",
			operands = {"r64", "r16"},
			name = "movzx",
		},
		['r64,m8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r8/m8",
			opcode = {"REX.W", "0F", "B6", "/r"},
			metadata = "X64",
			operands = {"r64", "m8"},
			name = "movzx",
		},
		['r32,m8'] = {
			func = function(op1, op2) return "\x0F\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r8/m8",
			opcode = {"0F", "B6", "/r"},
			metadata = "ANY",
			operands = {"r32", "m8"},
			name = "movzx",
		},
		['r32,r16'] = {
			func = function(op1, op2) return "\x0F\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r16/m16",
			opcode = {"0F", "B7", "/r"},
			metadata = "ANY",
			operands = {"r32", "r16"},
			name = "movzx",
		},
		['r16,r8'] = {
			func = function(op1, op2) return "\x66\x0F\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, r8/m8",
			opcode = {"66", "0F", "B6", "/r"},
			metadata = "ANY",
			operands = {"r16", "r8"},
			name = "movzx",
		},
		['r64,r8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r8/m8",
			opcode = {"REX.W", "0F", "B6", "/r"},
			metadata = "X64",
			operands = {"r64", "r8"},
			name = "movzx",
		},
		['r16,m8'] = {
			func = function(op1, op2) return "\x66\x0F\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, r8/m8",
			opcode = {"66", "0F", "B6", "/r"},
			metadata = "ANY",
			operands = {"r16", "m8"},
			name = "movzx",
		},
		['r32,r8'] = {
			func = function(op1, op2) return "\x0F\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r8/m8",
			opcode = {"0F", "B6", "/r"},
			metadata = "ANY",
			operands = {"r32", "r8"},
			name = "movzx",
		},
	},
	['vcvtss2sd'] = {
		['xmm,xmm[15:8],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "5A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "xmm[3:0]"},
			name = "vcvtss2sd",
		},
		['xmm {kz},xmm[15:8],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "5A", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[3:0]"},
			name = "vcvtss2sd",
		},
		['xmm {kz},xmm[15:8],m64 {sae}'] = {
			func = function(op1, op2, op3) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64 {sae}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "5A", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m64 {sae}"},
			name = "vcvtss2sd",
		},
		['xmm,xmm[15:8],m64'] = {
			func = function(op1, op2, op3) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "5A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m64"},
			name = "vcvtss2sd",
		},
		['xmm,xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "5A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m32"},
			name = "vcvtss2sd",
		},
		['xmm {kz},xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "5A", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			name = "vcvtss2sd",
		},
	},
	['jne'] = {
		['i8'] = {
			func = function(op1) return "\x75"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"75", "cb"},
			metadata = "ANY              Control=Branch ZF=R",
			operands = {"string"},
			name = "jne",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x85"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "85", "cw"},
			metadata = "X86              Control=Branch ZF=R",
			operands = {"string"},
			name = "jne",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x85"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "85", "cd"},
			metadata = "ANY              Control=Branch ZF=R",
			operands = {"string"},
			name = "jne",
		},
		['string'] = {
			func = function(op1) return "\x0F\x85"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "85", "cd"},
			metadata = "ANY              Control=Branch ZF=R",
			operands = {"string"},
			name = "jne",
		},
	},
	['cmpxchg'] = {
		['r8,r8'] = {
			func = function(op1, op2) return "\x0F\xB0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r8/m8, r8, <al>",
			opcode = {"0F", "B0", "/r"},
			metadata = "I486             _XLock Volatile OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "r8"},
			name = "cmpxchg",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\xB1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32, <eax>",
			opcode = {"0F", "B1", "/r"},
			metadata = "I486             _XLock Volatile OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "r32"},
			name = "cmpxchg",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xB1"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64, <rax>",
			opcode = {"REX.W", "0F", "B1", "/r"},
			metadata = "I486 X64         _XLock Volatile OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "r64"},
			name = "cmpxchg",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x0F\xB1"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32, <eax>",
			opcode = {"0F", "B1", "/r"},
			metadata = "I486             _XLock Volatile OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "r32"},
			name = "cmpxchg",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x0F\xB1"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32, <eax>",
			opcode = {"0F", "B1", "/r"},
			metadata = "I486             _XLock Volatile OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "r32"},
			name = "cmpxchg",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\xB1"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16, <ax>",
			opcode = {"66", "0F", "B1", "/r"},
			metadata = "I486             _XLock Volatile OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "r16"},
			name = "cmpxchg",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xB1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64, <rax>",
			opcode = {"REX.W", "0F", "B1", "/r"},
			metadata = "I486 X64         _XLock Volatile OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "r64"},
			name = "cmpxchg",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xB1"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64, <rax>",
			opcode = {"REX.W", "0F", "B1", "/r"},
			metadata = "I486 X64         _XLock Volatile OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "r64"},
			name = "cmpxchg",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\xB1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16, <ax>",
			opcode = {"66", "0F", "B1", "/r"},
			metadata = "I486             _XLock Volatile OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "r16"},
			name = "cmpxchg",
		},
		['m8,r8'] = {
			func = function(op1, op2) return "\x0F\xB0"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r8/m8, r8, <al>",
			opcode = {"0F", "B0", "/r"},
			metadata = "I486             _XLock Volatile OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "r8"},
			name = "cmpxchg",
		},
	},
	['vfnmsub231ss'] = {
		['xmm[3:0] {kz},xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "X:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "BF", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			name = "vfnmsub231ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "X:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "BF", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			name = "vfnmsub231ss",
		},
		['xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3) return "\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "BF", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfnmsub231ss",
		},
		['xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "BF", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfnmsub231ss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "BF", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfnmsub231ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "X:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "BF", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			name = "vfnmsub231ss",
		},
	},
	['prefetcht0'] = {
		['m32'] = {
			func = function(op1) return "\x0F\x18"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "18", "/1"},
			metadata = "MMX2",
			operands = {"m32"},
			name = "prefetcht0",
		},
		['m64'] = {
			func = function(op1) return "\x0F\x18"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "18", "/1"},
			metadata = "MMX2",
			operands = {"m64"},
			name = "prefetcht0",
		},
	},
	['jnl'] = {
		['string'] = {
			func = function(op1) return "\x0F\x8D"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"string"},
			encoding = "D",
			has_relative = false,
			operands2 = "rel32",
			opcode = {"0F", "8D", "cd"},
			metadata = "ANY              Control=Branch SF=R OF=R",
			operands = {"string"},
			name = "jnl",
		},
	},
	['pf2iw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x1C" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "1C"},
			metadata = "3DNOW2",
			operands = {"mm", "m32"},
			name = "pf2iw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x1C" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "1C"},
			metadata = "3DNOW2",
			operands = {"mm", "m64"},
			name = "pf2iw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x1C" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "1C"},
			metadata = "3DNOW2",
			operands = {"mm", "mm"},
			name = "pf2iw",
		},
	},
	['vpmovusqw'] = {
		['xmm[7:0],ymm'] = {
			func = function(op1, op2) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0]", "ymm"},
			name = "vpmovusqw",
		},
		['m128 {kz},zmm'] = {
			func = function(op1, op2) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "zmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "14", "/r"},
			metadata = "AVX512_F",
			operands = {"m128 {kz}", "zmm"},
			name = "vpmovusqw",
		},
		['xmm,zmm'] = {
			func = function(op1, op2) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "zmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "14", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "zmm"},
			name = "vpmovusqw",
		},
		['m64 {kz},ymm'] = {
			func = function(op1, op2) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "ymm"},
			name = "vpmovusqw",
		},
		['m32,ymm'] = {
			func = function(op1, op2) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "ymm"},
			name = "vpmovusqw",
		},
		['xmm[3:0],xmm'] = {
			func = function(op1, op2) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[3:0]", "xmm"},
			name = "vpmovusqw",
		},
		['m64 {kz},xmm'] = {
			func = function(op1, op2) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "xmm"},
			name = "vpmovusqw",
		},
		['m32,xmm'] = {
			func = function(op1, op2) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "xmm"},
			name = "vpmovusqw",
		},
	},
	['vpshuflw'] = {
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "RMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128, ib/ub",
			opcode = {"EVEX.128.F2.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vpshuflw",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "RMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256, ib/ub",
			opcode = {"EVEX.256.F2.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vpshuflw",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "RMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512, ib/ub",
			opcode = {"EVEX.512.F2.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vpshuflw",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "RMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128, ib/ub",
			opcode = {"EVEX.128.F2.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vpshuflw",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "RMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256, ib/ub",
			opcode = {"EVEX.256.F2.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vpshuflw",
		},
		['ymm,m256,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "m256", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.F2.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "m256", "u8"},
			name = "vpshuflw",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.F2.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "m128", "u8"},
			name = "vpshuflw",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.F2.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "i8"},
			name = "vpshuflw",
		},
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.F2.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "i8"},
			name = "vpshuflw",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "RMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512, ib/ub",
			opcode = {"EVEX.512.F2.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vpshuflw",
		},
	},
	['pfrcpit2'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xB6" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "B6"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pfrcpit2",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xB6" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "B6"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pfrcpit2",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xB6" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "B6"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pfrcpit2",
		},
	},
	['vfmsubss'] = {
		['xmm[3:0],xmm[3:0],m32,xmm[3:0]'] = {
			func = function(op1, op2, op3, op4) return "\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32", "xmm[3:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64, xmm[3:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32", "xmm[3:0]"},
			name = "vfmsubss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3, op4) return "\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "6E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfmsubss",
		},
		['xmm[3:0],xmm[3:0],m64,xmm[3:0]'] = {
			func = function(op1, op2, op3, op4) return "\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64", "xmm[3:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64, xmm[3:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64", "xmm[3:0]"},
			name = "vfmsubss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3, op4) return "\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64, xmm[3:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfmsubss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3, op4) return "\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "6E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfmsubss",
		},
	},
	['vscalefss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "2D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			name = "vscalefss",
		},
		['xmm {kz},xmm[15:4],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "2D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m64 {er}"},
			name = "vscalefss",
		},
		['xmm {kz},xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "2D", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			name = "vscalefss",
		},
	},
	['cmovp'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4A", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r32", "m32"},
			name = "cmovp",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4A", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r32", "r32"},
			name = "cmovp",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4A", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r32", "m64"},
			name = "cmovp",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4A", "/r"},
			metadata = "CMOV X64         PF=R",
			operands = {"r64", "m64"},
			name = "cmovp",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4A", "/r"},
			metadata = "CMOV X64         PF=R",
			operands = {"r64", "m32"},
			name = "cmovp",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4A", "/r"},
			metadata = "CMOV X64         PF=R",
			operands = {"r64", "r64"},
			name = "cmovp",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4A", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r16", "r16"},
			name = "cmovp",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4A", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r16", "m16"},
			name = "cmovp",
		},
	},
	['vpmovsqw'] = {
		['xmm[7:0],ymm'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "24", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0]", "ymm"},
			name = "vpmovsqw",
		},
		['m128 {kz},zmm'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "zmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "24", "/r"},
			metadata = "AVX512_F",
			operands = {"m128 {kz}", "zmm"},
			name = "vpmovsqw",
		},
		['xmm,zmm'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "zmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "24", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "zmm"},
			name = "vpmovsqw",
		},
		['m64 {kz},ymm'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "24", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "ymm"},
			name = "vpmovsqw",
		},
		['m32,ymm'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "24", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "ymm"},
			name = "vpmovsqw",
		},
		['xmm[3:0],xmm'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "24", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[3:0]", "xmm"},
			name = "vpmovsqw",
		},
		['m64 {kz},xmm'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "24", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "xmm"},
			name = "vpmovsqw",
		},
		['m32,xmm'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "24", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "xmm"},
			name = "vpmovsqw",
		},
	},
	['vpmovsqd'] = {
		['xmm,ymm'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "25", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "ymm"},
			name = "vpmovsqd",
		},
		['xmm[7:0],xmm'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "25", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0]", "xmm"},
			name = "vpmovsqd",
		},
		['m256 {kz},zmm'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "25", "/r"},
			metadata = "AVX512_F",
			operands = {"m256 {kz}", "zmm"},
			name = "vpmovsqd",
		},
		['ymm,zmm'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "25", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm", "zmm"},
			name = "vpmovsqd",
		},
		['m128 {kz},ymm'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "25", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "ymm"},
			name = "vpmovsqd",
		},
		['m64 {kz},xmm'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "25", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "xmm"},
			name = "vpmovsqd",
		},
		['m32,xmm'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "25", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "xmm"},
			name = "vpmovsqd",
		},
	},
	['invvpid'] = {
		['r32,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x81"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r32, R:m128",
			opcode = {"66", "0F", "38", "81", "/r"},
			metadata = "VMX X86          PRIVILEGE=L0",
			operands = {"r32", "m128"},
			name = "invvpid",
		},
		['r64,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x81"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r64, R:m128",
			opcode = {"66", "0F", "38", "81", "/r"},
			metadata = "VMX X64          PRIVILEGE=L0",
			operands = {"r64", "m128"},
			name = "invvpid",
		},
	},
	['vpmovsdb'] = {
		['xmm[7:0],ymm'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "21", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0]", "ymm"},
			name = "vpmovsdb",
		},
		['m128 {kz},zmm'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "zmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "21", "/r"},
			metadata = "AVX512_F",
			operands = {"m128 {kz}", "zmm"},
			name = "vpmovsdb",
		},
		['xmm,zmm'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "zmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "21", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "zmm"},
			name = "vpmovsdb",
		},
		['m64 {kz},ymm'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "21", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "ymm"},
			name = "vpmovsdb",
		},
		['m32,ymm'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "21", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "ymm"},
			name = "vpmovsdb",
		},
		['xmm[3:0],xmm'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "21", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[3:0]", "xmm"},
			name = "vpmovsdb",
		},
		['m64 {kz},xmm'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "21", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "xmm"},
			name = "vpmovsdb",
		},
		['m32,xmm'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "21", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "xmm"},
			name = "vpmovsdb",
		},
	},
	['vpmovqw'] = {
		['xmm[7:0],ymm'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "34", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0]", "ymm"},
			name = "vpmovqw",
		},
		['m128 {kz},zmm'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "zmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "34", "/r"},
			metadata = "AVX512_F",
			operands = {"m128 {kz}", "zmm"},
			name = "vpmovqw",
		},
		['xmm,zmm'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "zmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "34", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "zmm"},
			name = "vpmovqw",
		},
		['m64 {kz},ymm'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "34", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "ymm"},
			name = "vpmovqw",
		},
		['m32,ymm'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "34", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "ymm"},
			name = "vpmovqw",
		},
		['xmm[3:0],xmm'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "34", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[3:0]", "xmm"},
			name = "vpmovqw",
		},
		['m64 {kz},xmm'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "34", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "xmm"},
			name = "vpmovqw",
		},
		['m32,xmm'] = {
			func = function(op1, op2) return "\x34"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "34", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "xmm"},
			name = "vpmovqw",
		},
	},
	['in'] = {
		['ax,i8'] = {
			func = function(op1, op2) return "\x66\xE5"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"ax", "ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "w:ax, ib/ub",
			opcode = {"66", "E5", "ib"},
			metadata = "ANY              Volatile",
			operands = {"ax", "i8"},
			name = "in",
		},
		['ax,u8'] = {
			func = function(op1, op2) return "\x66\xE5"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"ax", "ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "w:ax, ib/ub",
			opcode = {"66", "E5", "ib"},
			metadata = "ANY              Volatile",
			operands = {"ax", "u8"},
			name = "in",
		},
		['eax,u8'] = {
			func = function(op1, op2) return "\xE5"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"eax", "ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "W:eax, ib/ub",
			opcode = {"E5", "ib"},
			metadata = "ANY              Volatile",
			operands = {"eax", "u8"},
			name = "in",
		},
		['al,u8'] = {
			func = function(op1, op2) return "\xE4"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "w:al, ib/ub",
			opcode = {"E4", "ib"},
			metadata = "ANY              Volatile",
			operands = {"al", "u8"},
			name = "in",
		},
		['ax,dx'] = {
			func = function(op1, op2) return "\x66\xED" end,
			real_operands = {"ax", "dx"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "w:ax, dx",
			opcode = {"66", "ED"},
			metadata = "ANY              Volatile",
			operands = {"ax", "dx"},
			name = "in",
		},
		['al,dx'] = {
			func = function(op1, op2) return "\xEC" end,
			real_operands = {"al", "dx"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "w:al, dx",
			opcode = {"EC"},
			metadata = "ANY              Volatile",
			operands = {"al", "dx"},
			name = "in",
		},
		['eax,dx'] = {
			func = function(op1, op2) return "\xED" end,
			real_operands = {"eax", "dx"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:eax, dx",
			opcode = {"ED"},
			metadata = "ANY              Volatile",
			operands = {"eax", "dx"},
			name = "in",
		},
		['al,i8'] = {
			func = function(op1, op2) return "\xE4"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "w:al, ib/ub",
			opcode = {"E4", "ib"},
			metadata = "ANY              Volatile",
			operands = {"al", "i8"},
			name = "in",
		},
		['eax,i8'] = {
			func = function(op1, op2) return "\xE5"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"eax", "ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "W:eax, ib/ub",
			opcode = {"E5", "ib"},
			metadata = "ANY              Volatile",
			operands = {"eax", "i8"},
			name = "in",
		},
	},
	['sqrtss'] = {
		['xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "51", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "xmm[3:0]"},
			name = "sqrtss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "51", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m32"},
			name = "sqrtss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "51", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m64"},
			name = "sqrtss",
		},
	},
	['vpmovsxwq'] = {
		['zmm {kz},m128'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m128"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm/m128",
			opcode = {"EVEX.512.66.0F38.WIG", "24", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m128"},
			name = "vpmovsxwq",
		},
		['xmm,xmm[3:0]'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "24", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[3:0]"},
			name = "vpmovsxwq",
		},
		['zmm {kz},xmm'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "xmm"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm/m128",
			opcode = {"EVEX.512.66.0F38.WIG", "24", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "xmm"},
			name = "vpmovsxwq",
		},
		['ymm,m32'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[7:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "24", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m32"},
			name = "vpmovsxwq",
		},
		['ymm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[7:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "24", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm[7:0]"},
			name = "vpmovsxwq",
		},
		['xmm {kz},xmm[3:0]'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[3:0]"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "24", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[3:0]"},
			name = "vpmovsxwq",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "24", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m64"},
			name = "vpmovsxwq",
		},
		['ymm,m64'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[7:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "24", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m64"},
			name = "vpmovsxwq",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "24", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vpmovsxwq",
		},
		['ymm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm[7:0]"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "24", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm[7:0]"},
			name = "vpmovsxwq",
		},
		['ymm {kz},m64'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m64"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "24", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m64"},
			name = "vpmovsxwq",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "24", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vpmovsxwq",
		},
		['ymm {kz},m32'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m32"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "24", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m32"},
			name = "vpmovsxwq",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "24", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m32"},
			name = "vpmovsxwq",
		},
	},
	['movntss'] = {
		['m32,xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[3:0]",
			opcode = {"F3", "0F", "2B", "/r"},
			metadata = "SSE4A",
			operands = {"m32", "xmm[3:0]"},
			name = "movntss",
		},
		['m64,xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[3:0]",
			opcode = {"F3", "0F", "2B", "/r"},
			metadata = "SSE4A",
			operands = {"m64", "xmm[3:0]"},
			name = "movntss",
		},
	},
	['stosq'] = {
		[''] = {
			func = function() return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xAB" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<es:zdi>, R:<rax>",
			opcode = {"REX.W", "AB"},
			metadata = "X64 _Rep         DF=R",
			operands = {},
			name = "stosq",
		},
	},
	['vpminuq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "3B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpminuq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "3B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpminuq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "3B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpminuq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "3B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpminuq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "3B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpminuq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "3B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpminuq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "3B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpminuq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "3B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpminuq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "3B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpminuq",
		},
	},
	['pavgb'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "E0", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m32"},
			name = "pavgb",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "E0", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m64"},
			name = "pavgb",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "E0", "/r"},
			metadata = "MMX2",
			operands = {"mm", "mm"},
			name = "pavgb",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "E0", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pavgb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "E0", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pavgb",
		},
	},
	['vgf2p8affineqb'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xCE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "CE", "/r", "ib"},
			metadata = "AVX GFNI",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vgf2p8affineqb",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xCE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "CE", "/r", "ib"},
			metadata = "AVX GFNI",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vgf2p8affineqb",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xCE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "CE", "/r", "ib"},
			metadata = "AVX512_F-VL GFNI",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vgf2p8affineqb",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xCE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "CE", "/r", "ib"},
			metadata = "AVX512_F-VL GFNI",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vgf2p8affineqb",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xCE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "CE", "/r", "ib"},
			metadata = "AVX512_F-VL GFNI",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vgf2p8affineqb",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\xCE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "CE", "/r", "ib"},
			metadata = "AVX GFNI",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vgf2p8affineqb",
		},
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xCE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "CE", "/r", "ib"},
			metadata = "AVX GFNI",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vgf2p8affineqb",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\xCE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "CE", "/r", "ib"},
			metadata = "AVX512_F    GFNI",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vgf2p8affineqb",
		},
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xCE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "CE", "/r", "ib"},
			metadata = "AVX512_F    GFNI",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vgf2p8affineqb",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\xCE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "CE", "/r", "ib"},
			metadata = "AVX512_F-VL GFNI",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vgf2p8affineqb",
		},
	},
	['sqrtps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"0F", "51", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "sqrtps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"0F", "51", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "sqrtps",
		},
	},
	['vpmovm2d'] = {
		['zmm,k'] = {
			func = function(op1, op2) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:zmm, k",
			opcode = {"EVEX.512.F3.0F38.W0", "38", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm", "k"},
			name = "vpmovm2d",
		},
		['ymm,k'] = {
			func = function(op1, op2) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, k",
			opcode = {"EVEX.256.F3.0F38.W0", "38", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm", "k"},
			name = "vpmovm2d",
		},
		['xmm,k'] = {
			func = function(op1, op2) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, k",
			opcode = {"EVEX.128.F3.0F38.W0", "38", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm", "k"},
			name = "vpmovm2d",
		},
	},
	['vpunpcklwd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x61"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "61", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpunpcklwd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x61"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "61", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpunpcklwd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x61"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "61", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpunpcklwd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x61"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "61", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpunpcklwd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x61"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "61", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpunpcklwd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x61"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "61", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpunpcklwd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x61"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "61", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpunpcklwd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x61"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "61", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpunpcklwd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x61"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "61", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpunpcklwd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x61"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "61", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpunpcklwd",
		},
	},
	['vpmovm2b'] = {
		['zmm,k'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:zmm, k",
			opcode = {"EVEX.512.F3.0F38.W0", "28", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm", "k"},
			name = "vpmovm2b",
		},
		['ymm,k'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, k",
			opcode = {"EVEX.256.F3.0F38.W0", "28", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm", "k"},
			name = "vpmovm2b",
		},
		['xmm,k'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, k",
			opcode = {"EVEX.128.F3.0F38.W0", "28", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm", "k"},
			name = "vpmovm2b",
		},
	},
	['vrcpss'] = {
		['xmm,xmm[15:4],m64'] = {
			func = function(op1, op2, op3) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "53", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m64"},
			name = "vrcpss",
		},
		['xmm,xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "53", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			name = "vrcpss",
		},
		['xmm,xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "53", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m32"},
			name = "vrcpss",
		},
	},
	['vpmovdb'] = {
		['xmm[7:0],ymm'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "31", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0]", "ymm"},
			name = "vpmovdb",
		},
		['m128 {kz},zmm'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "zmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "31", "/r"},
			metadata = "AVX512_F",
			operands = {"m128 {kz}", "zmm"},
			name = "vpmovdb",
		},
		['xmm,zmm'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "zmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "31", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "zmm"},
			name = "vpmovdb",
		},
		['m64 {kz},ymm'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "31", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "ymm"},
			name = "vpmovdb",
		},
		['m32,ymm'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "ymm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "31", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "ymm"},
			name = "vpmovdb",
		},
		['xmm[3:0],xmm'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "31", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[3:0]", "xmm"},
			name = "vpmovdb",
		},
		['m64 {kz},xmm'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "31", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "xmm"},
			name = "vpmovdb",
		},
		['m32,xmm'] = {
			func = function(op1, op2) return "\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm"},
			encoding = "MR-QVM",
			has_relative = false,
			operands2 = "W:xmm[3:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "31", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "xmm"},
			name = "vpmovdb",
		},
	},
	['vpmacsswd'] = {
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x86"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "86", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vpmacsswd",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x86"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "86", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vpmacsswd",
		},
	},
	['vpmovq2m'] = {
		['k,zmm'] = {
			func = function(op1, op2) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k", "zmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k, zmm",
			opcode = {"EVEX.512.F3.0F38.W1", "39", "/r"},
			metadata = "AVX512_DQ",
			operands = {"k", "zmm"},
			name = "vpmovq2m",
		},
		['k,xmm'] = {
			func = function(op1, op2) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k, xmm",
			opcode = {"EVEX.128.F3.0F38.W1", "39", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"k", "xmm"},
			name = "vpmovq2m",
		},
		['k,ymm'] = {
			func = function(op1, op2) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k, ymm",
			opcode = {"EVEX.256.F3.0F38.W1", "39", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"k", "ymm"},
			name = "vpmovq2m",
		},
	},
	['vpminsq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "39", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpminsq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "39", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpminsq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "39", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpminsq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "39", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpminsq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "39", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpminsq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "39", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpminsq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "39", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpminsq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "39", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpminsq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "39", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpminsq",
		},
	},
	['vpermt2b'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "7D", "/r"},
			metadata = "AVX512_VBMI",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermt2b",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "7D", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermt2b",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "7D", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermt2b",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "7D", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermt2b",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "7D", "/r"},
			metadata = "AVX512_VBMI",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermt2b",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "7D", "/r"},
			metadata = "AVX512_VBMI-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermt2b",
		},
	},
	['vpmaxuq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "3F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmaxuq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "3F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmaxuq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "3F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmaxuq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "3F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpmaxuq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "3F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpmaxuq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "3F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpmaxuq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "3F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmaxuq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "3F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmaxuq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x3F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "3F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmaxuq",
		},
	},
	['vpmovw2m'] = {
		['k,zmm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k", "zmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k, zmm",
			opcode = {"EVEX.512.F3.0F38.W1", "29", "/r"},
			metadata = "AVX512_BW",
			operands = {"k", "zmm"},
			name = "vpmovw2m",
		},
		['k,xmm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k, xmm",
			opcode = {"EVEX.128.F3.0F38.W1", "29", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k", "xmm"},
			name = "vpmovw2m",
		},
		['k,ymm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k, ymm",
			opcode = {"EVEX.256.F3.0F38.W1", "29", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k", "ymm"},
			name = "vpmovw2m",
		},
	},
	['fcmovb'] = {
		['st(i)'] = {
			func = function(op1) return "\xDA" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"DA", "C0+i"},
			metadata = "FPU CMOV         C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fcmovb",
		},
	},
	['vpmadd52luq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xB4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "B4", "/r"},
			metadata = "AVX512_IFMA",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmadd52luq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xB4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "B4", "/r"},
			metadata = "AVX512_IFMA-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmadd52luq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xB4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "B4", "/r"},
			metadata = "AVX512_IFMA-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmadd52luq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xB4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "B4", "/r"},
			metadata = "AVX512_IFMA-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpmadd52luq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xB4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "B4", "/r"},
			metadata = "AVX512_IFMA-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpmadd52luq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\xB4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "B4", "/r"},
			metadata = "AVX512_IFMA",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpmadd52luq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xB4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "B4", "/r"},
			metadata = "AVX512_IFMA",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmadd52luq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xB4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "B4", "/r"},
			metadata = "AVX512_IFMA-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmadd52luq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xB4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "B4", "/r"},
			metadata = "AVX512_IFMA-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmadd52luq",
		},
	},
	['vplzcntd'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "44", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vplzcntd",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "44", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vplzcntd",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "44", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vplzcntd",
		},
		['zmm {kz},b32'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W0", "44", "/r"},
			metadata = "AVX512_CDI",
			operands = {"zmm {kz}", "b32"},
			name = "vplzcntd",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "44", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vplzcntd",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "44", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vplzcntd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W0", "44", "/r"},
			metadata = "AVX512_CDI",
			operands = {"zmm {kz}", "zmm"},
			name = "vplzcntd",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "44", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vplzcntd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W0", "44", "/r"},
			metadata = "AVX512_CDI",
			operands = {"zmm {kz}", "m512"},
			name = "vplzcntd",
		},
	},
	['vpexpandq'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x89"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W1", "89", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vpexpandq",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x89"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W1", "89", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vpexpandq",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x89"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W1", "89", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vpexpandq",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x89"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W1", "89", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vpexpandq",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x89"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W1", "89", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vpexpandq",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x89"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W1", "89", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vpexpandq",
		},
	},
	['vmulsd'] = {
		['xmm,xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "59", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			name = "vmulsd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "59", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			name = "vmulsd",
		},
		['xmm {kz},xmm[15:8],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "59", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m64 {er}"},
			name = "vmulsd",
		},
		['xmm,xmm[15:8],m64'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "59", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m64"},
			name = "vmulsd",
		},
		['xmm,xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "59", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m32"},
			name = "vmulsd",
		},
		['xmm {kz},xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "59", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			name = "vmulsd",
		},
	},
	['vmulps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.0F.W0", "59", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vmulps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vmulps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vmulps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vmulps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "59", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vmulps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "59", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vmulps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.0F.W0", "59", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vmulps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "59", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vmulps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vmulps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "59", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vmulps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.0F.W0", "59", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vmulps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vmulps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vmulps",
		},
	},
	['sal'] = {
		['m16,u8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "u8"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/4", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "u8"},
			name = "sal",
		},
		['m8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "1"},
			name = "sal",
		},
		['m32,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "u8"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/4", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "u8"},
			name = "sal",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "u8"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/4", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "u8"},
			name = "sal",
		},
		['r8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "cl"},
			name = "sal",
		},
		['r16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "cl"},
			name = "sal",
		},
		['m16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "cl"},
			name = "sal",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\xC1"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "i8"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib/ub",
			opcode = {"C1", "/4", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "i8"},
			name = "sal",
		},
		['r32,cl'] = {
			func = function(op1, op2) return "\xD3"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, cl",
			opcode = {"D3", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "cl"},
			name = "sal",
		},
		['r32,1'] = {
			func = function(op1, op2) return "\xD1"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, 1",
			opcode = {"D1", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "1"},
			name = "sal",
		},
		['m64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/4"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "cl"},
			name = "sal",
		},
		['m64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/4"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "1"},
			name = "sal",
		},
		['r16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "1"},
			name = "sal",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "i8"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/4", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "i8"},
			name = "sal",
		},
		['r64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/4"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "cl"},
			name = "sal",
		},
		['r64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/4"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "1"},
			name = "sal",
		},
		['m64,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "u8"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/4", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "u8"},
			name = "sal",
		},
		['m8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "cl"},
			name = "sal",
		},
		['m32,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/4"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "1"},
			name = "sal",
		},
		['r8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"r8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "1"},
			name = "sal",
		},
		['m32,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/4"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "cl"},
			name = "sal",
		},
		['m16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/4"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "1"},
			name = "sal",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "i8"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/4", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "i8"},
			name = "sal",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "i8"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/4", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "i8"},
			name = "sal",
		},
	},
	['vpermw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "8D", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "8D", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "8D", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "8D", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "8D", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "8D", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermw",
		},
	},
	['kandnd'] = {
		['k[3:0],k[3:0],k[3:0]'] = {
			func = function(op1, op2, op3) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[3:0]", "k[3:0]", "k[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[3:0], k[3:0], k[3:0]",
			opcode = {"VEX.L1.66.0F.W1", "42", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "k[3:0]", "k[3:0]"},
			name = "kandnd",
		},
	},
	['vsqrtss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "51", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			name = "vsqrtss",
		},
		['xmm,xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "51", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			name = "vsqrtss",
		},
		['xmm {kz},xmm[15:4],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "51", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m64 {er}"},
			name = "vsqrtss",
		},
		['xmm,xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "51", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m32"},
			name = "vsqrtss",
		},
		['xmm,xmm[15:4],m64'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "51", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m64"},
			name = "vsqrtss",
		},
		['xmm {kz},xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "51", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			name = "vsqrtss",
		},
	},
	['unpcklps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"0F", "14", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "unpcklps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"0F", "14", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "unpcklps",
		},
	},
	['vpsubb'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xF8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "F8", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsubb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "F8", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsubb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xF8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "F8", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsubb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xF8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "F8", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsubb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "F8", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsubb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xF8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "F8", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsubb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xF8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "F8", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsubb",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xF8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "F8", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsubb",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xF8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "F8", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsubb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xF8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "F8", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsubb",
		},
	},
	['vpermt2ps'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "7F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermt2ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpermt2ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermt2ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermt2ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpermt2ps",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "7F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpermt2ps",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "7F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermt2ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermt2ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermt2ps",
		},
	},
	['vpermt2d'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "7E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermt2d",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "7E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpermt2d",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "7E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermt2d",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "7E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermt2d",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "7E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpermt2d",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "7E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpermt2d",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "7E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermt2d",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "7E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermt2d",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "7E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermt2d",
		},
	},
	['unpcklpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "14", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "unpcklpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "14", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "unpcklpd",
		},
	},
	['unpckhpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "15", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "unpckhpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "15", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "unpckhpd",
		},
	},
	['vandpd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "54", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vandpd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "54", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vandpd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "54", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vandpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "54", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vandpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "54", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vandpd",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "54", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vandpd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "54", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vandpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "54", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vandpd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "54", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vandpd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "54", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vandpd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "54", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vandpd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "54", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vandpd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "54", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vandpd",
		},
	},
	['vpermi2q'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "76", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermi2q",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermi2q",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermi2q",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpermi2q",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpermi2q",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "76", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpermi2q",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "76", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermi2q",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermi2q",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "76", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermi2q",
		},
	},
	['vrsqrt14ps'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "4E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vrsqrt14ps",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "4E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vrsqrt14ps",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "4E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vrsqrt14ps",
		},
		['zmm {kz},b32'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W0", "4E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32"},
			name = "vrsqrt14ps",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "4E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vrsqrt14ps",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "4E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vrsqrt14ps",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W0", "4E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vrsqrt14ps",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "4E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vrsqrt14ps",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W0", "4E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vrsqrt14ps",
		},
	},
	['fstenv'] = {
		['m32'] = {
			func = function(op1) return "\x9B\xD9"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"9B", "D9", "/6"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {"m32"},
			name = "fstenv",
		},
		['m64'] = {
			func = function(op1) return "\x9B\xD9"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"9B", "D9", "/6"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {"m64"},
			name = "fstenv",
		},
	},
	['vshufi64x2'] = {
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x43"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "43", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vshufi64x2",
		},
		['ymm {kz},ymm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x43"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "43", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64", "u8"},
			name = "vshufi64x2",
		},
		['zmm {kz},zmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x43"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "43", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64", "u8"},
			name = "vshufi64x2",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x43"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "43", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vshufi64x2",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x43"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "43", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vshufi64x2",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x43"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "43", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vshufi64x2",
		},
	},
	['pmaxsb'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x3C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "3C", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "pmaxsb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x3C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "3C", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm"},
			name = "pmaxsb",
		},
	},
	['vscatterdps'] = {
		['m64y {k},ymm'] = {
			func = function(op1, op2) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64y {k}", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, ymm",
			opcode = {"EVEX.256.66.0F38.W0", "A2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64y {k}", "ymm"},
			name = "vscatterdps",
		},
		['m64z {k},zmm'] = {
			func = function(op1, op2) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64z {k}", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64z {k}, zmm",
			opcode = {"EVEX.512.66.0F38.W0", "A2", "/r"},
			metadata = "AVX512_F",
			operands = {"m64z {k}", "zmm"},
			name = "vscatterdps",
		},
		['vm32,xmm'] = {
			func = function(op1, op2) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, xmm",
			opcode = {"EVEX.128.66.0F38.W0", "A2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"vm32", "xmm"},
			name = "vscatterdps",
		},
		['m64x {k},xmm'] = {
			func = function(op1, op2) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64x {k}", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, xmm",
			opcode = {"EVEX.128.66.0F38.W0", "A2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64x {k}", "xmm"},
			name = "vscatterdps",
		},
		['vm32,zmm'] = {
			func = function(op1, op2) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64z {k}, zmm",
			opcode = {"EVEX.512.66.0F38.W0", "A2", "/r"},
			metadata = "AVX512_F",
			operands = {"vm32", "zmm"},
			name = "vscatterdps",
		},
		['vm32,ymm'] = {
			func = function(op1, op2) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, ymm",
			opcode = {"EVEX.256.66.0F38.W0", "A2", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"vm32", "ymm"},
			name = "vscatterdps",
		},
	},
	['fsub'] = {
		['st(0),st(i)'] = {
			func = function(op1, op2) return "\xD8" end,
			real_operands = {"st(0)", "st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(0), st(i)",
			opcode = {"D8", "E0+i"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"st(0)", "st(i)"},
			name = "fsub",
		},
		['st(i),st(0)'] = {
			func = function(op1, op2) return "\xDC" end,
			real_operands = {"st(i)", "st(0)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i), st(0)",
			opcode = {"DC", "E8+i"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"st(i)", "st(0)"},
			name = "fsub",
		},
		['m32'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DC", "/4"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fsub",
		},
		['m64fp'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m64fp"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DC", "/4"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m64fp"},
			name = "fsub",
		},
	},
	['vgetexpss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "43", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			name = "vgetexpss",
		},
		['xmm {kz},xmm[15:4],m64 {sae}'] = {
			func = function(op1, op2, op3) return "\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64 {sae}"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "43", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m64 {sae}"},
			name = "vgetexpss",
		},
		['xmm {kz},xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W0", "43", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			name = "vgetexpss",
		},
	},
	['movups'] = {
		['m128,xmm'] = {
			func = function(op1, op2) return "\x0F\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"0F", "11", "/r"},
			metadata = "SSE",
			operands = {"m128", "xmm"},
			name = "movups",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"0F", "10", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "movups",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"0F", "11", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "movups",
		},
	},
	['vpdpbusds'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "51", "/r"},
			metadata = "AVX512_VNNI",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpdpbusds",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "51", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpdpbusds",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "51", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpdpbusds",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "51", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpdpbusds",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "51", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpdpbusds",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "51", "/r"},
			metadata = "AVX512_VNNI",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpdpbusds",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "51", "/r"},
			metadata = "AVX512_VNNI",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpdpbusds",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "51", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpdpbusds",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "51", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpdpbusds",
		},
	},
	['punpckhwd'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "69", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "punpckhwd",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "69", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "punpckhwd",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "69", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "punpckhwd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "69", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "punpckhwd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x69"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "69", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "punpckhwd",
		},
	},
	['vpdpbusd'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "50", "/r"},
			metadata = "AVX512_VNNI",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpdpbusd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "50", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpdpbusd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "50", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpdpbusd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "50", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpdpbusd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "50", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpdpbusd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "50", "/r"},
			metadata = "AVX512_VNNI",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpdpbusd",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "50", "/r"},
			metadata = "AVX512_VNNI",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpdpbusd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "50", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpdpbusd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "50", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpdpbusd",
		},
	},
	['vpdpwssds'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "53", "/r"},
			metadata = "AVX512_VNNI",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpdpwssds",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "53", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpdpwssds",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "53", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpdpwssds",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "53", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpdpwssds",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "53", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpdpwssds",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "53", "/r"},
			metadata = "AVX512_VNNI",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpdpwssds",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "53", "/r"},
			metadata = "AVX512_VNNI",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpdpwssds",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "53", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpdpwssds",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "53", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpdpwssds",
		},
	},
	['mov'] = {
		['r64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC7"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "W:r64/m32/m64, id",
			opcode = {"REX.W", "C7", "/0", "id"},
			metadata = "X64 XRelease",
			operands = {"r64", "i32"},
			name = "mov",
		},
		['r64,i64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra)..string.char(0xB8 + x86_64.reginfo[op1.reg].index)..x86_64.encode_int("int64_t", op2) end,
			real_operands = {"r64", "iq"},
			encoding = "I",
			has_relative = false,
			operands2 = "W:r64, iq/uq",
			opcode = {"REX.W", "B8+r", "iq"},
			metadata = "X64",
			operands = {"r64", "i64"},
			name = "mov",
		},
		['m64,u32'] = {
			func = function(op1, op2) return "\xC7"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "W:r32/m32/m64, id/ud",
			opcode = {"C7", "/0", "id"},
			metadata = "ANY XRelease",
			operands = {"m64", "u32"},
			name = "mov",
		},
		['sreg,m16'] = {
			func = function(op1, op2) return "\x8E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"sreg", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:sreg, r16/m16",
			opcode = {"8E", "/r"},
			metadata = "ANY",
			operands = {"sreg", "m16"},
			name = "mov",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x89"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, r64",
			opcode = {"REX.W", "89", "/r"},
			metadata = "X64 XRelease",
			operands = {"m32", "r64"},
			name = "mov",
		},
		['sreg,r32'] = {
			func = function(op1, op2) return "\x8E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"sreg", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:sreg, r32",
			opcode = {"8E", "/r"},
			metadata = "ANY",
			operands = {"sreg", "r32"},
			name = "mov",
		},
		['m16,u16'] = {
			func = function(op1, op2) return "\x66\xC7"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"m16", "uw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "w:r16/m16, iw/uw",
			opcode = {"66", "C7", "/0", "iw"},
			metadata = "ANY XRelease",
			operands = {"m16", "u16"},
			name = "mov",
		},
		['r8,u8'] = {
			func = function(op1, op2) return string.char(0xB0 + x86_64.reginfo[op1.reg].index)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "w:r8, ib/ub",
			opcode = {"B0+r", "ib"},
			metadata = "ANY",
			operands = {"r8", "u8"},
			name = "mov",
		},
		['sreg,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x8E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"sreg", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:sreg, r64/m32/m64",
			opcode = {"REX.W", "8E", "/r"},
			metadata = "X64",
			operands = {"sreg", "r64"},
			name = "mov",
		},
		['r16,sreg'] = {
			func = function(op1, op2) return "\x8C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "sreg"},
			encoding = "MR",
			has_relative = false,
			operands2 = "w:r16/m16, sreg",
			opcode = {"8C", "/r"},
			metadata = "ANY",
			operands = {"r16", "sreg"},
			name = "mov",
		},
		['r64,dreg'] = {
			func = function(op1, op2) return "\x0F\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "dreg"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64, dreg",
			opcode = {"0F", "21", "/r"},
			metadata = "X64              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"r64", "dreg"},
			name = "mov",
		},
		['dreg,r32'] = {
			func = function(op1, op2) return "\x0F\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"dreg", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:dreg, r32",
			opcode = {"0F", "23", "/r"},
			metadata = "X86              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"dreg", "r32"},
			name = "mov",
		},
		['m32,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC7"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "W:r64/m32/m64, id",
			opcode = {"REX.W", "C7", "/0", "id"},
			metadata = "X64 XRelease",
			operands = {"m32", "i32"},
			name = "mov",
		},
		['rax,moff64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xA1" end,
			real_operands = {"rax", "moff64"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:rax, moff64",
			opcode = {"REX.W", "A1"},
			metadata = "X64",
			operands = {"rax", "moff64"},
			name = "mov",
		},
		['r32,dreg'] = {
			func = function(op1, op2) return "\x0F\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "dreg"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32, dreg",
			opcode = {"0F", "21", "/r"},
			metadata = "X86              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"r32", "dreg"},
			name = "mov",
		},
		['r8,m8'] = {
			func = function(op1, op2) return "\x8A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r8, r8/m8",
			opcode = {"8A", "/r"},
			metadata = "ANY",
			operands = {"r8", "m8"},
			name = "mov",
		},
		['creg,r32'] = {
			func = function(op1, op2) return "\x0F\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"creg", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:creg, r32",
			opcode = {"0F", "22", "/r"},
			metadata = "X86              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"creg", "r32"},
			name = "mov",
		},
		['dreg,r64'] = {
			func = function(op1, op2) return "\x0F\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"dreg", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:dreg, r64",
			opcode = {"0F", "23", "/r"},
			metadata = "X64              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"dreg", "r64"},
			name = "mov",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x89"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32/m32/m64, r32",
			opcode = {"89", "/r"},
			metadata = "ANY XRelease",
			operands = {"m32", "r32"},
			name = "mov",
		},
		['r32,u32'] = {
			func = function(op1, op2) return string.char(0xB8 + x86_64.reginfo[op1.reg].index)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r32", "ud"},
			encoding = "I",
			has_relative = false,
			operands2 = "W:r32, id/ud",
			opcode = {"B8+r", "id"},
			metadata = "ANY",
			operands = {"r32", "u32"},
			name = "mov",
		},
		['sreg,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x8E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"sreg", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:sreg, r64/m32/m64",
			opcode = {"REX.W", "8E", "/r"},
			metadata = "X64",
			operands = {"sreg", "m64"},
			name = "mov",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x89"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, r64",
			opcode = {"REX.W", "89", "/r"},
			metadata = "X64 XRelease",
			operands = {"r64", "r64"},
			name = "mov",
		},
		['creg,r64'] = {
			func = function(op1, op2) return "\x0F\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"creg", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:creg, r64",
			opcode = {"0F", "22", "/r"},
			metadata = "X64              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"creg", "r64"},
			name = "mov",
		},
		['r16,i16'] = {
			func = function(op1, op2) return "\x66"..string.char(0xB8 + x86_64.reginfo[op1.reg].index)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"r16", "iw"},
			encoding = "I",
			has_relative = false,
			operands2 = "w:r16, iw/uw",
			opcode = {"66", "B8+r", "iw"},
			metadata = "ANY",
			operands = {"r16", "i16"},
			name = "mov",
		},
		['r64,creg'] = {
			func = function(op1, op2) return "\x0F\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "creg"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64, creg",
			opcode = {"0F", "20", "/r"},
			metadata = "X64              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"r64", "creg"},
			name = "mov",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "8B", "/r"},
			metadata = "X64",
			operands = {"r64", "m32"},
			name = "mov",
		},
		['ax,moff16'] = {
			func = function(op1, op2) return "\x66\xA1" end,
			real_operands = {"ax", "moff16"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "w:ax, moff16",
			opcode = {"66", "A1"},
			metadata = "ANY",
			operands = {"ax", "moff16"},
			name = "mov",
		},
		['r8,r8'] = {
			func = function(op1, op2) return "\x88"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "w:r8/m8, r8",
			opcode = {"88", "/r"},
			metadata = "ANY XRelease",
			operands = {"r8", "r8"},
			name = "mov",
		},
		['moff64,rax'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xA3" end,
			real_operands = {"moff64", "rax"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:moff64, rax",
			opcode = {"REX.W", "A3"},
			metadata = "X64",
			operands = {"moff64", "rax"},
			name = "mov",
		},
		['m64,sreg'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x8C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64", "sreg"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, sreg",
			opcode = {"REX.W", "8C", "/r"},
			metadata = "X64",
			operands = {"m64", "sreg"},
			name = "mov",
		},
		['moff32,eax'] = {
			func = function(op1, op2) return "\xA3" end,
			real_operands = {"moff32", "eax"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:moff32, eax",
			opcode = {"A3"},
			metadata = "ANY",
			operands = {"moff32", "eax"},
			name = "mov",
		},
		['moff16,ax'] = {
			func = function(op1, op2) return "\x66\xA3" end,
			real_operands = {"moff16", "ax"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:moff16, ax",
			opcode = {"66", "A3"},
			metadata = "ANY",
			operands = {"moff16", "ax"},
			name = "mov",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x89"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32/m32/m64, r32",
			opcode = {"89", "/r"},
			metadata = "ANY XRelease",
			operands = {"m64", "r32"},
			name = "mov",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\xC6"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "w:r8/m8, ib/ub",
			opcode = {"C6", "/0", "ib"},
			metadata = "ANY XRelease",
			operands = {"m8", "u8"},
			name = "mov",
		},
		['m32,sreg'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x8C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "sreg"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, sreg",
			opcode = {"REX.W", "8C", "/r"},
			metadata = "X64",
			operands = {"m32", "sreg"},
			name = "mov",
		},
		['moff8,al'] = {
			func = function(op1, op2) return "\xA2" end,
			real_operands = {"moff8", "al"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:moff8, al",
			opcode = {"A2"},
			metadata = "ANY",
			operands = {"moff8", "al"},
			name = "mov",
		},
		['al,moff8'] = {
			func = function(op1, op2) return "\xA0" end,
			real_operands = {"al", "moff8"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "w:al, moff8",
			opcode = {"A0"},
			metadata = "ANY",
			operands = {"al", "moff8"},
			name = "mov",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"8B", "/r"},
			metadata = "ANY",
			operands = {"r32", "m64"},
			name = "mov",
		},
		['r32,i32'] = {
			func = function(op1, op2) return string.char(0xB8 + x86_64.reginfo[op1.reg].index)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r32", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "W:r32, id/ud",
			opcode = {"B8+r", "id"},
			metadata = "ANY",
			operands = {"r32", "i32"},
			name = "mov",
		},
		['eax,moff32'] = {
			func = function(op1, op2) return "\xA1" end,
			real_operands = {"eax", "moff32"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:eax, moff32",
			opcode = {"A1"},
			metadata = "ANY",
			operands = {"eax", "moff32"},
			name = "mov",
		},
		['r32,creg'] = {
			func = function(op1, op2) return "\x0F\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "creg"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32, creg",
			opcode = {"0F", "20", "/r"},
			metadata = "X86              OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {"r32", "creg"},
			name = "mov",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"8B", "/r"},
			metadata = "ANY",
			operands = {"r32", "m32"},
			name = "mov",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, r16/m16",
			opcode = {"66", "8B", "/r"},
			metadata = "ANY",
			operands = {"r16", "m16"},
			name = "mov",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "8B", "/r"},
			metadata = "X64",
			operands = {"r64", "m64"},
			name = "mov",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x89"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32/m32/m64, r32",
			opcode = {"89", "/r"},
			metadata = "ANY XRelease",
			operands = {"r32", "r32"},
			name = "mov",
		},
		['sreg,r16'] = {
			func = function(op1, op2) return "\x8E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"sreg", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:sreg, r16/m16",
			opcode = {"8E", "/r"},
			metadata = "ANY",
			operands = {"sreg", "r16"},
			name = "mov",
		},
		['r32,sreg'] = {
			func = function(op1, op2) return "\x8C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "sreg"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32, sreg",
			opcode = {"8C", "/r"},
			metadata = "ANY",
			operands = {"r32", "sreg"},
			name = "mov",
		},
		['m64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC7"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "W:r64/m32/m64, id",
			opcode = {"REX.W", "C7", "/0", "id"},
			metadata = "X64 XRelease",
			operands = {"m64", "i32"},
			name = "mov",
		},
		['r64,sreg'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x8C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "sreg"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, sreg",
			opcode = {"REX.W", "8C", "/r"},
			metadata = "X64",
			operands = {"r64", "sreg"},
			name = "mov",
		},
		['m16,sreg'] = {
			func = function(op1, op2) return "\x8C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m16", "sreg"},
			encoding = "MR",
			has_relative = false,
			operands2 = "w:r16/m16, sreg",
			opcode = {"8C", "/r"},
			metadata = "ANY",
			operands = {"m16", "sreg"},
			name = "mov",
		},
		['r8,i8'] = {
			func = function(op1, op2) return string.char(0xB0 + x86_64.reginfo[op1.reg].index)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "w:r8, ib/ub",
			opcode = {"B0+r", "ib"},
			metadata = "ANY",
			operands = {"r8", "i8"},
			name = "mov",
		},
		['m32,u32'] = {
			func = function(op1, op2) return "\xC7"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "W:r32/m32/m64, id/ud",
			opcode = {"C7", "/0", "id"},
			metadata = "ANY XRelease",
			operands = {"m32", "u32"},
			name = "mov",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x89"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, r64",
			opcode = {"REX.W", "89", "/r"},
			metadata = "X64 XRelease",
			operands = {"m64", "r64"},
			name = "mov",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x89"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "w:r16/m16, r16",
			opcode = {"66", "89", "/r"},
			metadata = "ANY XRelease",
			operands = {"r16", "r16"},
			name = "mov",
		},
		['m8,r8'] = {
			func = function(op1, op2) return "\x88"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "w:r8/m8, r8",
			opcode = {"88", "/r"},
			metadata = "ANY XRelease",
			operands = {"m8", "r8"},
			name = "mov",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x89"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "w:r16/m16, r16",
			opcode = {"66", "89", "/r"},
			metadata = "ANY XRelease",
			operands = {"m16", "r16"},
			name = "mov",
		},
		['sreg,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x8E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"sreg", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:sreg, r64/m32/m64",
			opcode = {"REX.W", "8E", "/r"},
			metadata = "X64",
			operands = {"sreg", "m32"},
			name = "mov",
		},
		['r16,u16'] = {
			func = function(op1, op2) return "\x66"..string.char(0xB8 + x86_64.reginfo[op1.reg].index)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"r16", "uw"},
			encoding = "I",
			has_relative = false,
			operands2 = "w:r16, iw/uw",
			opcode = {"66", "B8+r", "iw"},
			metadata = "ANY",
			operands = {"r16", "u16"},
			name = "mov",
		},
		['r64,u64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra)..string.char(0xB8 + x86_64.reginfo[op1.reg].index)..x86_64.encode_int("int64_t", op2) end,
			real_operands = {"r64", "uq"},
			encoding = "I",
			has_relative = false,
			operands2 = "W:r64, iq/uq",
			opcode = {"REX.W", "B8+r", "iq"},
			metadata = "X64",
			operands = {"r64", "u64"},
			name = "mov",
		},
	},
	['vpdpwssd'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "52", "/r"},
			metadata = "AVX512_VNNI",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpdpwssd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "52", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpdpwssd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "52", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpdpwssd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "52", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpdpwssd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "52", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpdpwssd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "52", "/r"},
			metadata = "AVX512_VNNI",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpdpwssd",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "52", "/r"},
			metadata = "AVX512_VNNI",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpdpwssd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "52", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpdpwssd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "52", "/r"},
			metadata = "AVX512_VNNI-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpdpwssd",
		},
	},
	['vpconflictq'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W1", "C4", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vpconflictq",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W1", "C4", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vpconflictq",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W1", "C4", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vpconflictq",
		},
		['zmm {kz},b32'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W1", "C4", "/r"},
			metadata = "AVX512_CDI",
			operands = {"zmm {kz}", "b32"},
			name = "vpconflictq",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W1", "C4", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vpconflictq",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W1", "C4", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vpconflictq",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W1", "C4", "/r"},
			metadata = "AVX512_CDI",
			operands = {"zmm {kz}", "zmm"},
			name = "vpconflictq",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W1", "C4", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vpconflictq",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W1", "C4", "/r"},
			metadata = "AVX512_CDI",
			operands = {"zmm {kz}", "m512"},
			name = "vpconflictq",
		},
	},
	['vpconflictd'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "C4", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vpconflictd",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "C4", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vpconflictd",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "C4", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vpconflictd",
		},
		['zmm {kz},b32'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W0", "C4", "/r"},
			metadata = "AVX512_CDI",
			operands = {"zmm {kz}", "b32"},
			name = "vpconflictd",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "C4", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vpconflictd",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "C4", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vpconflictd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W0", "C4", "/r"},
			metadata = "AVX512_CDI",
			operands = {"zmm {kz}", "zmm"},
			name = "vpconflictd",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "C4", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vpconflictd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32",
			opcode = {"EVEX.512.66.0F38.W0", "C4", "/r"},
			metadata = "AVX512_CDI",
			operands = {"zmm {kz}", "m512"},
			name = "vpconflictd",
		},
	},
	['vfmsubsd'] = {
		['xmm[7:0],xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3, op4) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "6F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfmsubsd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3, op4) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "6F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfmsubsd",
		},
		['xmm[7:0],xmm[7:0],m32,xmm[7:0]'] = {
			func = function(op1, op2, op3, op4) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32", "xmm[7:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64, xmm[7:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32", "xmm[7:0]"},
			name = "vfmsubsd",
		},
		['xmm[7:0],xmm[7:0],m64,xmm[7:0]'] = {
			func = function(op1, op2, op3, op4) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64", "xmm[7:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64, xmm[7:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64", "xmm[7:0]"},
			name = "vfmsubsd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3, op4) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64, xmm[7:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "6F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfmsubsd",
		},
	},
	['bndcu'] = {
		['bnd,r32'] = {
			func = function(op1, op2) return "\xF2\x0F\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:bnd, r32/m32/m64",
			opcode = {"F2", "0F", "1A", "/r"},
			metadata = "MPX X86",
			operands = {"bnd", "r32"},
			name = "bndcu",
		},
		['bnd,r64'] = {
			func = function(op1, op2) return "\xF2\x0F\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:bnd, r64/m32/m64",
			opcode = {"F2", "0F", "1A", "/r"},
			metadata = "MPX X64",
			operands = {"bnd", "r64"},
			name = "bndcu",
		},
		['bnd,m64'] = {
			func = function(op1, op2) return "\xF2\x0F\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:bnd, r64/m32/m64",
			opcode = {"F2", "0F", "1A", "/r"},
			metadata = "MPX X64",
			operands = {"bnd", "m64"},
			name = "bndcu",
		},
		['bnd,m32'] = {
			func = function(op1, op2) return "\xF2\x0F\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:bnd, r64/m32/m64",
			opcode = {"F2", "0F", "1A", "/r"},
			metadata = "MPX X64",
			operands = {"bnd", "m32"},
			name = "bndcu",
		},
	},
	['prefetchnta'] = {
		['m32'] = {
			func = function(op1) return "\x0F\x18"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "18", "/0"},
			metadata = "MMX2",
			operands = {"m32"},
			name = "prefetchnta",
		},
		['m64'] = {
			func = function(op1) return "\x0F\x18"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "18", "/0"},
			metadata = "MMX2",
			operands = {"m64"},
			name = "prefetchnta",
		},
	},
	['vfpclasspd'] = {
		['k {k},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "xmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "66", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"k {k}", "xmm", "i8"},
			name = "vfpclasspd",
		},
		['k {k},m256,u8'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "m256", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "66", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"k {k}", "m256", "u8"},
			name = "vfpclasspd",
		},
		['k {k},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "ymm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "66", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"k {k}", "ymm", "i8"},
			name = "vfpclasspd",
		},
		['k {k},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "zmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "66", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k {k}", "zmm", "i8"},
			name = "vfpclasspd",
		},
		['k {k},m128,u8'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "m128", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "66", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"k {k}", "m128", "u8"},
			name = "vfpclasspd",
		},
		['k {k},m512,u8'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "m512", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "66", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k {k}", "m512", "u8"},
			name = "vfpclasspd",
		},
		['k {k},b64,u8'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "66", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k {k}", "b64", "u8"},
			name = "vfpclasspd",
		},
	},
	['setnle'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9F", "/r"},
			metadata = "ANY              ZF=R SF=R OF=R",
			operands = {"m8"},
			name = "setnle",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9F", "/r"},
			metadata = "ANY              ZF=R SF=R OF=R",
			operands = {"r8"},
			name = "setnle",
		},
	},
	['cmc'] = {
		[''] = {
			func = function(op1) return "\xF5" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"F5"},
			metadata = "ANY              CF=X",
			operands = {""},
			name = "cmc",
		},
	},
	['seta'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "97", "/r"},
			metadata = "ANY              CF=R ZF=R",
			operands = {"m8"},
			name = "seta",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "97", "/r"},
			metadata = "ANY              CF=R ZF=R",
			operands = {"r8"},
			name = "seta",
		},
	},
	['rdfsbase'] = {
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF3\x0F\xAE"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r64",
			opcode = {"REX.W", "F3", "0F", "AE", "/0"},
			metadata = "FSGSBASE X64     Volatile",
			operands = {"r64"},
			name = "rdfsbase",
		},
		['r32'] = {
			func = function(op1) return "\xF3\x0F\xAE"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r32",
			opcode = {"F3", "0F", "AE", "/0"},
			metadata = "FSGSBASE X64     Volatile",
			operands = {"r32"},
			name = "rdfsbase",
		},
	},
	['vpshab'] = {
		['xmm,m128,xmm'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "98", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128", "xmm"},
			name = "vpshab",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"XOP.NDS.L0.P0.M09.W1", "98", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128"},
			name = "vpshab",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "98", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpshab",
		},
	},
	['das'] = {
		[''] = {
			func = function() return "\x2F" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "x:<ax>",
			opcode = {"2F"},
			metadata = "X86 Deprecated   OF=U SF=W ZF=W AF=W PF=W CF=W",
			operands = {},
			name = "das",
		},
	},
	['kandnb'] = {
		['k[0],k[0],k[0]'] = {
			func = function(op1, op2, op3) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[0]", "k[0]", "k[0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[0]  , k[0]  , k[0]",
			opcode = {"VEX.L1.66.0F.W0", "42", "/r"},
			metadata = "AVX512_DQ",
			operands = {"k[0]", "k[0]", "k[0]"},
			name = "kandnb",
		},
	},
	['sha1nexte'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x38\xC8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "xmm, xmm/m128",
			opcode = {"0F", "38", "C8", "/r"},
			metadata = "SHA",
			operands = {"xmm", "m128"},
			name = "sha1nexte",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x38\xC8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "xmm, xmm/m128",
			opcode = {"0F", "38", "C8", "/r"},
			metadata = "SHA",
			operands = {"xmm", "xmm"},
			name = "sha1nexte",
		},
	},
	['vpcompressb'] = {
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F38.W0", "63", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vpcompressb",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F38.W0", "63", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm", "zmm"},
			name = "vpcompressb",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F38.W0", "63", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm", "ymm"},
			name = "vpcompressb",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F38.W0", "63", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vpcompressb",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F38.W0", "63", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"m512 {kz}", "zmm"},
			name = "vpcompressb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F38.W0", "63", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm", "xmm"},
			name = "vpcompressb",
		},
	},
	['vmovhps'] = {
		['xmm,xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]", "m32"},
			encoding = "RVM-T2",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0], m32/m64",
			opcode = {"EVEX.NDS.128.0F.W0", "16", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm[7:0]", "m32"},
			name = "vmovhps",
		},
		['m64,xmm[15:8]'] = {
			func = function(op1, op2) return "\x17"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[15:8]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[15:8]",
			opcode = {"VEX.128.0F.WIG", "17", "/r"},
			metadata = "AVX",
			operands = {"m64", "xmm[15:8]"},
			name = "vmovhps",
		},
		['xmm,xmm[7:0],m64'] = {
			func = function(op1, op2, op3) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]", "m64"},
			encoding = "RVM-T2",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0], m32/m64",
			opcode = {"EVEX.NDS.128.0F.W0", "16", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm[7:0]", "m64"},
			name = "vmovhps",
		},
		['m32,xmm[15:8]'] = {
			func = function(op1, op2) return "\x17"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[15:8]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[15:8]",
			opcode = {"VEX.128.0F.WIG", "17", "/r"},
			metadata = "AVX",
			operands = {"m32", "xmm[15:8]"},
			name = "vmovhps",
		},
	},
	['jpe'] = {
		['string'] = {
			func = function(op1) return "\x0F\x8A"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"string"},
			encoding = "D",
			has_relative = false,
			operands2 = "rel32",
			opcode = {"0F", "8A", "cd"},
			metadata = "ANY              Control=Branch PF=R",
			operands = {"string"},
			name = "jpe",
		},
	},
	['vmovdqu32'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.F3.0F.W0", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vmovdqu32",
		},
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F.W0", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vmovdqu32",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F.W0", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm", "ymm"},
			name = "vmovdqu32",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F.W0", "7F", "/r"},
			metadata = "AVX512_F",
			operands = {"m512 {kz}", "zmm"},
			name = "vmovdqu32",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.F3.0F.W0", "6F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vmovdqu32",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.F3.0F.W0", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vmovdqu32",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F.W0", "7F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm", "zmm"},
			name = "vmovdqu32",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.F3.0F.W0", "6F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vmovdqu32",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.F3.0F.W0", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vmovdqu32",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F.W0", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vmovdqu32",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.F3.0F.W0", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vmovdqu32",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F.W0", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "xmm"},
			name = "vmovdqu32",
		},
	},
	['movsx'] = {
		['r64,m16'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r16/m16",
			opcode = {"REX.W", "0F", "BF", "/r"},
			metadata = "X64",
			operands = {"r64", "m16"},
			name = "movsx",
		},
		['r32,m16'] = {
			func = function(op1, op2) return "\x0F\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r16/m16",
			opcode = {"0F", "BF", "/r"},
			metadata = "ANY",
			operands = {"r32", "m16"},
			name = "movsx",
		},
		['r64,r16'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r16/m16",
			opcode = {"REX.W", "0F", "BF", "/r"},
			metadata = "X64",
			operands = {"r64", "r16"},
			name = "movsx",
		},
		['r64,m8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r8/m8",
			opcode = {"REX.W", "0F", "BE", "/r"},
			metadata = "X64",
			operands = {"r64", "m8"},
			name = "movsx",
		},
		['r32,m8'] = {
			func = function(op1, op2) return "\x0F\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r8/m8",
			opcode = {"0F", "BE", "/r"},
			metadata = "ANY",
			operands = {"r32", "m8"},
			name = "movsx",
		},
		['r32,r16'] = {
			func = function(op1, op2) return "\x0F\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r16/m16",
			opcode = {"0F", "BF", "/r"},
			metadata = "ANY",
			operands = {"r32", "r16"},
			name = "movsx",
		},
		['r16,r8'] = {
			func = function(op1, op2) return "\x66\x0F\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, r8/m8",
			opcode = {"66", "0F", "BE", "/r"},
			metadata = "ANY",
			operands = {"r16", "r8"},
			name = "movsx",
		},
		['r64,r8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r8/m8",
			opcode = {"REX.W", "0F", "BE", "/r"},
			metadata = "X64",
			operands = {"r64", "r8"},
			name = "movsx",
		},
		['r16,m8'] = {
			func = function(op1, op2) return "\x66\x0F\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, r8/m8",
			opcode = {"66", "0F", "BE", "/r"},
			metadata = "ANY",
			operands = {"r16", "m8"},
			name = "movsx",
		},
		['r32,r8'] = {
			func = function(op1, op2) return "\x0F\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r8/m8",
			opcode = {"0F", "BE", "/r"},
			metadata = "ANY",
			operands = {"r32", "r8"},
			name = "movsx",
		},
	},
	['vpcmpq'] = {
		['k {k},ymm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "1F", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "b64", "u8"},
			name = "vpcmpq",
		},
		['k {k},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "1F", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "m256", "u8"},
			name = "vpcmpq",
		},
		['k {k},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "1F", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "ymm", "i8"},
			name = "vpcmpq",
		},
		['k {k},zmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "1F", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "b64", "u8"},
			name = "vpcmpq",
		},
		['k {k},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "1F", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "m128", "u8"},
			name = "vpcmpq",
		},
		['k {k},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "1F", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "xmm", "i8"},
			name = "vpcmpq",
		},
		['k {k},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "1F", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "m512", "u8"},
			name = "vpcmpq",
		},
		['k {k},xmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "1F", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "b64", "u8"},
			name = "vpcmpq",
		},
		['k {k},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x1F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "1F", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "zmm", "i8"},
			name = "vpcmpq",
		},
	},
	['vpcmpb'] = {
		['k {k},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "m128", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "3F", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "m128", "u8"},
			name = "vpcmpb",
		},
		['k {k},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "m256", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "3F", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "m256", "u8"},
			name = "vpcmpb",
		},
		['k {k},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "m512", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "3F", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "m512", "u8"},
			name = "vpcmpb",
		},
		['k {k},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x3F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "3F", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "ymm", "i8"},
			name = "vpcmpb",
		},
		['k {k},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x3F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "3F", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "zmm", "i8"},
			name = "vpcmpb",
		},
		['k {k},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x3F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "3F", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "xmm", "i8"},
			name = "vpcmpb",
		},
	},
	['movdqu'] = {
		['m128,xmm'] = {
			func = function(op1, op2) return "\xF3\x0F\x7F"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"F3", "0F", "7F", "/r"},
			metadata = "SSE2",
			operands = {"m128", "xmm"},
			name = "movdqu",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\xF3\x0F\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"F3", "0F", "6F", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "movdqu",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xF3\x0F\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"F3", "0F", "7F", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "movdqu",
		},
	},
	['kaddb'] = {
		['k[0],k[0],k[0]'] = {
			func = function(op1, op2, op3) return "\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[0]", "k[0]", "k[0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[0]  ,~k[0]  ,~k[0]",
			opcode = {"VEX.L1.66.0F.W0", "4A", "/r"},
			metadata = "AVX512_DQ",
			operands = {"k[0]", "k[0]", "k[0]"},
			name = "kaddb",
		},
	},
	['vpbroadcastmb2q'] = {
		['zmm,k'] = {
			func = function(op1, op2) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:zmm, k",
			opcode = {"EVEX.512.F3.0F38.W1", "2A", "/r"},
			metadata = "AVX512_CDI",
			operands = {"zmm", "k"},
			name = "vpbroadcastmb2q",
		},
		['ymm,k'] = {
			func = function(op1, op2) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, k",
			opcode = {"EVEX.256.F3.0F38.W1", "2A", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"ymm", "k"},
			name = "vpbroadcastmb2q",
		},
		['xmm,k'] = {
			func = function(op1, op2) return "\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, k",
			opcode = {"EVEX.128.F3.0F38.W1", "2A", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"xmm", "k"},
			name = "vpbroadcastmb2q",
		},
	},
	['unpckhps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"0F", "15", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "unpckhps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"0F", "15", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "unpckhps",
		},
	},
	['vpbroadcastmb2d'] = {
		['zmm,k'] = {
			func = function(op1, op2) return "\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:zmm, k",
			opcode = {"EVEX.512.F3.0F38.W0", "3A", "/r"},
			metadata = "AVX512_CDI",
			operands = {"zmm", "k"},
			name = "vpbroadcastmb2d",
		},
		['ymm,k'] = {
			func = function(op1, op2) return "\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, k",
			opcode = {"EVEX.256.F3.0F38.W0", "3A", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"ymm", "k"},
			name = "vpbroadcastmb2d",
		},
		['xmm,k'] = {
			func = function(op1, op2) return "\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, k",
			opcode = {"EVEX.128.F3.0F38.W0", "3A", "/r"},
			metadata = "AVX512_CDI-VL",
			operands = {"xmm", "k"},
			name = "vpbroadcastmb2d",
		},
	},
	['vpandnd'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "DF", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpandnd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "DF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpandnd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "DF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpandnd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "DF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpandnd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "DF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpandnd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "DF", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpandnd",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "DF", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpandnd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "DF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpandnd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "DF", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpandnd",
		},
	},
	['paddsb'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xEC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "EC", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "paddsb",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xEC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "EC", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "paddsb",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xEC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "EC", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "paddsb",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xEC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "EC", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "paddsb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xEC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "EC", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "paddsb",
		},
	},
	['ret'] = {
		[''] = {
			func = function(op1) return "\xC3" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"C3"},
			metadata = "ANY _RepIgnored  Control=Return",
			operands = {""},
			name = "ret",
		},
		['u16'] = {
			func = function(op1) return "\xC2"..x86_64.encode_int("int16_t", op1) end,
			real_operands = {"uw"},
			encoding = "I",
			has_relative = false,
			operands2 = "uw",
			opcode = {"C2", "iw"},
			metadata = "ANY _RepIgnored  Control=Return",
			operands = {"u16"},
			name = "ret",
		},
	},
	['vmovsd'] = {
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], m32/m64",
			opcode = {"VEX.LIG.F2.0F.WIG", "10", "/r"},
			metadata = "AVX",
			operands = {"xmm[7:0]", "m64"},
			name = "vmovsd",
		},
		['xmm[7:0] {kz},xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm[15:8], xmm[7:0]",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "10", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[15:8]", "xmm[7:0]"},
			name = "vmovsd",
		},
		['xmm,xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "10", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			name = "vmovsd",
		},
		['m32,xmm[7:0]'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[7:0]",
			opcode = {"VEX.LIG.F2.0F.WIG", "11", "/r"},
			metadata = "AVX",
			operands = {"m32", "xmm[7:0]"},
			name = "vmovsd",
		},
		['xmm[7:0] {kz},m32'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "m32"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, m32/m64",
			opcode = {"EVEX.LIG.F2.0F.W1", "10", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "m32"},
			name = "vmovsd",
		},
		['m64,xmm[7:0]'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[7:0]",
			opcode = {"VEX.LIG.F2.0F.WIG", "11", "/r"},
			metadata = "AVX",
			operands = {"m64", "xmm[7:0]"},
			name = "vmovsd",
		},
		['xmm[7:0] {kz},m64'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "m64"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, m32/m64",
			opcode = {"EVEX.LIG.F2.0F.W1", "10", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "m64"},
			name = "vmovsd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], m32/m64",
			opcode = {"VEX.LIG.F2.0F.WIG", "10", "/r"},
			metadata = "AVX",
			operands = {"xmm[7:0]", "m32"},
			name = "vmovsd",
		},
	},
	['ffree'] = {
		['st(i)'] = {
			func = function(op1) return "\xDD" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"DD", "C0+i"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {"st(i)"},
			name = "ffree",
		},
	},
	['vpandd'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "DB", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpandd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "DB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpandd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "DB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpandd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "DB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpandd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "DB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpandd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "DB", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpandd",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "DB", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpandd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "DB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpandd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "DB", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpandd",
		},
	},
	['vpinsrd'] = {
		['xmm {kz},xmm,m32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m32", "ub"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r32[3:0]/m32/m64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "22", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm {kz}", "xmm", "m32", "u8"},
			name = "vpinsrd",
		},
		['xmm {kz},xmm,m64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m64", "ub"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r32[3:0]/m32/m64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "22", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm {kz}", "xmm", "m64", "u8"},
			name = "vpinsrd",
		},
		['xmm,xmm,r64[3:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "r64[3:0]", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r64[3:0], ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "22", "/r", "ib"},
			metadata = "AVX X64",
			operands = {"xmm", "xmm", "r64[3:0]", "i8"},
			name = "vpinsrd",
		},
		['xmm,xmm,m64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m64", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r32[3:0]/m32/m64, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "22", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m64", "u8"},
			name = "vpinsrd",
		},
		['xmm {kz},xmm,r64[3:0],u8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "r64[3:0]", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r64[3:0], ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "22", "/r", "ib"},
			metadata = "AVX512_DQ X64",
			operands = {"xmm {kz}", "xmm", "r64[3:0]", "u8"},
			name = "vpinsrd",
		},
		['xmm {kz},xmm,r64[3:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "r64[3:0]", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r64[3:0], ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "22", "/r", "ib"},
			metadata = "AVX512_DQ X64",
			operands = {"xmm {kz}", "xmm", "r64[3:0]", "i8"},
			name = "vpinsrd",
		},
		['xmm,xmm,r64[3:0],u8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "r64[3:0]", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r64[3:0], ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "22", "/r", "ib"},
			metadata = "AVX X64",
			operands = {"xmm", "xmm", "r64[3:0]", "u8"},
			name = "vpinsrd",
		},
		['xmm,xmm,m32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m32", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r32[3:0]/m32/m64, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "22", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m32", "u8"},
			name = "vpinsrd",
		},
		['xmm {kz},xmm,r32[3:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "r32[3:0]", "ib"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r32[3:0]/m32/m64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "22", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm {kz}", "xmm", "r32[3:0]", "i8"},
			name = "vpinsrd",
		},
		['xmm,xmm,r32[3:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "r32[3:0]", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r32[3:0]/m32/m64, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "22", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "r32[3:0]", "i8"},
			name = "vpinsrd",
		},
	},
	['setg'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9F", "/r"},
			metadata = "ANY              ZF=R SF=R OF=R",
			operands = {"m8"},
			name = "setg",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9F", "/r"},
			metadata = "ANY              ZF=R SF=R OF=R",
			operands = {"r8"},
			name = "setg",
		},
	},
	['vpabsq'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x1F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W1", "1F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vpabsq",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x1F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W1", "1F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vpabsq",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x1F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W1", "1F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vpabsq",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x1F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W1", "1F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vpabsq",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x1F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W1", "1F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vpabsq",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x1F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W1", "1F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vpabsq",
		},
	},
	['vp4dpwssds'] = {
		['zmm {kz},zmm,zmm,zmm,zmm,m128'] = {
			func = function(op1, op2, op3, op4, op5, op6) return "\x53"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "zmm", "zmm", "m128"},
			encoding = "RM-T1_4X",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm, zmm, zmm, m128",
			opcode = {"EVEX.DDS.512.F2.0F38.W0", "53", "/r"},
			metadata = "AVX512_4VNNIW",
			operands = {"zmm {kz}", "zmm", "zmm", "zmm", "zmm", "m128"},
			name = "vp4dpwssds",
		},
	},
	['vp4dpwssd'] = {
		['zmm {kz},zmm,zmm,zmm,zmm,m128'] = {
			func = function(op1, op2, op3, op4, op5, op6) return "\x52"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "zmm", "zmm", "m128"},
			encoding = "RM-T1_4X",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm, zmm, zmm, m128",
			opcode = {"EVEX.DDS.512.F2.0F38.W0", "52", "/r"},
			metadata = "AVX512_4VNNIW",
			operands = {"zmm {kz}", "zmm", "zmm", "zmm", "zmm", "m128"},
			name = "vp4dpwssd",
		},
	},
	['vmovdqu8'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.F2.0F.W0", "6F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vmovdqu8",
		},
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.F2.0F.W0", "7F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vmovdqu8",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.F2.0F.W0", "7F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm", "ymm"},
			name = "vmovdqu8",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.F2.0F.W0", "7F", "/r"},
			metadata = "AVX512_BW",
			operands = {"m512 {kz}", "zmm"},
			name = "vmovdqu8",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.F2.0F.W0", "6F", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "m512"},
			name = "vmovdqu8",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.F2.0F.W0", "6F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vmovdqu8",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.F2.0F.W0", "7F", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm", "zmm"},
			name = "vmovdqu8",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.F2.0F.W0", "6F", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm"},
			name = "vmovdqu8",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.F2.0F.W0", "6F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vmovdqu8",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.F2.0F.W0", "7F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vmovdqu8",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.F2.0F.W0", "6F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vmovdqu8",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.F2.0F.W0", "7F", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm", "xmm"},
			name = "vmovdqu8",
		},
	},
	['vpavgb'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "E0", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpavgb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "E0", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpavgb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "E0", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpavgb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E0", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpavgb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E0", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpavgb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E0", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpavgb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "E0", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpavgb",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E0", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpavgb",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "E0", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpavgb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "E0", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpavgb",
		},
	},
	['fcmovu'] = {
		['st(i)'] = {
			func = function(op1) return "\xDA" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"DA", "D8+i"},
			metadata = "FPU CMOV         C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fcmovu",
		},
	},
	['vpinsrq'] = {
		['xmm,xmm,r64,i8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "r64", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r64/m32/m64, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "22", "/r", "ib"},
			metadata = "AVX X64",
			operands = {"xmm", "xmm", "r64", "i8"},
			name = "vpinsrq",
		},
		['xmm,xmm,m64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m64", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r64/m32/m64, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "22", "/r", "ib"},
			metadata = "AVX X64",
			operands = {"xmm", "xmm", "m64", "u8"},
			name = "vpinsrq",
		},
		['xmm {kz},xmm,r64[7:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "r64[7:0]", "ib"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r64[7:0]/m32/m64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "22", "/r", "ib"},
			metadata = "AVX512_DQ X64",
			operands = {"xmm {kz}", "xmm", "r64[7:0]", "i8"},
			name = "vpinsrq",
		},
		['xmm,xmm,m32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m32", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r64/m32/m64, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "22", "/r", "ib"},
			metadata = "AVX X64",
			operands = {"xmm", "xmm", "m32", "u8"},
			name = "vpinsrq",
		},
		['xmm {kz},xmm,m64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m64", "ub"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r64[7:0]/m32/m64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "22", "/r", "ib"},
			metadata = "AVX512_DQ X64",
			operands = {"xmm {kz}", "xmm", "m64", "u8"},
			name = "vpinsrq",
		},
		['xmm {kz},xmm,m32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m32", "ub"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r64[7:0]/m32/m64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "22", "/r", "ib"},
			metadata = "AVX512_DQ X64",
			operands = {"xmm {kz}", "xmm", "m32", "u8"},
			name = "vpinsrq",
		},
	},
	['vmovdqu64'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.F3.0F.W1", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vmovdqu64",
		},
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F.W1", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vmovdqu64",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F.W1", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm", "ymm"},
			name = "vmovdqu64",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F.W1", "7F", "/r"},
			metadata = "AVX512_F",
			operands = {"m512 {kz}", "zmm"},
			name = "vmovdqu64",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.F3.0F.W1", "6F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vmovdqu64",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.F3.0F.W1", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vmovdqu64",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F.W1", "7F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm", "zmm"},
			name = "vmovdqu64",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.F3.0F.W1", "6F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vmovdqu64",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.F3.0F.W1", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vmovdqu64",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F.W1", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vmovdqu64",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.F3.0F.W1", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vmovdqu64",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F.W1", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "xmm"},
			name = "vmovdqu64",
		},
	},
	['sysenter'] = {
		[''] = {
			func = function(op1) return "\x0F\x34" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "34"},
			metadata = "ANY              Volatile",
			operands = {""},
			name = "sysenter",
		},
	},
	['vpcmpub'] = {
		['k {k},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "m128", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "3E", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "m128", "u8"},
			name = "vpcmpub",
		},
		['k {k},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "m256", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "3E", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "m256", "u8"},
			name = "vpcmpub",
		},
		['k {k},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "m512", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "3E", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "m512", "u8"},
			name = "vpcmpub",
		},
		['k {k},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x3E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "3E", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "ymm", "i8"},
			name = "vpcmpub",
		},
		['k {k},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x3E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "3E", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "zmm", "i8"},
			name = "vpcmpub",
		},
		['k {k},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x3E"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {k}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "3E", "/r", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "xmm", "i8"},
			name = "vpcmpub",
		},
	},
	['pfpnacc'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x8E" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "8E"},
			metadata = "3DNOW2",
			operands = {"mm", "m32"},
			name = "pfpnacc",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x8E" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "8E"},
			metadata = "3DNOW2",
			operands = {"mm", "m64"},
			name = "pfpnacc",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x8E" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "8E"},
			metadata = "3DNOW2",
			operands = {"mm", "mm"},
			name = "pfpnacc",
		},
	},
	['addsubpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xD0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "D0", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "m128"},
			name = "addsubpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xD0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "D0", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "xmm"},
			name = "addsubpd",
		},
	},
	['vptest'] = {
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x17"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~ymm, ~ymm/m256",
			opcode = {"VEX.256.66.0F38.WIG", "17", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"ymm", "ymm"},
			name = "vptest",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x17"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~ymm, ~ymm/m256",
			opcode = {"VEX.256.66.0F38.WIG", "17", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"ymm", "m256"},
			name = "vptest",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x17"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~xmm, ~xmm/m128",
			opcode = {"VEX.128.66.0F38.WIG", "17", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "m128"},
			name = "vptest",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x17"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~xmm, ~xmm/m128",
			opcode = {"VEX.128.66.0F38.WIG", "17", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "xmm"},
			name = "vptest",
		},
	},
	['setna'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "96", "/r"},
			metadata = "ANY              CF=R ZF=R",
			operands = {"m8"},
			name = "setna",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "96", "/r"},
			metadata = "ANY              CF=R ZF=R",
			operands = {"r8"},
			name = "setna",
		},
	},
	['blendvpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, <xmm0>",
			opcode = {"66", "0F", "38", "15", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "blendvpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, <xmm0>",
			opcode = {"66", "0F", "38", "15", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm"},
			name = "blendvpd",
		},
	},
	['psubw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xF9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "F9", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "psubw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xF9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "F9", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "psubw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xF9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "F9", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "psubw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xF9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "F9", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psubw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xF9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "F9", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psubw",
		},
	},
	['punpcklqdq'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "6C", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "punpcklqdq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x6C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "6C", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "punpcklqdq",
		},
	},
	['fdivr'] = {
		['st(0),st(i)'] = {
			func = function(op1, op2) return "\xD8" end,
			real_operands = {"st(0)", "st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(0), st(i)",
			opcode = {"D8", "F8+i"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"st(0)", "st(i)"},
			name = "fdivr",
		},
		['st(i),st(0)'] = {
			func = function(op1, op2) return "\xDC" end,
			real_operands = {"st(i)", "st(0)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i), st(0)",
			opcode = {"DC", "F0+i"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"st(i)", "st(0)"},
			name = "fdivr",
		},
		['m32'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DC", "/7"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fdivr",
		},
		['m64fp'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m64fp"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64fp",
			opcode = {"DC", "/7"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m64fp"},
			name = "fdivr",
		},
	},
	['vmovdqa32'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F.W0", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vmovdqa32",
		},
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F.W0", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vmovdqa32",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F.W0", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm", "ymm"},
			name = "vmovdqa32",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F.W0", "7F", "/r"},
			metadata = "AVX512_F",
			operands = {"m512 {kz}", "zmm"},
			name = "vmovdqa32",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F.W0", "6F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vmovdqa32",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F.W0", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vmovdqa32",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F.W0", "7F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm", "zmm"},
			name = "vmovdqa32",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F.W0", "6F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vmovdqa32",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F.W0", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vmovdqa32",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F.W0", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vmovdqa32",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F.W0", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vmovdqa32",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F.W0", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "xmm"},
			name = "vmovdqa32",
		},
	},
	['vinserti64x4'] = {
		['zmm {kz},zmm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x3A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "ymm", "ib"},
			encoding = "RVMI-T4",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "3A", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "ymm", "i8"},
			name = "vinserti64x4",
		},
		['zmm {kz},zmm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m256", "ub"},
			encoding = "RVMI-T4",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "3A", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m256", "u8"},
			name = "vinserti64x4",
		},
	},
	['vinserti64x2'] = {
		['zmm {kz},zmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x38"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "xmm", "ib"},
			encoding = "RVMI-T2",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "38", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "xmm", "i8"},
			name = "vinserti64x2",
		},
		['ymm {kz},ymm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x38"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "xmm", "ib"},
			encoding = "RVMI-T2",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "38", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "xmm", "i8"},
			name = "vinserti64x2",
		},
		['zmm {kz},zmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x38"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m128", "ub"},
			encoding = "RVMI-T2",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "38", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "m128", "u8"},
			name = "vinserti64x2",
		},
		['ymm {kz},ymm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x38"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m128", "ub"},
			encoding = "RVMI-T2",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "38", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "m128", "u8"},
			name = "vinserti64x2",
		},
	},
	['vinserti32x8'] = {
		['zmm {kz},zmm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x3A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "ymm", "ib"},
			encoding = "RVMI-T8",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "3A", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "ymm", "i8"},
			name = "vinserti32x8",
		},
		['zmm {kz},zmm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x3A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m256", "ub"},
			encoding = "RVMI-T8",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "3A", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "m256", "u8"},
			name = "vinserti32x8",
		},
	},
	['vinsertf64x4'] = {
		['zmm {kz},zmm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x1A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "ymm", "ib"},
			encoding = "RVMI-T4",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "1A", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "ymm", "i8"},
			name = "vinsertf64x4",
		},
		['zmm {kz},zmm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x1A"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m256", "ub"},
			encoding = "RVMI-T4",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "1A", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m256", "u8"},
			name = "vinsertf64x4",
		},
	},
	['pfsub'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x9A" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "9A"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pfsub",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x9A" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "9A"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pfsub",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x9A" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "9A"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pfsub",
		},
	},
	['fiadd'] = {
		['m64int'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m64int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/0"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m64int"},
			name = "fiadd",
		},
		['m16int'] = {
			func = function(op1) return "\xDE"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m16int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m16int",
			opcode = {"DE", "/0"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m16int"},
			name = "fiadd",
		},
		['m32'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/0"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fiadd",
		},
	},
	['xabort'] = {
		['i8'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op1) end,
			real_operands = {"ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "ib/ub",
			opcode = {"C6", "/7", "ib"},
			metadata = "RTM              Volatile",
			operands = {"i8"},
			name = "xabort",
		},
		['u8'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op1) end,
			real_operands = {"ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "ib/ub",
			opcode = {"C6", "/7", "ib"},
			metadata = "RTM              Volatile",
			operands = {"u8"},
			name = "xabort",
		},
	},
	['pause'] = {
		[''] = {
			func = function(op1) return "\xF3\x90" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"F3", "90"},
			metadata = "ANY              Volatile",
			operands = {""},
			name = "pause",
		},
	},
	['shr'] = {
		['m16,u8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/5", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "u8"},
			name = "shr",
		},
		['m8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/5"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "1"},
			name = "shr",
		},
		['m32,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/5", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "u8"},
			name = "shr",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/5", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "u8"},
			name = "shr",
		},
		['r8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/5"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "cl"},
			name = "shr",
		},
		['r16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/5"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "cl"},
			name = "shr",
		},
		['m16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/5"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "cl"},
			name = "shr",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\xC1"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib/ub",
			opcode = {"C1", "/5", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "i8"},
			name = "shr",
		},
		['r32,cl'] = {
			func = function(op1, op2) return "\xD3"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, cl",
			opcode = {"D3", "/5"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "cl"},
			name = "shr",
		},
		['r32,1'] = {
			func = function(op1, op2) return "\xD1"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, 1",
			opcode = {"D1", "/5"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r32", "1"},
			name = "shr",
		},
		['m64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/5"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "cl"},
			name = "shr",
		},
		['m64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/5"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "1"},
			name = "shr",
		},
		['r16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/5"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "1"},
			name = "shr",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/5", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "i8"},
			name = "shr",
		},
		['r64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/5"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "cl"},
			name = "shr",
		},
		['r64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/5"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r64", "1"},
			name = "shr",
		},
		['m64,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/5", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m64", "u8"},
			name = "shr",
		},
		['m8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/5"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m8", "cl"},
			name = "shr",
		},
		['m32,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/5"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "1"},
			name = "shr",
		},
		['r8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/5"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "1"},
			name = "shr",
		},
		['m32,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/5"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m32", "cl"},
			name = "shr",
		},
		['m16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/5"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"m16", "1"},
			name = "shr",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/5", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r16", "i8"},
			name = "shr",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 5)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/5", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {"r8", "i8"},
			name = "shr",
		},
	},
	['vgetmantss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x27"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]", "ib"},
			encoding = "RMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W0", "27", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]", "i8"},
			name = "vgetmantss",
		},
		['xmm {kz},xmm[15:4],m64,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x27"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64", "ub {sae}"},
			encoding = "RMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W0", "27", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m64", "ub {sae}"},
			name = "vgetmantss",
		},
		['xmm {kz},xmm[15:4],m32,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x27"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32", "ub {sae}"},
			encoding = "RMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W0", "27", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m32", "ub {sae}"},
			name = "vgetmantss",
		},
	},
	['vgetmantsd'] = {
		['xmm {kz},xmm[15:8],m32,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x27"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32", "ub {sae}"},
			encoding = "RMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W1", "27", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m32", "ub {sae}"},
			name = "vgetmantsd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x27"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]", "ib"},
			encoding = "RMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W1", "27", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]", "i8"},
			name = "vgetmantsd",
		},
		['xmm {kz},xmm[15:8],m64,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x27"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64", "ub {sae}"},
			encoding = "RMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W1", "27", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m64", "ub {sae}"},
			name = "vgetmantsd",
		},
	},
	['vgetmantps'] = {
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "26", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vgetmantps",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "26", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vgetmantps",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "26", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vgetmantps",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "26", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vgetmantps",
		},
		['zmm {kz},b32,ub {sae}'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b32", "ub {sae}"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub {sae}",
			opcode = {"EVEX.512.66.0F3A.W0", "26", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32", "ub {sae}"},
			name = "vgetmantps",
		},
		['zmm {kz},m512,ub {sae}'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub {sae}"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub {sae}",
			opcode = {"EVEX.512.66.0F3A.W0", "26", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "ub {sae}"},
			name = "vgetmantps",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub {sae}",
			opcode = {"EVEX.512.66.0F3A.W0", "26", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vgetmantps",
		},
		['xmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b32", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "26", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32", "u8"},
			name = "vgetmantps",
		},
		['ymm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b32", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "26", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32", "u8"},
			name = "vgetmantps",
		},
	},
	['fstcw'] = {
		['m16'] = {
			func = function(op1) return "\x9B\xD9"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m16",
			opcode = {"9B", "D9", "/7"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {"m16"},
			name = "fstcw",
		},
	},
	['pmovsxbd'] = {
		['xmm,m64'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"66", "0F", "38", "21", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m64"},
			name = "pmovsxbd",
		},
		['xmm,xmm[3:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"66", "0F", "38", "21", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm[3:0]"},
			name = "pmovsxbd",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"66", "0F", "38", "21", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m32"},
			name = "pmovsxbd",
		},
	},
	['outsb'] = {
		['dx,ds:zsi'] = {
			func = function(op1, op2) return "\x6E" end,
			real_operands = {"dx", "ds:zsi"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:dx, R:ds:zsi",
			opcode = {"6E"},
			metadata = "ANY _Rep         Volatile",
			operands = {"dx", "ds:zsi"},
			name = "outsb",
		},
	},
	['vpexpandb'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W0", "62", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vpexpandb",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W0", "62", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vpexpandb",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W0", "62", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vpexpandb",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W0", "62", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "m512"},
			name = "vpexpandb",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W0", "62", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vpexpandb",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x62"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W0", "62", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm"},
			name = "vpexpandb",
		},
	},
	['wait'] = {
		[''] = {
			func = function(op1) return "\xDB" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"DB"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {""},
			name = "wait",
		},
	},
	['pfmul'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xB4" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "B4"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pfmul",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xB4" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "B4"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pfmul",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xB4" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "B4"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pfmul",
		},
	},
	['vgetexpsd'] = {
		['xmm {kz},xmm[15:8],m64 {sae}'] = {
			func = function(op1, op2, op3) return "\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64 {sae}"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "43", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m64 {sae}"},
			name = "vgetexpsd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "43", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			name = "vgetexpsd",
		},
		['xmm {kz},xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F38.W1", "43", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			name = "vgetexpsd",
		},
	},
	['xend'] = {
		[''] = {
			func = function(op1) return "\x0F\x01\xD5" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "01", "D5"},
			metadata = "RTM              Volatile",
			operands = {""},
			name = "xend",
		},
	},
	['punpckhdq'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "6A", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "punpckhdq",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "6A", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "punpckhdq",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "6A", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "punpckhdq",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "6A", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "punpckhdq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x6A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "6A", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "punpckhdq",
		},
	},
	['psubusw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xD9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "D9", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "psubusw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xD9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "D9", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "psubusw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xD9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "D9", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "psubusw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xD9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "D9", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psubusw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xD9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "D9", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psubusw",
		},
	},
	['vgatherpf1qps'] = {
		['m64z {k}'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64z {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C7", "/2"},
			metadata = "AVX512_PFI",
			operands = {"m64z {k}"},
			name = "vgatherpf1qps",
		},
		['vm32'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C7", "/2"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vgatherpf1qps",
		},
	},
	['vgatherpf1qpd'] = {
		['m64z {k}'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64z {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C7", "/2"},
			metadata = "AVX512_PFI",
			operands = {"m64z {k}"},
			name = "vgatherpf1qpd",
		},
		['vm32'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C7", "/2"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vgatherpf1qpd",
		},
	},
	['vgatherpf1dpd'] = {
		['m64y {k}'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64y {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64y {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C6", "/2"},
			metadata = "AVX512_PFI",
			operands = {"m64y {k}"},
			name = "vgatherpf1dpd",
		},
		['vm32'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64y {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C6", "/2"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vgatherpf1dpd",
		},
	},
	['vcvtdq2ps'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vcvtdq2ps",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vcvtdq2ps",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.0F.WIG", "5B", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vcvtdq2ps",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.0F.WIG", "5B", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vcvtdq2ps",
		},
		['zmm {kz},b32 {er}'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {er}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {er}",
			opcode = {"EVEX.512.0F.W0", "5B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32 {er}"},
			name = "vcvtdq2ps",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {er}",
			opcode = {"EVEX.512.0F.W0", "5B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vcvtdq2ps",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vcvtdq2ps",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {er}",
			opcode = {"EVEX.512.0F.W0", "5B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vcvtdq2ps",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vcvtdq2ps",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vcvtdq2ps",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.0F.W0", "5B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vcvtdq2ps",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.0F.WIG", "5B", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vcvtdq2ps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.0F.WIG", "5B", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vcvtdq2ps",
		},
	},
	['vpshufbitqmb'] = {
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x8F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "8F", "/r"},
			metadata = "AVX512_BITALG-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vpshufbitqmb",
		},
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x8F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "8F", "/r"},
			metadata = "AVX512_BITALG-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vpshufbitqmb",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x8F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "8F", "/r"},
			metadata = "AVX512_BITALG-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vpshufbitqmb",
		},
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x8F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "8F", "/r"},
			metadata = "AVX512_BITALG",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vpshufbitqmb",
		},
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x8F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "8F", "/r"},
			metadata = "AVX512_BITALG-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vpshufbitqmb",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x8F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "8F", "/r"},
			metadata = "AVX512_BITALG",
			operands = {"k {k}", "zmm", "m512"},
			name = "vpshufbitqmb",
		},
	},
	['vfnmadd213pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "AC", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfnmadd213pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "AC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfnmadd213pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "AC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfnmadd213pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "AC", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfnmadd213pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "AC", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfnmadd213pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "AC", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfnmadd213pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "AC", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfnmadd213pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "AC", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfnmadd213pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "AC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfnmadd213pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "AC", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfnmadd213pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "AC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfnmadd213pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "AC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfnmadd213pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xAC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "AC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfnmadd213pd",
		},
	},
	['vmovntpd'] = {
		['m512,zmm'] = {
			func = function(op1, op2) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:m512, zmm",
			opcode = {"EVEX.512.66.0F.W1", "2B", "/r"},
			metadata = "AVX512_F",
			operands = {"m512", "zmm"},
			name = "vmovntpd",
		},
		['m128,xmm'] = {
			func = function(op1, op2) return "\x2B"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m128, xmm",
			opcode = {"VEX.128.66.0F.WIG", "2B", "/r"},
			metadata = "AVX",
			operands = {"m128", "xmm"},
			name = "vmovntpd",
		},
		['m256,ymm'] = {
			func = function(op1, op2) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256", "ymm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m256, ymm",
			opcode = {"VEX.256.66.0F.WIG", "2B", "/r"},
			metadata = "AVX",
			operands = {"m256", "ymm"},
			name = "vmovntpd",
		},
	},
	['vgatherpf0qpd'] = {
		['m64z {k}'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64z {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C7", "/1"},
			metadata = "AVX512_PFI",
			operands = {"m64z {k}"},
			name = "vgatherpf0qpd",
		},
		['vm32'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C7", "/1"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vgatherpf0qpd",
		},
	},
	['pswapd'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xBB" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "BB"},
			metadata = "3DNOW2",
			operands = {"mm", "m32"},
			name = "pswapd",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xBB" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "BB"},
			metadata = "3DNOW2",
			operands = {"mm", "m64"},
			name = "pswapd",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xBB" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "BB"},
			metadata = "3DNOW2",
			operands = {"mm", "mm"},
			name = "pswapd",
		},
	},
	['jo'] = {
		['i8'] = {
			func = function(op1) return "\x70"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"70", "cb"},
			metadata = "ANY              Control=Branch OF=R",
			operands = {"string"},
			name = "jo",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x80"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "80", "cw"},
			metadata = "X86              Control=Branch OF=R",
			operands = {"string"},
			name = "jo",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x80"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "80", "cd"},
			metadata = "ANY              Control=Branch OF=R",
			operands = {"string"},
			name = "jo",
		},
		['string'] = {
			func = function(op1) return "\x0F\x80"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "80", "cd"},
			metadata = "ANY              Control=Branch OF=R",
			operands = {"string"},
			name = "jo",
		},
	},
	['vpsllq'] = {
		['xmm,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "73", "/6", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "u8"},
			name = "vpsllq",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W1", "73", "/6", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vpsllq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.W1", "F3", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsllq",
		},
		['ymm,ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xF3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "F3", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "xmm"},
			name = "vpsllq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "F3", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsllq",
		},
		['zmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b64", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W1", "73", "/6", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b64", "u8"},
			name = "vpsllq",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "73", "/6", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "i8"},
			name = "vpsllq",
		},
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "73", "/6", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "i8"},
			name = "vpsllq",
		},
		['zmm {kz},zmm,m128'] = {
			func = function(op1, op2, op3) return "\xF3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.W1", "F3", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m128"},
			name = "vpsllq",
		},
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W1", "73", "/6", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vpsllq",
		},
		['ymm {kz},ymm,m128'] = {
			func = function(op1, op2, op3) return "\xF3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.W1", "F3", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m128"},
			name = "vpsllq",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W1", "73", "/6", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vpsllq",
		},
		['ymm {kz},ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xF3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.W1", "F3", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "xmm"},
			name = "vpsllq",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W1", "73", "/6", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vpsllq",
		},
		['zmm {kz},zmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.W1", "F3", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "xmm"},
			name = "vpsllq",
		},
		['xmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b64", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W1", "73", "/6", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64", "u8"},
			name = "vpsllq",
		},
		['ymm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b64", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W1", "73", "/6", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b64", "u8"},
			name = "vpsllq",
		},
		['ymm,ymm,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "73", "/6", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "u8"},
			name = "vpsllq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xF3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "F3", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsllq",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W1", "73", "/6", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vpsllq",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W1", "73", "/6", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vpsllq",
		},
		['ymm,ymm,m128'] = {
			func = function(op1, op2, op3) return "\xF3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "F3", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m128"},
			name = "vpsllq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xF3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.W1", "F3", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsllq",
		},
	},
	['vexpandpd'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x88"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W1", "88", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vexpandpd",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x88"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W1", "88", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vexpandpd",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x88"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38.W1", "88", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vexpandpd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x88"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W1", "88", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vexpandpd",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x88"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38.W1", "88", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vexpandpd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x88"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38.W1", "88", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vexpandpd",
		},
	},
	['vmaxps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32 {sae}",
			opcode = {"EVEX.NDS.512.0F.W0", "5F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vmaxps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vmaxps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vmaxps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vmaxps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "5F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vmaxps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "5F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vmaxps",
		},
		['zmm {kz},zmm,b32 {sae}'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {sae}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32 {sae}",
			opcode = {"EVEX.NDS.512.0F.W0", "5F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {sae}"},
			name = "vmaxps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "5F", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vmaxps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vmaxps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "5F", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vmaxps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32 {sae}",
			opcode = {"EVEX.NDS.512.0F.W0", "5F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vmaxps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vmaxps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vmaxps",
		},
	},
	['vpsubsb'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xE8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "E8", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsubsb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "E8", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsubsb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xE8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "E8", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsubsb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E8", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsubsb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E8", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsubsb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xE8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E8", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsubsb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xE8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "E8", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsubsb",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xE8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E8", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsubsb",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xE8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "E8", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsubsb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "E8", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsubsb",
		},
	},
	['vfpclassss'] = {
		['k {k},m32,u8'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "m32", "ub"},
			encoding = "RMI-T1S",
			has_relative = false,
			operands2 = "W:k {k}, xmm[3:0]/m32/m64, ib/ub",
			opcode = {"EVEX.LIG.66.0F3A.W0", "67", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k {k}", "m32", "u8"},
			name = "vfpclassss",
		},
		['k {k},xmm[3:0],i8'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "xmm[3:0]", "ib"},
			encoding = "RMI-T1S",
			has_relative = false,
			operands2 = "W:k {k}, xmm[3:0]/m32/m64, ib/ub",
			opcode = {"EVEX.LIG.66.0F3A.W0", "67", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k {k}", "xmm[3:0]", "i8"},
			name = "vfpclassss",
		},
		['k {k},m64,u8'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "m64", "ub"},
			encoding = "RMI-T1S",
			has_relative = false,
			operands2 = "W:k {k}, xmm[3:0]/m32/m64, ib/ub",
			opcode = {"EVEX.LIG.66.0F3A.W0", "67", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k {k}", "m64", "u8"},
			name = "vfpclassss",
		},
	},
	['fyl2xp1'] = {
		[''] = {
			func = function(op1) return "\xD9\xF9" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "F9"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fyl2xp1",
		},
	},
	['vfmadd213pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "A8", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmadd213pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "A8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmadd213pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "A8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmadd213pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "A8", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmadd213pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "A8", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmadd213pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "A8", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmadd213pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "A8", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfmadd213pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "A8", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmadd213pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "A8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfmadd213pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "A8", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmadd213pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "A8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfmadd213pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "A8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmadd213pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xA8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "A8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmadd213pd",
		},
	},
	['fxam'] = {
		[''] = {
			func = function(op1) return "\xD9\xE5" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "E5"},
			metadata = "FPU              C0=W C1=W C2=W C3=W",
			operands = {""},
			name = "fxam",
		},
	},
	['vfpclassps'] = {
		['k {k},b32,u8'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "b32", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "66", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k {k}", "b32", "u8"},
			name = "vfpclassps",
		},
		['k {k},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "xmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "66", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"k {k}", "xmm", "i8"},
			name = "vfpclassps",
		},
		['k {k},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "ymm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "66", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"k {k}", "ymm", "i8"},
			name = "vfpclassps",
		},
		['k {k},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "zmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "66", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k {k}", "zmm", "i8"},
			name = "vfpclassps",
		},
		['k {k},m128,u8'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "m128", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "66", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"k {k}", "m128", "u8"},
			name = "vfpclassps",
		},
		['k {k},m512,u8'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "m512", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "66", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k {k}", "m512", "u8"},
			name = "vfpclassps",
		},
		['k {k},m256,u8'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "m256", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "66", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"k {k}", "m256", "u8"},
			name = "vfpclassps",
		},
	},
	['fcos'] = {
		[''] = {
			func = function(op1) return "\xD9\xFF" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "FF"},
			metadata = "FPU              C0=U C1=W C2=W C3=U",
			operands = {""},
			name = "fcos",
		},
	},
	['vpshldvq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "71", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpshldvq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "71", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpshldvq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "71", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpshldvq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "71", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpshldvq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "71", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpshldvq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "71", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpshldvq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "71", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpshldvq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "71", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpshldvq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "71", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpshldvq",
		},
	},
	['korb'] = {
		['k[0],k[0],k[0]'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[0]", "k[0]", "k[0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[0], ~k[0], ~k[0]",
			opcode = {"VEX.L1.66.0F.W0", "45", "/r"},
			metadata = "AVX512_DQ",
			operands = {"k[0]", "k[0]", "k[0]"},
			name = "korb",
		},
	},
	['vextracti64x4'] = {
		['ymm,zmm,i8'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "zmm", "ib"},
			encoding = "MRI-T4",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "3B", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"ymm", "zmm", "i8"},
			name = "vextracti64x4",
		},
		['m256 {kz},zmm,u8'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m256 {kz}", "zmm", "ub"},
			encoding = "MRI-T4",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "3B", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"m256 {kz}", "zmm", "u8"},
			name = "vextracti64x4",
		},
	},
	['vextracti64x2'] = {
		['m128 {kz},zmm,u8'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m128 {kz}", "zmm", "ub"},
			encoding = "MRI-T2",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "39", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"m128 {kz}", "zmm", "u8"},
			name = "vextracti64x2",
		},
		['m128 {kz},ymm,u8'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m128 {kz}", "ymm", "ub"},
			encoding = "MRI-T2",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "39", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"m128 {kz}", "ymm", "u8"},
			name = "vextracti64x2",
		},
		['xmm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "ymm", "ib"},
			encoding = "MRI-T2",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "39", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm", "ymm", "i8"},
			name = "vextracti64x2",
		},
		['xmm,zmm,i8'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "zmm", "ib"},
			encoding = "MRI-T2",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "39", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm", "zmm", "i8"},
			name = "vextracti64x2",
		},
	},
	['vextracti32x8'] = {
		['ymm,zmm,i8'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "zmm", "ib"},
			encoding = "MRI-T8",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "3B", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"ymm", "zmm", "i8"},
			name = "vextracti32x8",
		},
		['m256 {kz},zmm,u8'] = {
			func = function(op1, op2, op3) return "\x3B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m256 {kz}", "zmm", "ub"},
			encoding = "MRI-T8",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "3B", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"m256 {kz}", "zmm", "u8"},
			name = "vextracti32x8",
		},
	},
	['vpermpd'] = {
		['ymm,m256,u8'] = {
			func = function(op1, op2, op3) return "\x01"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "m256", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.66.0F3A.W1", "01", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "m256", "u8"},
			name = "vpermpd",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x01"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.66.0F3A.W1", "01", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "i8"},
			name = "vpermpd",
		},
	},
	['vextracti32x4'] = {
		['m128 {kz},zmm,u8'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m128 {kz}", "zmm", "ub"},
			encoding = "MRI-T4",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "39", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"m128 {kz}", "zmm", "u8"},
			name = "vextracti32x4",
		},
		['m128 {kz},ymm,u8'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m128 {kz}", "ymm", "ub"},
			encoding = "MRI-T4",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "39", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "ymm", "u8"},
			name = "vextracti32x4",
		},
		['xmm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "ymm", "ib"},
			encoding = "MRI-T4",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "39", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "ymm", "i8"},
			name = "vextracti32x4",
		},
		['xmm,zmm,i8'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "zmm", "ib"},
			encoding = "MRI-T4",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "39", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm", "zmm", "i8"},
			name = "vextracti32x4",
		},
	},
	['lgdt'] = {
		['m32'] = {
			func = function(op1) return "\x0F\x01"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "01", "/2"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {"m32"},
			name = "lgdt",
		},
		['m64'] = {
			func = function(op1) return "\x0F\x01"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "01", "/2"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {"m64"},
			name = "lgdt",
		},
	},
	['vdivpd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "5E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vdivpd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "5E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vdivpd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "5E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vdivpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "5E", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vdivpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "5E", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vdivpd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "5E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vdivpd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "5E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vdivpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "5E", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vdivpd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "5E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vdivpd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "5E", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vdivpd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "5E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vdivpd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "5E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vdivpd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "5E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vdivpd",
		},
	},
	['vpermd'] = {
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x36"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "36", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpermd",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x36"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "36", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x36"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "36", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpermd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x36"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "36", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x36"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "36", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpermd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x36"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "36", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x36"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "36", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x36"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "36", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpermd",
		},
	},
	['vextractf64x4'] = {
		['ymm,zmm,i8'] = {
			func = function(op1, op2, op3) return "\x1B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "zmm", "ib"},
			encoding = "MRI-T4",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "1B", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"ymm", "zmm", "i8"},
			name = "vextractf64x4",
		},
		['m256 {kz},zmm,u8'] = {
			func = function(op1, op2, op3) return "\x1B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m256 {kz}", "zmm", "ub"},
			encoding = "MRI-T4",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "1B", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"m256 {kz}", "zmm", "u8"},
			name = "vextractf64x4",
		},
	},
	['vpminsd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "39", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpminsd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "39", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpminsd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "39", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpminsd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "39", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpminsd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "39", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpminsd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "39", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpminsd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "39", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpminsd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "39", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpminsd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "39", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpminsd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "39", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpminsd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "39", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpminsd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "39", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpminsd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "39", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpminsd",
		},
	},
	['vextractf64x2'] = {
		['m128 {kz},zmm,u8'] = {
			func = function(op1, op2, op3) return "\x19"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m128 {kz}", "zmm", "ub"},
			encoding = "MRI-T2",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "19", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"m128 {kz}", "zmm", "u8"},
			name = "vextractf64x2",
		},
		['m128 {kz},ymm,u8'] = {
			func = function(op1, op2, op3) return "\x19"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m128 {kz}", "ymm", "ub"},
			encoding = "MRI-T2",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "19", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"m128 {kz}", "ymm", "u8"},
			name = "vextractf64x2",
		},
		['xmm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x19"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "ymm", "ib"},
			encoding = "MRI-T2",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "19", "/r", "ib"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm", "ymm", "i8"},
			name = "vextractf64x2",
		},
		['xmm,zmm,i8'] = {
			func = function(op1, op2, op3) return "\x19"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "zmm", "ib"},
			encoding = "MRI-T2",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "19", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"xmm", "zmm", "i8"},
			name = "vextractf64x2",
		},
	},
	['vextractf32x4'] = {
		['m128 {kz},zmm,u8'] = {
			func = function(op1, op2, op3) return "\x19"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m128 {kz}", "zmm", "ub"},
			encoding = "MRI-T4",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "19", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"m128 {kz}", "zmm", "u8"},
			name = "vextractf32x4",
		},
		['m128 {kz},ymm,u8'] = {
			func = function(op1, op2, op3) return "\x19"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m128 {kz}", "ymm", "ub"},
			encoding = "MRI-T4",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "19", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "ymm", "u8"},
			name = "vextractf32x4",
		},
		['xmm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x19"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "ymm", "ib"},
			encoding = "MRI-T4",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "19", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "ymm", "i8"},
			name = "vextractf32x4",
		},
		['xmm,zmm,i8'] = {
			func = function(op1, op2, op3) return "\x19"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "zmm", "ib"},
			encoding = "MRI-T4",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, zmm, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "19", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm", "zmm", "i8"},
			name = "vextractf32x4",
		},
	},
	['vexp2pd'] = {
		['zmm {kz},b64 {sae}'] = {
			func = function(op1, op2) return "\xC8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b64 {sae}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F38.W1", "C8", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "b64 {sae}"},
			name = "vexp2pd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\xC8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F38.W1", "C8", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "zmm"},
			name = "vexp2pd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\xC8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F38.W1", "C8", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "m512"},
			name = "vexp2pd",
		},
	},
	['cmovna'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "46", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r32", "m32"},
			name = "cmovna",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "46", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r32", "r32"},
			name = "cmovna",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "46", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r32", "m64"},
			name = "cmovna",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "46", "/r"},
			metadata = "CMOV X64         CF=R ZF=R",
			operands = {"r64", "m64"},
			name = "cmovna",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "46", "/r"},
			metadata = "CMOV X64         CF=R ZF=R",
			operands = {"r64", "m32"},
			name = "cmovna",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "46", "/r"},
			metadata = "CMOV X64         CF=R ZF=R",
			operands = {"r64", "r64"},
			name = "cmovna",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "46", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r16", "r16"},
			name = "cmovna",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "46", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r16", "m16"},
			name = "cmovna",
		},
	},
	['vcvtusi2ss'] = {
		['xmm,xmm[15:4],r64'] = {
			func = function(op1, op2, op3) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "r64"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], r64/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W1", "7B", "/r"},
			metadata = "AVX512_F X64",
			operands = {"xmm", "xmm[15:4]", "r64"},
			name = "vcvtusi2ss",
		},
		['xmm,xmm[15:4],r32'] = {
			func = function(op1, op2, op3) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "r32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], r32/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "7B", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm[15:4]", "r32"},
			name = "vcvtusi2ss",
		},
		['xmm,xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], r64/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W1", "7B", "/r"},
			metadata = "AVX512_F X64",
			operands = {"xmm", "xmm[15:4]", "m32"},
			name = "vcvtusi2ss",
		},
		['xmm,xmm[15:4],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], r64/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W1", "7B", "/r"},
			metadata = "AVX512_F X64",
			operands = {"xmm", "xmm[15:4]", "m64 {er}"},
			name = "vcvtusi2ss",
		},
	},
	['vpshaw'] = {
		['xmm,m128,xmm'] = {
			func = function(op1, op2, op3) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "99", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128", "xmm"},
			name = "vpshaw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"XOP.NDS.L0.P0.M09.W1", "99", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128"},
			name = "vpshaw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "99", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpshaw",
		},
	},
	['lss'] = {
		['r64,m16_64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xB2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m16_64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, m16_64",
			opcode = {"REX.W", "0F", "B2", "/r"},
			metadata = "X64              Volatile",
			operands = {"r64", "m16_64"},
			name = "lss",
		},
		['r16,m16_16'] = {
			func = function(op1, op2) return "\x66\x0F\xB2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16_16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, m16_16",
			opcode = {"66", "0F", "B2", "/r"},
			metadata = "ANY              Volatile",
			operands = {"r16", "m16_16"},
			name = "lss",
		},
		['r32,m16_32'] = {
			func = function(op1, op2) return "\x0F\xB2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m16_32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, m16_32",
			opcode = {"0F", "B2", "/r"},
			metadata = "ANY              Volatile",
			operands = {"r32", "m16_32"},
			name = "lss",
		},
	},
	['vmovd'] = {
		['xmm[3:0],r32[3:0]'] = {
			func = function(op1, op2) return "\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "r32[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[3:0], r32[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F.W0", "6E", "/r"},
			metadata = "AVX",
			operands = {"xmm[3:0]", "r32[3:0]"},
			name = "vmovd",
		},
		['m32,xmm[3:0]'] = {
			func = function(op1, op2) return "\x7E"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, xmm[3:0]",
			opcode = {"VEX.128.66.0F.W0", "7E", "/r"},
			metadata = "AVX",
			operands = {"m32", "xmm[3:0]"},
			name = "vmovd",
		},
		['m64,xmm[3:0]'] = {
			func = function(op1, op2) return "\x7E"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, xmm[3:0]",
			opcode = {"VEX.128.66.0F.W0", "7E", "/r"},
			metadata = "AVX",
			operands = {"m64", "xmm[3:0]"},
			name = "vmovd",
		},
		['r64[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[3:0]", "xmm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64[3:0], xmm[3:0]",
			opcode = {"VEX.128.66.0F.W0", "7E", "/r"},
			metadata = "AVX X64",
			operands = {"r64[3:0]", "xmm[3:0]"},
			name = "vmovd",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm[3:0], r32/m32/m64",
			opcode = {"EVEX.128.66.0F.W0", "6E", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0]", "m32"},
			name = "vmovd",
		},
		['xmm[3:0],r32'] = {
			func = function(op1, op2) return "\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "r32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm[3:0], r32/m32/m64",
			opcode = {"EVEX.128.66.0F.W0", "6E", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0]", "r32"},
			name = "vmovd",
		},
		['r32[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[3:0]", "xmm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, xmm[3:0]",
			opcode = {"VEX.128.66.0F.W0", "7E", "/r"},
			metadata = "AVX",
			operands = {"r32[3:0]", "xmm[3:0]"},
			name = "vmovd",
		},
		['r32,xmm[3:0]'] = {
			func = function(op1, op2) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "xmm[3:0]"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:r32/m32/m64, xmm[3:0]",
			opcode = {"EVEX.128.66.0F.W0", "7E", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "xmm[3:0]"},
			name = "vmovd",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm[3:0], r32/m32/m64",
			opcode = {"EVEX.128.66.0F.W0", "6E", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0]", "m64"},
			name = "vmovd",
		},
		['xmm[3:0],r64[3:0]'] = {
			func = function(op1, op2) return "\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "r64[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm[3:0], r64[3:0]",
			opcode = {"EVEX.128.66.0F.W0", "6E", "/r"},
			metadata = "AVX512_F X64",
			operands = {"xmm[3:0]", "r64[3:0]"},
			name = "vmovd",
		},
	},
	['kxnorw'] = {
		['k[1:0],k[1:0],k[1:0]'] = {
			func = function(op1, op2, op3) return "\x46"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[1:0]", "k[1:0]", "k[1:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[1:0], k[1:0], k[1:0]",
			opcode = {"VEX.NDS.L1.0F.W0", "46", "/r"},
			metadata = "AVX512_F",
			operands = {"k[1:0]", "k[1:0]", "k[1:0]"},
			name = "kxnorw",
		},
	},
	['vcvtuqq2ps'] = {
		['xmm[7:0] {kz},m128'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.F2.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm[7:0] {kz}", "m128"},
			name = "vcvtuqq2ps",
		},
		['ymm {kz},m512'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.F2.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ",
			operands = {"ymm {kz}", "m512"},
			name = "vcvtuqq2ps",
		},
		['xmm[7:0] {kz},b64'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.F2.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm[7:0] {kz}", "b64"},
			name = "vcvtuqq2ps",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.F2.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vcvtuqq2ps",
		},
		['ymm {kz},zmm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.F2.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ",
			operands = {"ymm {kz}", "zmm"},
			name = "vcvtuqq2ps",
		},
		['xmm {kz},ymm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.F2.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "ymm"},
			name = "vcvtuqq2ps",
		},
		['ymm {kz},b64 {er}'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64 {er}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.F2.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ",
			operands = {"ymm {kz}", "b64 {er}"},
			name = "vcvtuqq2ps",
		},
		['xmm[7:0] {kz},xmm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.F2.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm[7:0] {kz}", "xmm"},
			name = "vcvtuqq2ps",
		},
		['xmm {kz},m256'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.F2.0F.W1", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m256"},
			name = "vcvtuqq2ps",
		},
	},
	['vpermq'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x36"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "36", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermq",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "00", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vpermq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x36"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "36", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpermq",
		},
		['ymm,m256,u8'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "m256", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.66.0F3A.W1", "00", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "m256", "u8"},
			name = "vpermq",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "00", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vpermq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x36"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "36", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpermq",
		},
		['zmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "00", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b64", "u8"},
			name = "vpermq",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.66.0F3A.W1", "00", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "i8"},
			name = "vpermq",
		},
		['ymm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "00", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b64", "u8"},
			name = "vpermq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x36"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "36", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermq",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "00", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vpermq",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W1", "00", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vpermq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x36"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "36", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermq",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x36"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "36", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermq",
		},
	},
	['vfmadd231pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "B8", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmadd231pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "B8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmadd231pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "B8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmadd231pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "B8", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmadd231pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "B8", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmadd231pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "B8", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmadd231pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "B8", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfmadd231pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "B8", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmadd231pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "B8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfmadd231pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "B8", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmadd231pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "B8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfmadd231pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "B8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmadd231pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "B8", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmadd231pd",
		},
	},
	['pshuflw'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\xF2\x0F\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"F2", "0F", "70", "/r", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "xmm", "i8"},
			name = "pshuflw",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\xF2\x0F\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"F2", "0F", "70", "/r", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "m128", "u8"},
			name = "pshuflw",
		},
	},
	['vcvttss2usi'] = {
		['r32,xmm[3:0]'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "xmm[3:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F3.0F.W0", "78", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "xmm[3:0]"},
			name = "vcvttss2usi",
		},
		['r64,m64 {sae}'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64 {sae}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F3.0F.W1", "78", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m64 {sae}"},
			name = "vcvttss2usi",
		},
		['r64,xmm[3:0]'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "xmm[3:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F3.0F.W1", "78", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "xmm[3:0]"},
			name = "vcvttss2usi",
		},
		['r32,m64 {sae}'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64 {sae}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F3.0F.W0", "78", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m64 {sae}"},
			name = "vcvttss2usi",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F3.0F.W1", "78", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m32"},
			name = "vcvttss2usi",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F3.0F.W0", "78", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m32"},
			name = "vcvttss2usi",
		},
	},
	['vcvttsd2usi'] = {
		['r32,xmm[7:0]'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "xmm[7:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F2.0F.W0", "78", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "xmm[7:0]"},
			name = "vcvttsd2usi",
		},
		['r64,xmm[7:0]'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "xmm[7:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F2.0F.W1", "78", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "xmm[7:0]"},
			name = "vcvttsd2usi",
		},
		['r32,m64 {sae}'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64 {sae}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F2.0F.W0", "78", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m64 {sae}"},
			name = "vcvttsd2usi",
		},
		['r64,m64 {sae}'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64 {sae}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F2.0F.W1", "78", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m64 {sae}"},
			name = "vcvttsd2usi",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F2.0F.W1", "78", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m32"},
			name = "vcvttsd2usi",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F2.0F.W0", "78", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m32"},
			name = "vcvttsd2usi",
		},
	},
	['vpcomuw'] = {
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xED"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "ED", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vpcomuw",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xED"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "ED", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vpcomuw",
		},
	},
	['cmovnge'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4C", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r32", "m32"},
			name = "cmovnge",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4C", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r32", "r32"},
			name = "cmovnge",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4C", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r32", "m64"},
			name = "cmovnge",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4C", "/r"},
			metadata = "CMOV X64         SF=R OF=R",
			operands = {"r64", "m64"},
			name = "cmovnge",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4C", "/r"},
			metadata = "CMOV X64         SF=R OF=R",
			operands = {"r64", "m32"},
			name = "cmovnge",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4C", "/r"},
			metadata = "CMOV X64         SF=R OF=R",
			operands = {"r64", "r64"},
			name = "cmovnge",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4C", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r16", "r16"},
			name = "cmovnge",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4C", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r16", "m16"},
			name = "cmovnge",
		},
	},
	['pi2fw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x0C" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "0C"},
			metadata = "3DNOW2",
			operands = {"mm", "m32"},
			name = "pi2fw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x0C" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "0C"},
			metadata = "3DNOW2",
			operands = {"mm", "m64"},
			name = "pi2fw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x0C" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "0C"},
			metadata = "3DNOW2",
			operands = {"mm", "mm"},
			name = "pi2fw",
		},
	},
	['vcomisd'] = {
		['xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "R:xmm[7:0], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.66.0F.W1", "2F", "/r"},
			metadata = "AVX512_F OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[7:0]", "xmm[7:0]"},
			name = "vcomisd",
		},
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.LIG.66.0F.WIG", "2F", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[7:0]", "m64"},
			name = "vcomisd",
		},
		['xmm[7:0],m64 {sae}'] = {
			func = function(op1, op2) return "\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64 {sae}"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "R:xmm[7:0], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.66.0F.W1", "2F", "/r"},
			metadata = "AVX512_F OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[7:0]", "m64 {sae}"},
			name = "vcomisd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "R:xmm[7:0], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.66.0F.W1", "2F", "/r"},
			metadata = "AVX512_F OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[7:0]", "m32"},
			name = "vcomisd",
		},
	},
	['mulsd'] = {
		['xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "59", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "xmm[7:0]"},
			name = "mulsd",
		},
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\xF2\x0F\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "59", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m64"},
			name = "mulsd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\xF2\x0F\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "59", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m32"},
			name = "mulsd",
		},
	},
	['vcvttps2udq'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.0F.W0", "78", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vcvttps2udq",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.0F.W0", "78", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vcvttps2udq",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.0F.W0", "78", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vcvttps2udq",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.0F.W0", "78", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vcvttps2udq",
		},
		['zmm {kz},b32 {sae}'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {sae}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.0F.W0", "78", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32 {sae}"},
			name = "vcvttps2udq",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.0F.W0", "78", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vcvttps2udq",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.0F.W0", "78", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vcvttps2udq",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.0F.W0", "78", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vcvttps2udq",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.0F.W0", "78", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vcvttps2udq",
		},
	},
	['pmulhrw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xB7" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "B7"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pmulhrw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xB7" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "B7"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pmulhrw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xB7" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "B7"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pmulhrw",
		},
	},
	['pinsrq'] = {
		['xmm,m32,u8'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x66\x0F\x3A\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m32", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r64/m32/m64, ib/ub",
			opcode = {"REX.W", "66", "0F", "3A", "22", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"xmm", "m32", "u8"},
			name = "pinsrq",
		},
		['xmm,m64,u8'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x66\x0F\x3A\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m64", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r64/m32/m64, ib/ub",
			opcode = {"REX.W", "66", "0F", "3A", "22", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"xmm", "m64", "u8"},
			name = "pinsrq",
		},
		['xmm,r64,i8'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x66\x0F\x3A\x22"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "r64", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r64/m32/m64, ib/ub",
			opcode = {"REX.W", "66", "0F", "3A", "22", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"xmm", "r64", "i8"},
			name = "pinsrq",
		},
	},
	['vcvttps2qq'] = {
		['zmm {kz},ymm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "ymm"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32 {sae}",
			opcode = {"EVEX.512.66.0F.W0", "7A", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "ymm"},
			name = "vcvttps2qq",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vcvttps2qq",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.66.0F.W0", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vcvttps2qq",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.66.0F.W0", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vcvttps2qq",
		},
		['ymm {kz},xmm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.66.0F.W0", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "xmm"},
			name = "vcvttps2qq",
		},
		['zmm {kz},b32 {sae}'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {sae}"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32 {sae}",
			opcode = {"EVEX.512.66.0F.W0", "7A", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "b32 {sae}"},
			name = "vcvttps2qq",
		},
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32 {sae}",
			opcode = {"EVEX.512.66.0F.W0", "7A", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m256"},
			name = "vcvttps2qq",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vcvttps2qq",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vcvttps2qq",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "7A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vcvttps2qq",
		},
	},
	['vcvttpd2uqq'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "78", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vcvttpd2uqq",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "78", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vcvttpd2uqq",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "78", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vcvttpd2uqq",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "78", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vcvttpd2uqq",
		},
		['ymm {kz},b64'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "78", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "b64"},
			name = "vcvttpd2uqq",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "78", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vcvttpd2uqq",
		},
		['zmm {kz},b64 {sae}'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b64 {sae}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F.W1", "78", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "b64 {sae}"},
			name = "vcvttpd2uqq",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F.W1", "78", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm"},
			name = "vcvttpd2uqq",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F.W1", "78", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m512"},
			name = "vcvttpd2uqq",
		},
	},
	['vcvtss2usi'] = {
		['r32,xmm[3:0]'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "xmm[3:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F3.0F.W0", "79", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "xmm[3:0]"},
			name = "vcvtss2usi",
		},
		['r32,m64 {er}'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64 {er}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F3.0F.W0", "79", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m64 {er}"},
			name = "vcvtss2usi",
		},
		['r64,xmm[3:0]'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "xmm[3:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F3.0F.W1", "79", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "xmm[3:0]"},
			name = "vcvtss2usi",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F3.0F.W0", "79", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m32"},
			name = "vcvtss2usi",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F3.0F.W1", "79", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m32"},
			name = "vcvtss2usi",
		},
		['r64,m64 {er}'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64 {er}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F3.0F.W1", "79", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m64 {er}"},
			name = "vcvtss2usi",
		},
	},
	['vpaddd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "FE", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpaddd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "FE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpaddd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "FE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpaddd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "FE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpaddd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "FE", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpaddd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "FE", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpaddd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "FE", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpaddd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "FE", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpaddd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "FE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpaddd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "FE", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpaddd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "FE", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpaddd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "FE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpaddd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xFE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "FE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpaddd",
		},
	},
	['sfence'] = {
		[''] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "AE", "/7"},
			metadata = "MMX2 Volatile",
			operands = {""},
			name = "sfence",
		},
	},
	['psignb'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x38\x08"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "08", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m32"},
			name = "psignb",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x38\x08"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "08", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m64"},
			name = "psignb",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x38\x08"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "08", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "mm"},
			name = "psignb",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x08"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "08", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "m128"},
			name = "psignb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x08"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "08", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "xmm"},
			name = "psignb",
		},
	},
	['vcvtsd2usi'] = {
		['r32,xmm[7:0]'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "xmm[7:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F2.0F.W0", "79", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "xmm[7:0]"},
			name = "vcvtsd2usi",
		},
		['r32,m64 {er}'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64 {er}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F2.0F.W0", "79", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m64 {er}"},
			name = "vcvtsd2usi",
		},
		['r64,xmm[7:0]'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "xmm[7:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F2.0F.W1", "79", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "xmm[7:0]"},
			name = "vcvtsd2usi",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F2.0F.W0", "79", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m32"},
			name = "vcvtsd2usi",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F2.0F.W1", "79", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m32"},
			name = "vcvtsd2usi",
		},
		['r64,m64 {er}'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64 {er}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.LIG.F2.0F.W1", "79", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m64 {er}"},
			name = "vcvtsd2usi",
		},
	},
	['vpmacssww'] = {
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x85"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "85", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vpmacssww",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x85"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "85", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vpmacssww",
		},
	},
	['maxpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "5F", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "maxpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "5F", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "maxpd",
		},
	},
	['vpackusdw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "2B", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpackusdw",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "2B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpackusdw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "2B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpackusdw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "2B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpackusdw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "2B", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpackusdw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "2B", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpackusdw",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "2B", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpackusdw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "2B", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpackusdw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "2B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpackusdw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "2B", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpackusdw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "2B", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpackusdw",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "2B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpackusdw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "2B", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpackusdw",
		},
	},
	['vcvtqq2pd'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.F3.0F.W1", "E6", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vcvtqq2pd",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.F3.0F.W1", "E6", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vcvtqq2pd",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.F3.0F.W1", "E6", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vcvtqq2pd",
		},
		['zmm {kz},b64 {er}'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b64 {er}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.F3.0F.W1", "E6", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "b64 {er}"},
			name = "vcvtqq2pd",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.F3.0F.W1", "E6", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vcvtqq2pd",
		},
		['ymm {kz},b64'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.F3.0F.W1", "E6", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "b64"},
			name = "vcvtqq2pd",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.F3.0F.W1", "E6", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vcvtqq2pd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.F3.0F.W1", "E6", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm"},
			name = "vcvtqq2pd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.F3.0F.W1", "E6", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m512"},
			name = "vcvtqq2pd",
		},
	},
	['vpavgw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "E3", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpavgw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "E3", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpavgw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "E3", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpavgw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E3", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpavgw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E3", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpavgw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E3", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpavgw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "E3", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpavgw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E3", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpavgw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "E3", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpavgw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "E3", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpavgw",
		},
	},
	['vcvtpd2uqq'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "79", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vcvtpd2uqq",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "79", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vcvtpd2uqq",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "79", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vcvtpd2uqq",
		},
		['zmm {kz},b64 {er}'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b64 {er}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.66.0F.W1", "79", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "b64 {er}"},
			name = "vcvtpd2uqq",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "79", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vcvtpd2uqq",
		},
		['ymm {kz},b64'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "79", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "b64"},
			name = "vcvtpd2uqq",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "79", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vcvtpd2uqq",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.66.0F.W1", "79", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm"},
			name = "vcvtpd2uqq",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.66.0F.W1", "79", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m512"},
			name = "vcvtpd2uqq",
		},
	},
	['vfmsub231ss'] = {
		['xmm[3:0] {kz},xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xBB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "BB", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			name = "vfmsub231ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xBB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "BB", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			name = "vfmsub231ss",
		},
		['xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3) return "\xBB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "BB", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfmsub231ss",
		},
		['xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xBB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "BB", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfmsub231ss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xBB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "BB", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfmsub231ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xBB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "BB", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			name = "vfmsub231ss",
		},
	},
	['vpshrdd'] = {
		['xmm {kz},xmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "b32", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "b32", "u8"},
			name = "vpshrdd",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vpshrdd",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vpshrdd",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vpshrdd",
		},
		['ymm {kz},ymm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b32", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "b32", "u8"},
			name = "vpshrdd",
		},
		['zmm {kz},zmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b32", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "b32", "u8"},
			name = "vpshrdd",
		},
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vpshrdd",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vpshrdd",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x73"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "73", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vpshrdd",
		},
	},
	['vprolq'] = {
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W1", "72", "/1", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vprolq",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W1", "72", "/1", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vprolq",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W1", "72", "/1", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vprolq",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W1", "72", "/1", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vprolq",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W1", "72", "/1", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vprolq",
		},
		['xmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b64", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W1", "72", "/1", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64", "u8"},
			name = "vprolq",
		},
		['ymm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b64", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W1", "72", "/1", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b64", "u8"},
			name = "vprolq",
		},
		['zmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b64", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W1", "72", "/1", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b64", "u8"},
			name = "vprolq",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W1", "72", "/1", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vprolq",
		},
	},
	['vptestmw'] = {
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vptestmw",
		},
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vptestmw",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vptestmw",
		},
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "26", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vptestmw",
		},
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vptestmw",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "26", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "m512"},
			name = "vptestmw",
		},
	},
	['vbroadcasti64x2'] = {
		['zmm {kz},m128'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m128"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:zmm {kz}, m128",
			opcode = {"EVEX.512.66.0F38.W1", "5A", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m128"},
			name = "vbroadcasti64x2",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:ymm {kz}, m128",
			opcode = {"EVEX.256.66.0F38.W1", "5A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vbroadcasti64x2",
		},
	},
	['inc'] = {
		['m8'] = {
			func = function(op1) return "\xFE"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8",
			opcode = {"FE", "/0"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"m8"},
			name = "inc",
		},
		['r32'] = {
			func = function(op1) return "\xFF"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64",
			opcode = {"FF", "/0"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"r32"},
			name = "inc",
		},
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xFF"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64",
			opcode = {"REX.W", "FF", "/0"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"m32"},
			name = "inc",
		},
		['r16'] = {
			func = function(op1) return "\x66\xFF"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16",
			opcode = {"66", "FF", "/0"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"r16"},
			name = "inc",
		},
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xFF"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64",
			opcode = {"REX.W", "FF", "/0"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"r64"},
			name = "inc",
		},
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xFF"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64",
			opcode = {"REX.W", "FF", "/0"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"m64"},
			name = "inc",
		},
		['m16'] = {
			func = function(op1) return "\x66\xFF"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16",
			opcode = {"66", "FF", "/0"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"m16"},
			name = "inc",
		},
		['r8'] = {
			func = function(op1) return "\xFE"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8",
			opcode = {"FE", "/0"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"r8"},
			name = "inc",
		},
	},
	['vbroadcasti32x8'] = {
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-T8",
			has_relative = false,
			operands2 = "W:zmm {kz}, m256",
			opcode = {"EVEX.512.66.0F38.W0", "5B", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m256"},
			name = "vbroadcasti32x8",
		},
	},
	['vbroadcasti32x4'] = {
		['zmm {kz},m128'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m128"},
			encoding = "RM-T4",
			has_relative = false,
			operands2 = "W:zmm {kz}, m128",
			opcode = {"EVEX.512.66.0F38.W0", "5A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m128"},
			name = "vbroadcasti32x4",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-T4",
			has_relative = false,
			operands2 = "W:ymm {kz}, m128",
			opcode = {"EVEX.256.66.0F38.W0", "5A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vbroadcasti32x4",
		},
	},
	['vmclear'] = {
		['m32'] = {
			func = function(op1) return "\x66\x0F\xC7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"66", "0F", "C7", "/6"},
			metadata = "VMX X64          PRIVILEGE=L0",
			operands = {"m32"},
			name = "vmclear",
		},
		['m64'] = {
			func = function(op1) return "\x66\x0F\xC7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"66", "0F", "C7", "/6"},
			metadata = "VMX X64          PRIVILEGE=L0",
			operands = {"m64"},
			name = "vmclear",
		},
	},
	['vbroadcasti32x2'] = {
		['zmm {kz},m32'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m32"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W0", "59", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m32"},
			name = "vbroadcasti32x2",
		},
		['ymm {kz},m64'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m64"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W0", "59", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m64"},
			name = "vbroadcasti32x2",
		},
		['zmm {kz},m64'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m64"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W0", "59", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m64"},
			name = "vbroadcasti32x2",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "59", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vbroadcasti32x2",
		},
		['ymm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm[7:0]"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W0", "59", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "xmm[7:0]"},
			name = "vbroadcasti32x2",
		},
		['zmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "xmm[7:0]"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W0", "59", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "xmm[7:0]"},
			name = "vbroadcasti32x2",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "59", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vbroadcasti32x2",
		},
		['ymm {kz},m32'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m32"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W0", "59", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m32"},
			name = "vbroadcasti32x2",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "59", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vbroadcasti32x2",
		},
	},
	['vpshldq'] = {
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vpshldq",
		},
		['ymm {kz},ymm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b64", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "b64", "u8"},
			name = "vpshldq",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vpshldq",
		},
		['xmm {kz},xmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "b64", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "b64", "u8"},
			name = "vpshldq",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vpshldq",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vpshldq",
		},
		['zmm {kz},zmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b64", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "b64", "u8"},
			name = "vpshldq",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vpshldq",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x71"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "71", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vpshldq",
		},
	},
	['shlx'] = {
		['r64,m64,r64'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64", "r64"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, r64",
			opcode = {"VEX.NDS.LZ.66.0F38.W1", "F7", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "m64", "r64"},
			name = "shlx",
		},
		['r32,r32,r32'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "r32"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, r32",
			opcode = {"VEX.NDS.LZ.66.0F38.W0", "F7", "/r"},
			metadata = "BMI2",
			operands = {"r32", "r32", "r32"},
			name = "shlx",
		},
		['r32,m32,r32'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32", "r32"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, r32",
			opcode = {"VEX.NDS.LZ.66.0F38.W0", "F7", "/r"},
			metadata = "BMI2",
			operands = {"r32", "m32", "r32"},
			name = "shlx",
		},
		['r64,r64,r64'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "r64"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, r64",
			opcode = {"VEX.NDS.LZ.66.0F38.W1", "F7", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "r64", "r64"},
			name = "shlx",
		},
		['r32,m64,r32'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64", "r32"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, r32",
			opcode = {"VEX.NDS.LZ.66.0F38.W0", "F7", "/r"},
			metadata = "BMI2",
			operands = {"r32", "m64", "r32"},
			name = "shlx",
		},
		['r64,m32,r64'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32", "r64"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, r64",
			opcode = {"VEX.NDS.LZ.66.0F38.W1", "F7", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "m32", "r64"},
			name = "shlx",
		},
	},
	['korq'] = {
		['k[7:0],k[7:0],k[7:0]'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[7:0]", "k[7:0]", "k[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[7:0], ~k[7:0], ~k[7:0]",
			opcode = {"VEX.L1.0F.W1", "45", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[7:0]", "k[7:0]", "k[7:0]"},
			name = "korq",
		},
	},
	['vbroadcastf32x2'] = {
		['zmm {kz},m64'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m64"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W0", "19", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m64"},
			name = "vbroadcastf32x2",
		},
		['ymm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm[7:0]"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W0", "19", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "xmm[7:0]"},
			name = "vbroadcastf32x2",
		},
		['ymm {kz},m64'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m64"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W0", "19", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m64"},
			name = "vbroadcastf32x2",
		},
		['zmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "xmm[7:0]"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W0", "19", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "xmm[7:0]"},
			name = "vbroadcastf32x2",
		},
		['ymm {kz},m32'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m32"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W0", "19", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m32"},
			name = "vbroadcastf32x2",
		},
		['zmm {kz},m32'] = {
			func = function(op1, op2) return "\x19"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m32"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W0", "19", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m32"},
			name = "vbroadcastf32x2",
		},
	},
	['vblendmw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "66", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vblendmw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "66", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vblendmw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "66", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vblendmw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "66", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vblendmw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "66", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vblendmw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "66", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vblendmw",
		},
	},
	['vblendmps'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "65", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vblendmps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "65", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vblendmps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "65", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vblendmps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "65", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vblendmps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "65", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vblendmps",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "65", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vblendmps",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "65", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vblendmps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "65", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vblendmps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "65", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vblendmps",
		},
	},
	['kshiftlb'] = {
		['k[0],k[0],u8'] = {
			func = function(op1, op2, op3) return "\x32"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[0]", "k[0]", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[0], k[0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W0", "32", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k[0]", "k[0]", "u8"},
			name = "kshiftlb",
		},
		['k[0],k[0],i8'] = {
			func = function(op1, op2, op3) return "\x32"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[0]", "k[0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[0], k[0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W0", "32", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k[0]", "k[0]", "i8"},
			name = "kshiftlb",
		},
	},
	['setng'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9E", "/r"},
			metadata = "ANY              ZF=R SF=R OF=R",
			operands = {"m8"},
			name = "setng",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9E", "/r"},
			metadata = "ANY              ZF=R SF=R OF=R",
			operands = {"r8"},
			name = "setng",
		},
	},
	['vblendmb'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "66", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vblendmb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "66", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vblendmb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "66", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vblendmb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "66", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vblendmb",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "66", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vblendmb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "66", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vblendmb",
		},
	},
	['vpshufd'] = {
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.128.66.0F.W0", "70", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vpshufd",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.256.66.0F.W0", "70", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vpshufd",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.512.66.0F.W0", "70", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vpshufd",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.128.66.0F.W0", "70", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vpshufd",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.256.66.0F.W0", "70", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vpshufd",
		},
		['ymm,m256,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "m256", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.66.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "m256", "u8"},
			name = "vpshufd",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.66.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "m128", "u8"},
			name = "vpshufd",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.66.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "i8"},
			name = "vpshufd",
		},
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.66.0F.WIG", "70", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "i8"},
			name = "vpshufd",
		},
		['zmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b32", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.512.66.0F.W0", "70", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32", "u8"},
			name = "vpshufd",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.512.66.0F.W0", "70", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vpshufd",
		},
		['xmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b32", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.128.66.0F.W0", "70", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32", "u8"},
			name = "vpshufd",
		},
		['ymm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b32", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.256.66.0F.W0", "70", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32", "u8"},
			name = "vpshufd",
		},
	},
	['pmovzxwd'] = {
		['xmm,m64'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "33", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m64"},
			name = "pmovzxwd",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "33", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm[7:0]"},
			name = "pmovzxwd",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x33"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "33", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m32"},
			name = "pmovzxwd",
		},
	},
	['vfmsub132ss'] = {
		['xmm[3:0] {kz},xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "9B", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			name = "vfmsub132ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "9B", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			name = "vfmsub132ss",
		},
		['xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "9B", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfmsub132ss",
		},
		['xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "9B", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfmsub132ss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "9B", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfmsub132ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "9B", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			name = "vfmsub132ss",
		},
	},
	['vdivps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.0F.W0", "5E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vdivps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "5E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vdivps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "5E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vdivps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "5E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vdivps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "5E", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vdivps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "5E", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vdivps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.0F.W0", "5E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vdivps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "5E", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vdivps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "5E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vdivps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "5E", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vdivps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.0F.W0", "5E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vdivps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "5E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vdivps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "5E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vdivps",
		},
	},
	['fincstp'] = {
		[''] = {
			func = function(op1) return "\xD9\xF7" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "F7"},
			metadata = "FPU_TOP=+1       C0=U C1=0 C2=U C3=U",
			operands = {""},
			name = "fincstp",
		},
	},
	['vphaddubd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "D2", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vphaddubd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "D2", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vphaddubd",
		},
	},
	['vminsd'] = {
		['xmm,xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "5D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			name = "vminsd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			name = "vminsd",
		},
		['xmm {kz},xmm[15:8],m64 {sae}'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64 {sae}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[15:8]", "m64 {sae}"},
			name = "vminsd",
		},
		['xmm,xmm[15:8],m64'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "5D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m64"},
			name = "vminsd",
		},
		['xmm,xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "5D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m32"},
			name = "vminsd",
		},
		['xmm {kz},xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			name = "vminsd",
		},
	},
	['vpsubsw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xE9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "E9", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsubsw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "E9", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsubsw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xE9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "E9", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsubsw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E9", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsubsw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xE9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "E9", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsubsw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xE9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E9", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsubsw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xE9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "E9", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsubsw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xE9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "E9", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsubsw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xE9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "E9", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsubsw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xE9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "E9", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsubsw",
		},
	},
	['v4fnmaddss'] = {
		['xmm {kz},xmm,xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4, op5, op6) return "\xAB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "xmm", "xmm", "m128"},
			encoding = "RM-T1_4X",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm, xmm, xmm, m128",
			opcode = {"EVEX.DDS.LIG.F2.0F38.W0", "AB", "/r"},
			metadata = "AVX512_4FMAPS",
			operands = {"xmm {kz}", "xmm", "xmm", "xmm", "xmm", "m128"},
			name = "v4fnmaddss",
		},
	},
	['addpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "58", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "addpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "58", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "addpd",
		},
	},
	['kxorw'] = {
		['k[1:0],k[1:0],k[1:0]'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[1:0]", "k[1:0]", "k[1:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[1:0],~k[1:0],~k[1:0]",
			opcode = {"VEX.NDS.L1.0F.W0", "47", "/r"},
			metadata = "AVX512_F",
			operands = {"k[1:0]", "k[1:0]", "k[1:0]"},
			name = "kxorw",
		},
	},
	['vpblendvb'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "4C", "/r", "/is4"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vpblendvb",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "4C", "/r", "/is4"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vpblendvb",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "4C", "/r", "/is4"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vpblendvb",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x4C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "4C", "/r", "/is4"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vpblendvb",
		},
	},
	['fnsave'] = {
		['m32'] = {
			func = function(op1) return "\xDD"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"DD", "/6"},
			metadata = "FPU              C0=W C1=W C2=W C3=W",
			operands = {"m32"},
			name = "fnsave",
		},
		['m64'] = {
			func = function(op1) return "\xDD"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"DD", "/6"},
			metadata = "FPU              C0=W C1=W C2=W C3=W",
			operands = {"m64"},
			name = "fnsave",
		},
	},
	['movsxd'] = {
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r32/m32/m64",
			opcode = {"REX.W", "63", "/r"},
			metadata = "X64",
			operands = {"r64", "m64"},
			name = "movsxd",
		},
		['r64,r32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r32/m32/m64",
			opcode = {"REX.W", "63", "/r"},
			metadata = "X64",
			operands = {"r64", "r32"},
			name = "movsxd",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r32/m32/m64",
			opcode = {"REX.W", "63", "/r"},
			metadata = "X64",
			operands = {"r64", "m32"},
			name = "movsxd",
		},
	},
	['kxorq'] = {
		['k[7:0],k[7:0],k[7:0]'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[7:0]", "k[7:0]", "k[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[7:0],~k[7:0],~k[7:0]",
			opcode = {"VEX.L1.0F.W1", "47", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[7:0]", "k[7:0]", "k[7:0]"},
			name = "kxorq",
		},
	},
	['divsd'] = {
		['xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "5E", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "xmm[7:0]"},
			name = "divsd",
		},
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\xF2\x0F\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "5E", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m64"},
			name = "divsd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\xF2\x0F\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "5E", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m32"},
			name = "divsd",
		},
	},
	['prefetcht1'] = {
		['m32'] = {
			func = function(op1) return "\x0F\x18"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "18", "/2"},
			metadata = "MMX2",
			operands = {"m32"},
			name = "prefetcht1",
		},
		['m64'] = {
			func = function(op1) return "\x0F\x18"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "18", "/2"},
			metadata = "MMX2",
			operands = {"m64"},
			name = "prefetcht1",
		},
	},
	['kxorb'] = {
		['k[0],k[0],k[0]'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[0]", "k[0]", "k[0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[0]  ,~k[0]  ,~k[0]",
			opcode = {"VEX.L1.66.0F.W0", "47", "/r"},
			metadata = "AVX512_DQ",
			operands = {"k[0]", "k[0]", "k[0]"},
			name = "kxorb",
		},
	},
	['kunpckwd'] = {
		['k[3:0],k[1:0],k[1:0]'] = {
			func = function(op1, op2, op3) return "\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[3:0]", "k[1:0]", "k[1:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[3:0], k[1:0], k[1:0]",
			opcode = {"VEX.NDS.L1.0F.W0", "4B", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "k[1:0]", "k[1:0]"},
			name = "kunpckwd",
		},
	},
	['vpsignd'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x0A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "0A", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsignd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x0A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "0A", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsignd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x0A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "0A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsignd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x0A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "0A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsignd",
		},
	},
	['vmresume'] = {
		[''] = {
			func = function(op1) return "\x0F\x01\xC3" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "01", "C3"},
			metadata = "VMX              PRIVILEGE=L0",
			operands = {""},
			name = "vmresume",
		},
	},
	['kunpckdq'] = {
		['k[7:0],k[3:0],k[3:0]'] = {
			func = function(op1, op2, op3) return "\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[7:0]", "k[3:0]", "k[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[7:0], k[3:0], k[3:0]",
			opcode = {"VEX.NDS.L1.0F.W1", "4B", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[7:0]", "k[3:0]", "k[3:0]"},
			name = "kunpckdq",
		},
	},
	['ktestw'] = {
		['k[1:0],k[1:0]'] = {
			func = function(op1, op2) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[1:0]", "k[1:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~k[1:0], ~k[1:0]",
			opcode = {"VEX.L0.0F.W0", "99", "/r"},
			metadata = "AVX512_DQ OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"k[1:0]", "k[1:0]"},
			name = "ktestw",
		},
	},
	['xrstor'] = {
		['m32'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64, <edx>, <eax>",
			opcode = {"0F", "AE", "/5"},
			metadata = "XSAVE            Volatile XCR=R",
			operands = {"m32"},
			name = "xrstor",
		},
		['m64'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64, <edx>, <eax>",
			opcode = {"0F", "AE", "/5"},
			metadata = "XSAVE            Volatile XCR=R",
			operands = {"m64"},
			name = "xrstor",
		},
	},
	['vrndscalesd'] = {
		['xmm {kz},xmm[15:8],m32,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x0B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W1", "0B", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m32", "ub {sae}"},
			name = "vrndscalesd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x0B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]", "ib"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W1", "0B", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]", "i8"},
			name = "vrndscalesd",
		},
		['xmm {kz},xmm[15:8],m64,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x0B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64", "ub {sae}"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64,ib/ub {sae}",
			opcode = {"EVEX.NDS.LIG.66.0F3A.W1", "0B", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m64", "ub {sae}"},
			name = "vrndscalesd",
		},
	},
	['ktestb'] = {
		['k[0],k[0]'] = {
			func = function(op1, op2) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[0]", "k[0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~k[0], ~k[0]",
			opcode = {"VEX.L0.66.0F.W0", "99", "/r"},
			metadata = "AVX512_DQ OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"k[0]", "k[0]"},
			name = "ktestb",
		},
	},
	['kshiftrd'] = {
		['k[3:0],k[3:0],u8'] = {
			func = function(op1, op2, op3) return "\x31"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[3:0]", "k[3:0]", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[3:0], k[3:0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W0", "31", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "k[3:0]", "u8"},
			name = "kshiftrd",
		},
		['k[3:0],k[3:0],i8'] = {
			func = function(op1, op2, op3) return "\x31"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[3:0]", "k[3:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[3:0], k[3:0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W0", "31", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "k[3:0]", "i8"},
			name = "kshiftrd",
		},
	},
	['kshiftrb'] = {
		['k[0],k[0],u8'] = {
			func = function(op1, op2, op3) return "\x30"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[0]", "k[0]", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[0], k[0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W0", "30", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k[0]", "k[0]", "u8"},
			name = "kshiftrb",
		},
		['k[0],k[0],i8'] = {
			func = function(op1, op2, op3) return "\x30"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[0]", "k[0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[0], k[0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W0", "30", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k[0]", "k[0]", "i8"},
			name = "kshiftrb",
		},
	},
	['kshiftlw'] = {
		['k[1:0],k[1:0],i8'] = {
			func = function(op1, op2, op3) return "\x32"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[1:0]", "k[1:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[1:0], k[1:0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W1", "32", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k[1:0]", "k[1:0]", "i8"},
			name = "kshiftlw",
		},
		['k[1:0],k[1:0],u8'] = {
			func = function(op1, op2, op3) return "\x32"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[1:0]", "k[1:0]", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[1:0], k[1:0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W1", "32", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k[1:0]", "k[1:0]", "u8"},
			name = "kshiftlw",
		},
	},
	['kshiftld'] = {
		['k[3:0],k[3:0],u8'] = {
			func = function(op1, op2, op3) return "\x33"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[3:0]", "k[3:0]", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[3:0], k[3:0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W0", "33", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "k[3:0]", "u8"},
			name = "kshiftld",
		},
		['k[3:0],k[3:0],i8'] = {
			func = function(op1, op2, op3) return "\x33"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k[3:0]", "k[3:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:k[3:0], k[3:0], ib/ub",
			opcode = {"VEX.L0.66.0F3A.W0", "33", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "k[3:0]", "i8"},
			name = "kshiftld",
		},
	},
	['vblendmpd'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "65", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vblendmpd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "65", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vblendmpd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "65", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vblendmpd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "65", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vblendmpd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "65", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vblendmpd",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "65", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vblendmpd",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "65", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vblendmpd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "65", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vblendmpd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x65"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "65", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vblendmpd",
		},
	},
	['kortestw'] = {
		['k[1:0],k[1:0]'] = {
			func = function(op1, op2) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[1:0]", "k[1:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~k[1:0], ~k[1:0]",
			opcode = {"VEX.L0.0F.W0", "98", "/r"},
			metadata = "AVX512_F  OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"k[1:0]", "k[1:0]"},
			name = "kortestw",
		},
	},
	['cmovpo'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4B", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r32", "m32"},
			name = "cmovpo",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4B", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r32", "r32"},
			name = "cmovpo",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4B", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r32", "m64"},
			name = "cmovpo",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4B", "/r"},
			metadata = "CMOV X64         PF=R",
			operands = {"r64", "m64"},
			name = "cmovpo",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4B", "/r"},
			metadata = "CMOV X64         PF=R",
			operands = {"r64", "m32"},
			name = "cmovpo",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4B", "/r"},
			metadata = "CMOV X64         PF=R",
			operands = {"r64", "r64"},
			name = "cmovpo",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4B", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r16", "r16"},
			name = "cmovpo",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4B", "/r"},
			metadata = "CMOV             PF=R",
			operands = {"r16", "m16"},
			name = "cmovpo",
		},
	},
	['fcmovnbe'] = {
		['st(i)'] = {
			func = function(op1) return "\xDB" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"DB", "D0+i"},
			metadata = "FPU CMOV         C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fcmovnbe",
		},
	},
	['kortestq'] = {
		['k[7:0],k[7:0]'] = {
			func = function(op1, op2) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[7:0]", "k[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~k[7:0], ~k[7:0]",
			opcode = {"VEX.L0.0F.W1", "98", "/r"},
			metadata = "AVX512_BW OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"k[7:0]", "k[7:0]"},
			name = "kortestq",
		},
	},
	['kortestd'] = {
		['k[3:0],k[3:0]'] = {
			func = function(op1, op2) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[3:0]", "k[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~k[3:0], ~k[3:0]",
			opcode = {"VEX.L0.66.0F.W1", "98", "/r"},
			metadata = "AVX512_BW OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"k[3:0]", "k[3:0]"},
			name = "kortestd",
		},
	},
	['kortestb'] = {
		['k[0],k[0]'] = {
			func = function(op1, op2) return "\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[0]", "k[0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~k[0], ~k[0]",
			opcode = {"VEX.L0.66.0F.W0", "98", "/r"},
			metadata = "AVX512_DQ OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"k[0]", "k[0]"},
			name = "kortestb",
		},
	},
	['vbroadcastf64x2'] = {
		['zmm {kz},m128'] = {
			func = function(op1, op2) return "\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m128"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:zmm {kz}, m128",
			opcode = {"EVEX.512.66.0F38.W1", "1A", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m128"},
			name = "vbroadcastf64x2",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-T2",
			has_relative = false,
			operands2 = "W:ymm {kz}, m128",
			opcode = {"EVEX.256.66.0F38.W1", "1A", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vbroadcastf64x2",
		},
	},
	['fmulp'] = {
		[''] = {
			func = function(op1) return "\xDE\xC9" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"DE", "C9"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fmulp",
		},
		['st(i)'] = {
			func = function(op1) return "\xDE" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"DE", "C8+i"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fmulp",
		},
	},
	['vfixupimmpd'] = {
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "54", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vfixupimmpd",
		},
		['ymm {kz},ymm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "54", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64", "u8"},
			name = "vfixupimmpd",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "54", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vfixupimmpd",
		},
		['xmm {kz},xmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "54", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64", "u8"},
			name = "vfixupimmpd",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "54", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vfixupimmpd",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "54", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vfixupimmpd",
		},
		['zmm {kz},zmm,b64,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b64", "ub {sae}"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "54", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64", "ub {sae}"},
			name = "vfixupimmpd",
		},
		['zmm {kz},zmm,m512,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub {sae}"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "54", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512", "ub {sae}"},
			name = "vfixupimmpd",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x54"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "54", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vfixupimmpd",
		},
	},
	['fcmove'] = {
		['st(i)'] = {
			func = function(op1) return "\xDA" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"DA", "C8+i"},
			metadata = "FPU CMOV         C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fcmove",
		},
	},
	['vpmovsxbq'] = {
		['xmm,xmm[1:0]'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[1:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[1:0]/m16",
			opcode = {"VEX.128.66.0F38.WIG", "22", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[1:0]"},
			name = "vpmovsxbq",
		},
		['xmm {kz},m16'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m16"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[1:0]/m16",
			opcode = {"EVEX.128.66.0F38.WIG", "22", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m16"},
			name = "vpmovsxbq",
		},
		['ymm,m32'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[3:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "22", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m32"},
			name = "vpmovsxbq",
		},
		['zmm {kz},m32'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m32"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.WIG", "22", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m32"},
			name = "vpmovsxbq",
		},
		['xmm {kz},xmm[1:0]'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[1:0]"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[1:0]/m16",
			opcode = {"EVEX.128.66.0F38.WIG", "22", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[1:0]"},
			name = "vpmovsxbq",
		},
		['ymm {kz},xmm[3:0]'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm[3:0]"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "22", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm[3:0]"},
			name = "vpmovsxbq",
		},
		['zmm {kz},m64'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m64"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.WIG", "22", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m64"},
			name = "vpmovsxbq",
		},
		['xmm,m16'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[1:0]/m16",
			opcode = {"VEX.128.66.0F38.WIG", "22", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m16"},
			name = "vpmovsxbq",
		},
		['zmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "xmm[7:0]"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.WIG", "22", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "xmm[7:0]"},
			name = "vpmovsxbq",
		},
		['ymm {kz},m64'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m64"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "22", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m64"},
			name = "vpmovsxbq",
		},
		['ymm {kz},m32'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m32"},
			encoding = "RM-OVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "22", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m32"},
			name = "vpmovsxbq",
		},
		['ymm,xmm[3:0]'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[3:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "22", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm[3:0]"},
			name = "vpmovsxbq",
		},
		['ymm,m64'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[3:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "22", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m64"},
			name = "vpmovsxbq",
		},
	},
	['vfmaddsub213pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "A6", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmaddsub213pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "A6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmaddsub213pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "A6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmaddsub213pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "A6", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmaddsub213pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "A6", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmaddsub213pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "A6", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmaddsub213pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "A6", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfmaddsub213pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "A6", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmaddsub213pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "A6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfmaddsub213pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "A6", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmaddsub213pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "A6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfmaddsub213pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "A6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmaddsub213pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "A6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmaddsub213pd",
		},
	},
	['knotd'] = {
		['k[3:0],k[3:0]'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[3:0]", "k[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[3:0], k[3:0]",
			opcode = {"VEX.L0.66.0F.W1", "44", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "k[3:0]"},
			name = "knotd",
		},
	},
	['test'] = {
		['r64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r64/m32/m64, id",
			opcode = {"REX.W", "F7", "/0", "id"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "i32"},
			name = "test",
		},
		['m64,u32'] = {
			func = function(op1, op2) return "\xF7"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r32/m32/m64, id/ud",
			opcode = {"F7", "/0", "id"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "u32"},
			name = "test",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x85"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:~r64/m32/m64,~r64",
			opcode = {"REX.W", "85", "/r"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "r64"},
			name = "test",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x85"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:~r32/m32/m64,~r32",
			opcode = {"85", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "r32"},
			name = "test",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\xF6"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r8/m8, ib/ub",
			opcode = {"F6", "/0", "ib"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m8", "u8"},
			name = "test",
		},
		['m16,u16'] = {
			func = function(op1, op2) return "\x66\xF7"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"m16", "uw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r16/m16, iw/uw",
			opcode = {"66", "F7", "/0", "iw"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m16", "u16"},
			name = "test",
		},
		['r32,i32'] = {
			func = function(op1, op2) return "\xF7"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r32/m32/m64, id/ud",
			opcode = {"F7", "/0", "id"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "i32"},
			name = "test",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x85"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:~r64/m32/m64,~r64",
			opcode = {"REX.W", "85", "/r"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "r64"},
			name = "test",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x85"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:~r64/m32/m64,~r64",
			opcode = {"REX.W", "85", "/r"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "r64"},
			name = "test",
		},
		['r8,r8'] = {
			func = function(op1, op2) return "\x84"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:~r8/m8,~r8",
			opcode = {"84", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r8", "r8"},
			name = "test",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x85"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:~r32/m32/m64,~r32",
			opcode = {"85", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "r32"},
			name = "test",
		},
		['eax,i32'] = {
			func = function(op1, op2) return "\xA9"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "R:eax, id/ud",
			opcode = {"A9", "id"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"eax", "i32"},
			name = "test",
		},
		['m32,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r64/m32/m64, id",
			opcode = {"REX.W", "F7", "/0", "id"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "i32"},
			name = "test",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x85"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:~r16/m16,~r16",
			opcode = {"66", "85", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r16", "r16"},
			name = "test",
		},
		['ax,u16'] = {
			func = function(op1, op2) return "\x66\xA9"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "uw"},
			encoding = "I",
			has_relative = false,
			operands2 = "R:ax, iw/uw",
			opcode = {"66", "A9", "iw"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"ax", "u16"},
			name = "test",
		},
		['m64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r64/m32/m64, id",
			opcode = {"REX.W", "F7", "/0", "id"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "i32"},
			name = "test",
		},
		['m8,r8'] = {
			func = function(op1, op2) return "\x84"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:~r8/m8,~r8",
			opcode = {"84", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m8", "r8"},
			name = "test",
		},
		['al,u8'] = {
			func = function(op1, op2) return "\xA8"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "R:al, ib/ub",
			opcode = {"A8", "ib"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"al", "u8"},
			name = "test",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x85"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:~r32/m32/m64,~r32",
			opcode = {"85", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "r32"},
			name = "test",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x85"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:~r16/m16,~r16",
			opcode = {"66", "85", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m16", "r16"},
			name = "test",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\xF6"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r8/m8, ib/ub",
			opcode = {"F6", "/0", "ib"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r8", "i8"},
			name = "test",
		},
		['rax,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xA9"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"rax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "R:rax, id",
			opcode = {"REX.W", "A9", "id"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"rax", "i32"},
			name = "test",
		},
		['eax,u32'] = {
			func = function(op1, op2) return "\xA9"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "ud"},
			encoding = "I",
			has_relative = false,
			operands2 = "R:eax, id/ud",
			opcode = {"A9", "id"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"eax", "u32"},
			name = "test",
		},
		['r16,i16'] = {
			func = function(op1, op2) return "\x66\xF7"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"r16", "iw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r16/m16, iw/uw",
			opcode = {"66", "F7", "/0", "iw"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r16", "i16"},
			name = "test",
		},
		['al,i8'] = {
			func = function(op1, op2) return "\xA8"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "R:al, ib/ub",
			opcode = {"A8", "ib"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"al", "i8"},
			name = "test",
		},
		['m32,u32'] = {
			func = function(op1, op2) return "\xF7"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r32/m32/m64, id/ud",
			opcode = {"F7", "/0", "id"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "u32"},
			name = "test",
		},
		['ax,i16'] = {
			func = function(op1, op2) return "\x66\xA9"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "iw"},
			encoding = "I",
			has_relative = false,
			operands2 = "R:ax, iw/uw",
			opcode = {"66", "A9", "iw"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"ax", "i16"},
			name = "test",
		},
	},
	['knotb'] = {
		['k[0],k[0]'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[0]", "k[0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[0], k[0]",
			opcode = {"VEX.L0.66.0F.W0", "44", "/r"},
			metadata = "AVX512_DQ",
			operands = {"k[0]", "k[0]"},
			name = "knotb",
		},
	},
	['kmovq'] = {
		['m32,k[7:0]'] = {
			func = function(op1, op2) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "k[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, k[7:0]",
			opcode = {"VEX.L0.0F.W1", "91", "/r"},
			metadata = "AVX512_BW",
			operands = {"m32", "k[7:0]"},
			name = "kmovq",
		},
		['k[7:0],m64'] = {
			func = function(op1, op2) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[7:0], k[7:0]/m32/m64",
			opcode = {"VEX.L0.0F.W1", "90", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[7:0]", "m64"},
			name = "kmovq",
		},
		['k[7:0],m32'] = {
			func = function(op1, op2) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[7:0], k[7:0]/m32/m64",
			opcode = {"VEX.L0.0F.W1", "90", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[7:0]", "m32"},
			name = "kmovq",
		},
		['r64,k[7:0]'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "k[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, k[7:0]",
			opcode = {"VEX.L0.F2.0F.W1", "93", "/r"},
			metadata = "AVX512_BW X64",
			operands = {"r64", "k[7:0]"},
			name = "kmovq",
		},
		['k[7:0],r64'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[7:0]", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[7:0], r64",
			opcode = {"VEX.L0.F2.0F.W1", "92", "/r"},
			metadata = "AVX512_BW X64",
			operands = {"k[7:0]", "r64"},
			name = "kmovq",
		},
		['k[7:0],k[7:0]'] = {
			func = function(op1, op2) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[7:0]", "k[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[7:0], k[7:0]/m32/m64",
			opcode = {"VEX.L0.0F.W1", "90", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[7:0]", "k[7:0]"},
			name = "kmovq",
		},
		['m64,k[7:0]'] = {
			func = function(op1, op2) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64", "k[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, k[7:0]",
			opcode = {"VEX.L0.0F.W1", "91", "/r"},
			metadata = "AVX512_BW",
			operands = {"m64", "k[7:0]"},
			name = "kmovq",
		},
	},
	['vpmovmskb'] = {
		['r64[1:0],xmm'] = {
			func = function(op1, op2) return "\xD7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[1:0]", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r64[1:0], xmm",
			opcode = {"VEX.128.66.0F.WIG", "D7", "/r"},
			metadata = "AVX X64",
			operands = {"r64[1:0]", "xmm"},
			name = "vpmovmskb",
		},
		['r64[3:0],ymm'] = {
			func = function(op1, op2) return "\xD7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[3:0]", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r64[3:0], ymm",
			opcode = {"VEX.256.66.0F.WIG", "D7", "/r"},
			metadata = "AVX2 X64",
			operands = {"r64[3:0]", "ymm"},
			name = "vpmovmskb",
		},
		['r32[1:0],xmm'] = {
			func = function(op1, op2) return "\xD7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[1:0]", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r32[1:0], xmm",
			opcode = {"VEX.128.66.0F.WIG", "D7", "/r"},
			metadata = "AVX",
			operands = {"r32[1:0]", "xmm"},
			name = "vpmovmskb",
		},
		['r32[3:0],ymm'] = {
			func = function(op1, op2) return "\xD7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[3:0]", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r32[3:0], ymm",
			opcode = {"VEX.256.66.0F.WIG", "D7", "/r"},
			metadata = "AVX2",
			operands = {"r32[3:0]", "ymm"},
			name = "vpmovmskb",
		},
	},
	['fmul'] = {
		['st(0),st(i)'] = {
			func = function(op1, op2) return "\xD8" end,
			real_operands = {"st(0)", "st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(0), st(i)",
			opcode = {"D8", "C8+i"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"st(0)", "st(i)"},
			name = "fmul",
		},
		['st(i),st(0)'] = {
			func = function(op1, op2) return "\xDC" end,
			real_operands = {"st(i)", "st(0)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i), st(0)",
			opcode = {"DC", "C8+i"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"st(i)", "st(0)"},
			name = "fmul",
		},
		['m32'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "m32/m64fp",
			opcode = {"DC", "/1"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m32"},
			name = "fmul",
		},
		['m64fp'] = {
			func = function(op1) return "\xDC"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64fp"},
			encoding = "M",
			has_relative = false,
			operands2 = "m32/m64fp",
			opcode = {"DC", "/1"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {"m64fp"},
			name = "fmul",
		},
	},
	['kmovd'] = {
		['k[3:0],r32[3:0]'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[3:0]", "r32[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[3:0], r32[3:0]",
			opcode = {"VEX.L0.F2.0F.W0", "92", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "r32[3:0]"},
			name = "kmovd",
		},
		['r64[3:0],k[3:0]'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[3:0]", "k[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64[3:0], k[3:0]",
			opcode = {"VEX.L0.F2.0F.W0", "93", "/r"},
			metadata = "AVX512_BW X64",
			operands = {"r64[3:0]", "k[3:0]"},
			name = "kmovd",
		},
		['k[3:0],r64[3:0]'] = {
			func = function(op1, op2) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[3:0]", "r64[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[3:0], r64[3:0]",
			opcode = {"VEX.L0.F2.0F.W0", "92", "/r"},
			metadata = "AVX512_BW X64",
			operands = {"k[3:0]", "r64[3:0]"},
			name = "kmovd",
		},
		['r32[3:0],k[3:0]'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[3:0]", "k[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32[3:0], k[3:0]",
			opcode = {"VEX.L0.F2.0F.W0", "93", "/r"},
			metadata = "AVX512_BW",
			operands = {"r32[3:0]", "k[3:0]"},
			name = "kmovd",
		},
		['k[3:0],m32'] = {
			func = function(op1, op2) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[3:0], k[3:0]/m32/m64",
			opcode = {"VEX.L0.66.0F.W1", "90", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "m32"},
			name = "kmovd",
		},
		['m64,k[3:0]'] = {
			func = function(op1, op2) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64", "k[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, k[3:0]",
			opcode = {"VEX.L0.66.0F.W1", "91", "/r"},
			metadata = "AVX512_BW",
			operands = {"m64", "k[3:0]"},
			name = "kmovd",
		},
		['m32,k[3:0]'] = {
			func = function(op1, op2) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "k[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, k[3:0]",
			opcode = {"VEX.L0.66.0F.W1", "91", "/r"},
			metadata = "AVX512_BW",
			operands = {"m32", "k[3:0]"},
			name = "kmovd",
		},
		['k[3:0],m64'] = {
			func = function(op1, op2) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[3:0], k[3:0]/m32/m64",
			opcode = {"VEX.L0.66.0F.W1", "90", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "m64"},
			name = "kmovd",
		},
		['k[3:0],k[3:0]'] = {
			func = function(op1, op2) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[3:0]", "k[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[3:0], k[3:0]/m32/m64",
			opcode = {"VEX.L0.66.0F.W1", "90", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "k[3:0]"},
			name = "kmovd",
		},
	},
	['kandw'] = {
		['k[1:0],k[1:0],k[1:0]'] = {
			func = function(op1, op2, op3) return "\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[1:0]", "k[1:0]", "k[1:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[1:0],~k[1:0],~k[1:0]",
			opcode = {"VEX.NDS.L1.0F.W0", "41", "/r"},
			metadata = "AVX512_F",
			operands = {"k[1:0]", "k[1:0]", "k[1:0]"},
			name = "kandw",
		},
	},
	['kandq'] = {
		['k[7:0],k[7:0],k[7:0]'] = {
			func = function(op1, op2, op3) return "\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[7:0]", "k[7:0]", "k[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[7:0],~k[7:0],~k[7:0]",
			opcode = {"VEX.L1.0F.W1", "41", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[7:0]", "k[7:0]", "k[7:0]"},
			name = "kandq",
		},
	},
	['kandnq'] = {
		['k[7:0],k[7:0],k[7:0]'] = {
			func = function(op1, op2, op3) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[7:0]", "k[7:0]", "k[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[7:0], k[7:0], k[7:0]",
			opcode = {"VEX.L1.0F.W1", "42", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[7:0]", "k[7:0]", "k[7:0]"},
			name = "kandnq",
		},
	},
	['vshufps'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.0F.WIG", "C6", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vshufps",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.0F.WIG", "C6", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vshufps",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.0F.W0", "C6", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vshufps",
		},
		['xmm {kz},xmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.0F.W0", "C6", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64", "u8"},
			name = "vshufps",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.0F.W0", "C6", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vshufps",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.0F.W0", "C6", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vshufps",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.0F.WIG", "C6", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vshufps",
		},
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.0F.WIG", "C6", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vshufps",
		},
		['zmm {kz},zmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.0F.W0", "C6", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64", "u8"},
			name = "vshufps",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.0F.W0", "C6", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vshufps",
		},
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.0F.W0", "C6", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vshufps",
		},
		['ymm {kz},ymm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.0F.W0", "C6", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64", "u8"},
			name = "vshufps",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.0F.W0", "C6", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vshufps",
		},
	},
	['lwpval'] = {
		['r64,r32,i32'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r64", "r32", "id"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "R:r64, R:r32/m32/m64, id/ud",
			opcode = {"XOP.L0.P0.M0A.W1", "12", "/1", "id"},
			metadata = "LWP X64",
			operands = {"r64", "r32", "i32"},
			name = "lwpval",
		},
		['r32,m32,u32'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r32", "m32", "ud"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "R:r32, R:r32/m32/m64, id/ud",
			opcode = {"XOP.L0.P0.M0A.W0", "12", "/1", "id"},
			metadata = "LWP",
			operands = {"r32", "m32", "u32"},
			name = "lwpval",
		},
		['r32,r32,i32'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r32", "r32", "id"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "R:r32, R:r32/m32/m64, id/ud",
			opcode = {"XOP.L0.P0.M0A.W0", "12", "/1", "id"},
			metadata = "LWP",
			operands = {"r32", "r32", "i32"},
			name = "lwpval",
		},
		['r32,m64,u32'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r32", "m64", "ud"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "R:r32, R:r32/m32/m64, id/ud",
			opcode = {"XOP.L0.P0.M0A.W0", "12", "/1", "id"},
			metadata = "LWP",
			operands = {"r32", "m64", "u32"},
			name = "lwpval",
		},
		['r64,m64,u32'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r64", "m64", "ud"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "R:r64, R:r32/m32/m64, id/ud",
			opcode = {"XOP.L0.P0.M0A.W1", "12", "/1", "id"},
			metadata = "LWP X64",
			operands = {"r64", "m64", "u32"},
			name = "lwpval",
		},
		['r64,m32,u32'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r64", "m32", "ud"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "R:r64, R:r32/m32/m64, id/ud",
			opcode = {"XOP.L0.P0.M0A.W1", "12", "/1", "id"},
			metadata = "LWP X64",
			operands = {"r64", "m32", "u32"},
			name = "lwpval",
		},
	},
	['hsubps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xF2\x0F\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"F2", "0F", "7D", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "m128"},
			name = "hsubps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xF2\x0F\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"F2", "0F", "7D", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "xmm"},
			name = "hsubps",
		},
	},
	['vpshldw'] = {
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "70", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vpshldw",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "70", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vpshldw",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "70", "/r", "ib"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vpshldw",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "70", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vpshldw",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "70", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vpshldw",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "70", "/r", "ib"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vpshldw",
		},
	},
	['kaddw'] = {
		['k[1:0],k[1:0],k[1:0]'] = {
			func = function(op1, op2, op3) return "\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[1:0]", "k[1:0]", "k[1:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[1:0],~k[1:0],~k[1:0]",
			opcode = {"VEX.L1.0F.W0", "4A", "/r"},
			metadata = "AVX512_DQ",
			operands = {"k[1:0]", "k[1:0]", "k[1:0]"},
			name = "kaddw",
		},
	},
	['vmovmskpd'] = {
		['r64[0],xmm'] = {
			func = function(op1, op2) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64[0], xmm",
			opcode = {"VEX.128.66.0F.WIG", "50", "/r"},
			metadata = "AVX X64",
			operands = {"r64[0]", "xmm"},
			name = "vmovmskpd",
		},
		['r32[0],xmm'] = {
			func = function(op1, op2) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32[0], xmm",
			opcode = {"VEX.128.66.0F.WIG", "50", "/r"},
			metadata = "AVX",
			operands = {"r32[0]", "xmm"},
			name = "vmovmskpd",
		},
		['r32[0],ymm'] = {
			func = function(op1, op2) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[0]", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32[0], ymm",
			opcode = {"VEX.256.66.0F.WIG", "50", "/r"},
			metadata = "AVX",
			operands = {"r32[0]", "ymm"},
			name = "vmovmskpd",
		},
		['r64[0],ymm'] = {
			func = function(op1, op2) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[0]", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64[0], ymm",
			opcode = {"VEX.256.66.0F.WIG", "50", "/r"},
			metadata = "AVX X64",
			operands = {"r64[0]", "ymm"},
			name = "vmovmskpd",
		},
	},
	['kaddq'] = {
		['k[7:0],k[7:0],k[7:0]'] = {
			func = function(op1, op2, op3) return "\x4A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[7:0]", "k[7:0]", "k[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[7:0],~k[7:0],~k[7:0]",
			opcode = {"VEX.L1.0F.W1", "4A", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[7:0]", "k[7:0]", "k[7:0]"},
			name = "kaddq",
		},
	},
	['vmaxss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			name = "vmaxss",
		},
		['xmm,xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "5F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			name = "vmaxss",
		},
		['xmm {kz},xmm[15:4],m64 {sae}'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64 {sae}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[15:4]", "m64 {sae}"},
			name = "vmaxss",
		},
		['xmm,xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "5F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m32"},
			name = "vmaxss",
		},
		['xmm,xmm[15:4],m64'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "5F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m64"},
			name = "vmaxss",
		},
		['xmm {kz},xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			name = "vmaxss",
		},
	},
	['phaddd'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x38\x02"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "38", "02", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m32"},
			name = "phaddd",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x38\x02"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "38", "02", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m64"},
			name = "phaddd",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x38\x02"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "38", "02", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "mm"},
			name = "phaddd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x02"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "02", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "m128"},
			name = "phaddd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x02"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "02", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "xmm"},
			name = "phaddd",
		},
	},
	['wrgsbase'] = {
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF3\x0F\xAE"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r64",
			opcode = {"REX.W", "F3", "0F", "AE", "/3"},
			metadata = "FSGSBASE X64     Volatile",
			operands = {"r64"},
			name = "wrgsbase",
		},
		['r32'] = {
			func = function(op1) return "\xF3\x0F\xAE"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r32",
			opcode = {"F3", "0F", "AE", "/3"},
			metadata = "FSGSBASE X64     Volatile",
			operands = {"r32"},
			name = "wrgsbase",
		},
	},
	['vfnmadd231pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "BC", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfnmadd231pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "BC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfnmadd231pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "BC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfnmadd231pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "BC", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfnmadd231pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "BC", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfnmadd231pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "BC", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfnmadd231pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "BC", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfnmadd231pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "BC", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfnmadd231pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "BC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfnmadd231pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "BC", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfnmadd231pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "BC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfnmadd231pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "BC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfnmadd231pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xBC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "BC", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfnmadd231pd",
		},
	},
	['vpshlq'] = {
		['xmm,m128,xmm'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "97", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128", "xmm"},
			name = "vpshlq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"XOP.NDS.L0.P0.M09.W1", "97", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128"},
			name = "vpshlq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "97", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpshlq",
		},
	},
	['cvtsd2ss'] = {
		['xmm[3:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "5A", "/r"},
			metadata = "SSE2",
			operands = {"xmm[3:0]", "xmm[7:0]"},
			name = "cvtsd2ss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\xF2\x0F\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "5A", "/r"},
			metadata = "SSE2",
			operands = {"xmm[3:0]", "m32"},
			name = "cvtsd2ss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\xF2\x0F\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "5A", "/r"},
			metadata = "SSE2",
			operands = {"xmm[3:0]", "m64"},
			name = "cvtsd2ss",
		},
	},
	['outsd'] = {
		['dx,ds:zsi'] = {
			func = function(op1, op2) return "\x6F" end,
			real_operands = {"dx", "ds:zsi"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:dx, R:ds:zsi",
			opcode = {"6F"},
			metadata = "ANY _Rep         Volatile",
			operands = {"dx", "ds:zsi"},
			name = "outsd",
		},
	},
	['vcvtusi2sd'] = {
		['xmm,xmm[15:8],r64'] = {
			func = function(op1, op2, op3) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "r64"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], r64/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "7B", "/r"},
			metadata = "AVX512_F X64",
			operands = {"xmm", "xmm[15:8]", "r64"},
			name = "vcvtusi2sd",
		},
		['xmm,xmm[15:8],r32'] = {
			func = function(op1, op2, op3) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "r32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], r32/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W0", "7B", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm[15:8]", "r32"},
			name = "vcvtusi2sd",
		},
		['xmm,xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], r64/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "7B", "/r"},
			metadata = "AVX512_F X64",
			operands = {"xmm", "xmm[15:8]", "m32"},
			name = "vcvtusi2sd",
		},
		['xmm,xmm[15:8],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], r64/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "7B", "/r"},
			metadata = "AVX512_F X64",
			operands = {"xmm", "xmm[15:8]", "m64 {er}"},
			name = "vcvtusi2sd",
		},
	},
	['vprotb'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\xC0"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "C0", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "i8"},
			name = "vprotb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"XOP.NDS.L0.P0.M09.W1", "90", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128"},
			name = "vprotb",
		},
		['xmm,m128,xmm'] = {
			func = function(op1, op2, op3) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "90", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128", "xmm"},
			name = "vprotb",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\xC0"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "C0", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "m128", "u8"},
			name = "vprotb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "90", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm"},
			name = "vprotb",
		},
	},
	['vpshaq'] = {
		['xmm,m128,xmm'] = {
			func = function(op1, op2, op3) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "9B", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128", "xmm"},
			name = "vpshaq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"XOP.NDS.L0.P0.M09.W1", "9B", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128"},
			name = "vpshaq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "9B", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpshaq",
		},
	},
	['vprotw'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\xC1"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "C1", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "i8"},
			name = "vprotw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"XOP.NDS.L0.P0.M09.W1", "91", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128"},
			name = "vprotw",
		},
		['xmm,m128,xmm'] = {
			func = function(op1, op2, op3) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "91", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128", "xmm"},
			name = "vprotw",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\xC1"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "C1", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "m128", "u8"},
			name = "vprotw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "91", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm"},
			name = "vprotw",
		},
	},
	['vprotq'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\xC3"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "C3", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "i8"},
			name = "vprotq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"XOP.NDS.L0.P0.M09.W1", "93", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128"},
			name = "vprotq",
		},
		['xmm,m128,xmm'] = {
			func = function(op1, op2, op3) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "93", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128", "xmm"},
			name = "vprotq",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\xC3"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "C3", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "m128", "u8"},
			name = "vprotq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "93", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm"},
			name = "vprotq",
		},
	},
	['fxsave'] = {
		['m32'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m32"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"0F", "AE", "/0"},
			metadata = "FXSR             Volatile",
			operands = {"m32"},
			name = "fxsave",
		},
		['m64'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m64"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"0F", "AE", "/0"},
			metadata = "FXSR             Volatile",
			operands = {"m64"},
			name = "fxsave",
		},
	},
	['vscatterpf1qpd'] = {
		['m64z {k}'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64z {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C7", "/6"},
			metadata = "AVX512_PFI",
			operands = {"m64z {k}"},
			name = "vscatterpf1qpd",
		},
		['vm32'] = {
			func = function(op1) return "\xC7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C7", "/6"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vscatterpf1qpd",
		},
	},
	['vgatherqps'] = {
		['ymm {k},m64y'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {k}", "m64y"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W0", "93", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "m64y"},
			name = "vgatherqps",
		},
		['xmm,m64x,xmm'] = {
			func = function(op1, op2, op3) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64x", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64x, X:xmm",
			opcode = {"VEX.DDS.128.66.0F38.W0", "93", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m64x", "xmm"},
			name = "vgatherqps",
		},
		['xmm,m64y,xmm'] = {
			func = function(op1, op2, op3) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64y", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64y, X:xmm",
			opcode = {"VEX.DDS.256.66.0F38.W0", "93", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m64y", "xmm"},
			name = "vgatherqps",
		},
		['xmm {k},m64x'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {k}", "m64x"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W0", "93", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "m64x"},
			name = "vgatherqps",
		},
		['ymm {k},vm32'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W0", "93", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "vm32"},
			name = "vgatherqps",
		},
		['zmm {k},m64z'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {k}", "m64z"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W0", "93", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "m64z"},
			name = "vgatherqps",
		},
		['zmm {k},vm32'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W0", "93", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "vm32"},
			name = "vgatherqps",
		},
		['xmm {k},vm32'] = {
			func = function(op1, op2) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W0", "93", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "vm32"},
			name = "vgatherqps",
		},
		['xmm,vm32,xmm'] = {
			func = function(op1, op2, op3) return "\x93"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "vm32", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64y, X:xmm",
			opcode = {"VEX.DDS.256.66.0F38.W0", "93", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "vm32", "xmm"},
			name = "vgatherqps",
		},
	},
	['pcmpestri'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x61"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<ecx>,<eax>,<edx>",
			opcode = {"66", "0F", "3A", "61", "/r", "ib"},
			metadata = "SSE4_2 OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "xmm", "i8"},
			name = "pcmpestri",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x61"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<ecx>,<eax>,<edx>",
			opcode = {"66", "0F", "3A", "61", "/r", "ib"},
			metadata = "SSE4_2 OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "m128", "u8"},
			name = "pcmpestri",
		},
	},
	['vpperm'] = {
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\xA3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "A3", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vpperm",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\xA3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "A3", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vpperm",
		},
		['xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4) return "\xA3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128",
			opcode = {"XOP.NDS.L0.P0.M08.W1", "A3", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "m128"},
			name = "vpperm",
		},
	},
	['psignd'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x38\x0A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "0A", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m32"},
			name = "psignd",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x38\x0A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "0A", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m64"},
			name = "psignd",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x38\x0A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "0A", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "mm"},
			name = "psignd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x0A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "0A", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "m128"},
			name = "psignd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x0A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "0A", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "xmm"},
			name = "psignd",
		},
	},
	['vpmadcsswd'] = {
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "A6", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vpmadcsswd",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\xA6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "A6", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vpmadcsswd",
		},
	},
	['vpmacswd'] = {
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "96", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vpmacswd",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "96", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vpmacswd",
		},
	},
	['vpmacssdql'] = {
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x87"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "87", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vpmacssdql",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x87"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "87", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vpmacssdql",
		},
	},
	['vpmacsdqh'] = {
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "9F", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vpmacsdqh",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "9F", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vpmacsdqh",
		},
	},
	['punpcklbw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x60"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "60", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "punpcklbw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x60"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "60", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "punpcklbw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x60"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "60", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "punpcklbw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x60"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "60", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "punpcklbw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x60"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "60", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "punpcklbw",
		},
	},
	['vfmadd132ss'] = {
		['xmm[3:0] {kz},xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz},xmm[3:0],xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "99", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			name = "vfmadd132ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz},xmm[3:0],xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "99", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			name = "vfmadd132ss",
		},
		['xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "99", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfmadd132ss",
		},
		['xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "99", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfmadd132ss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "99", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfmadd132ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz},xmm[3:0],xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "99", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			name = "vfmadd132ss",
		},
	},
	['f2xm1'] = {
		[''] = {
			func = function(op1) return "\xD9\xF0" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "F0"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "f2xm1",
		},
	},
	['cvtpd2dq'] = {
		['xmm[7:0],xmm'] = {
			func = function(op1, op2) return "\xF2\x0F\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm/m128",
			opcode = {"F2", "0F", "E6", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "xmm"},
			name = "cvtpd2dq",
		},
		['xmm[7:0],m128'] = {
			func = function(op1, op2) return "\xF2\x0F\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm/m128",
			opcode = {"F2", "0F", "E6", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m128"},
			name = "cvtpd2dq",
		},
	},
	['invpcid'] = {
		['r32,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x82"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r32, R:m128",
			opcode = {"66", "0F", "38", "82", "/r"},
			metadata = "I486 X86         Volatile PRIVILEGE=L0",
			operands = {"r32", "m128"},
			name = "invpcid",
		},
		['r64,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x82"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r64, R:m128",
			opcode = {"66", "0F", "38", "82", "/r"},
			metadata = "I486 X64         Volatile PRIVILEGE=L0",
			operands = {"r64", "m128"},
			name = "invpcid",
		},
	},
	['popcnt'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\xF3\x0F\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"F3", "0F", "B8", "/r"},
			metadata = "POPCNT           OF=0 SF=0 ZF=W AF=0 PF=0 CF=0",
			operands = {"r32", "m32"},
			name = "popcnt",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\xF3\x0F\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"F3", "0F", "B8", "/r"},
			metadata = "POPCNT           OF=0 SF=0 ZF=W AF=0 PF=0 CF=0",
			operands = {"r32", "r32"},
			name = "popcnt",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\xF3\x0F\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"F3", "0F", "B8", "/r"},
			metadata = "POPCNT           OF=0 SF=0 ZF=W AF=0 PF=0 CF=0",
			operands = {"r32", "m64"},
			name = "popcnt",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "F3", "0F", "B8", "/r"},
			metadata = "POPCNT X64       OF=0 SF=0 ZF=W AF=0 PF=0 CF=0",
			operands = {"r64", "m64"},
			name = "popcnt",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "F3", "0F", "B8", "/r"},
			metadata = "POPCNT X64       OF=0 SF=0 ZF=W AF=0 PF=0 CF=0",
			operands = {"r64", "m32"},
			name = "popcnt",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "F3", "0F", "B8", "/r"},
			metadata = "POPCNT X64       OF=0 SF=0 ZF=W AF=0 PF=0 CF=0",
			operands = {"r64", "r64"},
			name = "popcnt",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\xF3\x0F\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r16, r16/m16",
			opcode = {"66", "F3", "0F", "B8", "/r"},
			metadata = "POPCNT           OF=0 SF=0 ZF=W AF=0 PF=0 CF=0",
			operands = {"r16", "r16"},
			name = "popcnt",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\xF3\x0F\xB8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r16, r16/m16",
			opcode = {"66", "F3", "0F", "B8", "/r"},
			metadata = "POPCNT           OF=0 SF=0 ZF=W AF=0 PF=0 CF=0",
			operands = {"r16", "m16"},
			name = "popcnt",
		},
	},
	['pinsrb'] = {
		['xmm,m8,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x20"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m8", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r32[0]/m8, ib/ub",
			opcode = {"66", "0F", "3A", "20", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "m8", "u8"},
			name = "pinsrb",
		},
		['xmm,r32[0],i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x20"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "r32[0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r32[0]/m8, ib/ub",
			opcode = {"66", "0F", "3A", "20", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "r32[0]", "i8"},
			name = "pinsrb",
		},
		['xmm,r64[0],i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x20"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "r64[0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r64[0], ib/ub",
			opcode = {"66", "0F", "3A", "20", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"xmm", "r64[0]", "i8"},
			name = "pinsrb",
		},
		['xmm,r64[0],u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x20"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "r64[0]", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r64[0], ib/ub",
			opcode = {"66", "0F", "3A", "20", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"xmm", "r64[0]", "u8"},
			name = "pinsrb",
		},
	},
	['vptestmb'] = {
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vptestmb",
		},
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vptestmb",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vptestmb",
		},
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "26", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vptestmb",
		},
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vptestmb",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "26", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "m512"},
			name = "vptestmb",
		},
	},
	['bt'] = {
		['m16,u8'] = {
			func = function(op1, op2) return "\x66\x0F\xBA"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r16/m16, ib/ub",
			opcode = {"66", "0F", "BA", "/4", "ib"},
			metadata = "ANY              OF=U SF=U AF=U PF=U CF=W",
			operands = {"m16", "u8"},
			name = "bt",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\xA3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r32/m32/m64, r32",
			opcode = {"0F", "A3", "/r"},
			metadata = "ANY              OF=U SF=U AF=U PF=U CF=W",
			operands = {"r32", "r32"},
			name = "bt",
		},
		['m32,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xBA"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "0F", "BA", "/4", "ib"},
			metadata = "X64              OF=U SF=U AF=U PF=U CF=W",
			operands = {"m32", "u8"},
			name = "bt",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xA3"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r64/m32/m64, r64",
			opcode = {"REX.W", "0F", "A3", "/r"},
			metadata = "X64              OF=U SF=U AF=U PF=U CF=W",
			operands = {"m32", "r64"},
			name = "bt",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x0F\xA3"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r32/m32/m64, r32",
			opcode = {"0F", "A3", "/r"},
			metadata = "ANY              OF=U SF=U AF=U PF=U CF=W",
			operands = {"m64", "r32"},
			name = "bt",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x0F\xA3"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r32/m32/m64, r32",
			opcode = {"0F", "A3", "/r"},
			metadata = "ANY              OF=U SF=U AF=U PF=U CF=W",
			operands = {"m32", "r32"},
			name = "bt",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\xA3"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r16/m16, r16",
			opcode = {"66", "0F", "A3", "/r"},
			metadata = "ANY              OF=U SF=U AF=U PF=U CF=W",
			operands = {"m16", "r16"},
			name = "bt",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xBA"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "0F", "BA", "/4", "ib"},
			metadata = "X64              OF=U SF=U AF=U PF=U CF=W",
			operands = {"r64", "i8"},
			name = "bt",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xA3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r64/m32/m64, r64",
			opcode = {"REX.W", "0F", "A3", "/r"},
			metadata = "X64              OF=U SF=U AF=U PF=U CF=W",
			operands = {"r64", "r64"},
			name = "bt",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xA3"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r64/m32/m64, r64",
			opcode = {"REX.W", "0F", "A3", "/r"},
			metadata = "X64              OF=U SF=U AF=U PF=U CF=W",
			operands = {"m64", "r64"},
			name = "bt",
		},
		['m64,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xBA"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "0F", "BA", "/4", "ib"},
			metadata = "X64              OF=U SF=U AF=U PF=U CF=W",
			operands = {"m64", "u8"},
			name = "bt",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\x0F\xBA"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r32/m32/m64, ib/ub",
			opcode = {"0F", "BA", "/4", "ib"},
			metadata = "ANY              OF=U SF=U AF=U PF=U CF=W",
			operands = {"r32", "i8"},
			name = "bt",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\xA3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "R:r16/m16, r16",
			opcode = {"66", "0F", "A3", "/r"},
			metadata = "ANY              OF=U SF=U AF=U PF=U CF=W",
			operands = {"r16", "r16"},
			name = "bt",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\x0F\xBA"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "R:r16/m16, ib/ub",
			opcode = {"66", "0F", "BA", "/4", "ib"},
			metadata = "ANY              OF=U SF=U AF=U PF=U CF=W",
			operands = {"r16", "i8"},
			name = "bt",
		},
	},
	['vpcmpistri'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x63"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<ecx>",
			opcode = {"VEX.128.66.0F3A.WIG", "63", "/r", "ib"},
			metadata = "AVX OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "xmm", "i8"},
			name = "vpcmpistri",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x63"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<ecx>",
			opcode = {"VEX.128.66.0F3A.WIG", "63", "/r", "ib"},
			metadata = "AVX OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "m128", "u8"},
			name = "vpcmpistri",
		},
	},
	['vphaddwd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xC6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "C6", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vphaddwd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xC6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "C6", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vphaddwd",
		},
	},
	['vphaddudq'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "DB", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vphaddudq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "DB", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vphaddudq",
		},
	},
	['blcs'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r32", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/3"},
			metadata = "TBM",
			operands = {"r32", "m32"},
			name = "blcs",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r32", "r32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/3"},
			metadata = "TBM",
			operands = {"r32", "r32"},
			name = "blcs",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r32", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/3"},
			metadata = "TBM",
			operands = {"r32", "m64"},
			name = "blcs",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r64", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/3"},
			metadata = "TBM X64",
			operands = {"r64", "m64"},
			name = "blcs",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r64", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/3"},
			metadata = "TBM X64",
			operands = {"r64", "m32"},
			name = "blcs",
		},
		['r64,r64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r64", "r64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/3"},
			metadata = "TBM X64",
			operands = {"r64", "r64"},
			name = "blcs",
		},
	},
	['vphaddubw'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "D1", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vphaddubw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "D1", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vphaddubw",
		},
	},
	['jz'] = {
		['string'] = {
			func = function(op1) return "\x0F\x84"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"string"},
			encoding = "D",
			has_relative = false,
			operands2 = "rel32",
			opcode = {"0F", "84", "cd"},
			metadata = "ANY              Control=Branch ZF=R",
			operands = {"string"},
			name = "jz",
		},
	},
	['sha256rnds2'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x38\xCB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "xmm, xmm/m128, <xmm0>",
			opcode = {"0F", "38", "CB", "/r"},
			metadata = "SHA",
			operands = {"xmm", "m128"},
			name = "sha256rnds2",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x38\xCB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "xmm, xmm/m128, <xmm0>",
			opcode = {"0F", "38", "CB", "/r"},
			metadata = "SHA",
			operands = {"xmm", "xmm"},
			name = "sha256rnds2",
		},
	},
	['lmsw'] = {
		['m16'] = {
			func = function(op1) return "\x0F\x01"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r16/m16",
			opcode = {"0F", "01", "/6"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {"m16"},
			name = "lmsw",
		},
		['r16'] = {
			func = function(op1) return "\x0F\x01"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r16/m16",
			opcode = {"0F", "01", "/6"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {"r16"},
			name = "lmsw",
		},
	},
	['vaesenc'] = {
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "DC", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"ymm", "ymm", "m256"},
			name = "vaesenc",
		},
		['zmm,zmm,m512'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "DC", "/r"},
			metadata = "AVX512_F    VAES",
			operands = {"zmm", "zmm", "m512"},
			name = "vaesenc",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "DC", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"ymm", "ymm", "ymm"},
			name = "vaesenc",
		},
		['zmm,zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "DC", "/r"},
			metadata = "AVX512_F    VAES",
			operands = {"zmm", "zmm", "zmm"},
			name = "vaesenc",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "DC", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"xmm", "xmm", "m128"},
			name = "vaesenc",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "DC", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"xmm", "xmm", "xmm"},
			name = "vaesenc",
		},
	},
	['valignd'] = {
		['xmm {kz},xmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "03", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32", "u8"},
			name = "valignd",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "03", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "valignd",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "03", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "valignd",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "03", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "valignd",
		},
		['ymm {kz},ymm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "03", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32", "u8"},
			name = "valignd",
		},
		['zmm {kz},zmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "03", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32", "u8"},
			name = "valignd",
		},
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W0", "03", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "valignd",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W0", "03", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "valignd",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W0", "03", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "valignd",
		},
	},
	['vphaddbw'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xC1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "C1", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vphaddbw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xC1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "C1", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vphaddbw",
		},
	},
	['vmaskmovpd'] = {
		['m128,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128", "xmm", "xmm"},
			encoding = "MVR",
			has_relative = false,
			operands2 = "X:m128, xmm, xmm",
			opcode = {"VEX.NDS.128.66.0F38.W0", "2F", "/r"},
			metadata = "AVX",
			operands = {"m128", "xmm", "xmm"},
			name = "vmaskmovpd",
		},
		['m256,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x2F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256", "ymm", "ymm"},
			encoding = "MVR",
			has_relative = false,
			operands2 = "X:m256, ymm, ymm",
			opcode = {"VEX.NDS.256.66.0F38.W0", "2F", "/r"},
			metadata = "AVX",
			operands = {"m256", "ymm", "ymm"},
			name = "vmaskmovpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, m128",
			opcode = {"VEX.NDS.128.66.0F38.W0", "2D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vmaskmovpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "2D", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vmaskmovpd",
		},
	},
	['movntq'] = {
		['m32,mm'] = {
			func = function(op1, op2) return "\x0F\xE7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "mm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, mm",
			opcode = {"0F", "E7", "/r"},
			metadata = "MMX2",
			operands = {"m32", "mm"},
			name = "movntq",
		},
		['m64,mm'] = {
			func = function(op1, op2) return "\x0F\xE7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64", "mm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, mm",
			opcode = {"0F", "E7", "/r"},
			metadata = "MMX2",
			operands = {"m64", "mm"},
			name = "movntq",
		},
	},
	['vpermil2ps'] = {
		['xmm,xmm,xmm,m128,u4'] = {
			func = function(op1, op2, op3, op4, op5) return "\x48"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128", "u4"},
			encoding = "RVSMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128, i4/u4",
			opcode = {"VEX.L0.66.0F3A.W1", "48", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "m128", "u4"},
			name = "vpermil2ps",
		},
		['xmm,xmm,xmm,xmm,i4'] = {
			func = function(op1, op2, op3, op4, op5) return "\x48"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm", "i4"},
			encoding = "RVSMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128, i4/u4",
			opcode = {"VEX.L0.66.0F3A.W1", "48", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm", "i4"},
			name = "vpermil2ps",
		},
		['xmm,xmm,m128,xmm,u4'] = {
			func = function(op1, op2, op3, op4, op5) return "\x48"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm", "u4"},
			encoding = "RVMSI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm, i4/u4",
			opcode = {"VEX.L0.66.0F3A.W0", "48", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm", "u4"},
			name = "vpermil2ps",
		},
		['ymm,ymm,m256,ymm,u4'] = {
			func = function(op1, op2, op3, op4, op5) return "\x48"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm", "u4"},
			encoding = "RVMSI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm, i4/u4",
			opcode = {"VEX.L1.66.0F3A.W0", "48", "/r", "/is4"},
			metadata = "XOP",
			operands = {"ymm", "ymm", "m256", "ymm", "u4"},
			name = "vpermil2ps",
		},
		['ymm,ymm,ymm,m256,u4'] = {
			func = function(op1, op2, op3, op4, op5) return "\x48"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "m256", "u4"},
			encoding = "RVSMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256, i4/u4",
			opcode = {"VEX.L1.66.0F3A.W1", "48", "/r", "/is4"},
			metadata = "XOP",
			operands = {"ymm", "ymm", "ymm", "m256", "u4"},
			name = "vpermil2ps",
		},
		['ymm,ymm,ymm,ymm,i4'] = {
			func = function(op1, op2, op3, op4, op5) return "\x48"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm", "i4"},
			encoding = "RVSMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256, i4/u4",
			opcode = {"VEX.L1.66.0F3A.W1", "48", "/r", "/is4"},
			metadata = "XOP",
			operands = {"ymm", "ymm", "ymm", "ymm", "i4"},
			name = "vpermil2ps",
		},
	},
	['pfcmpgt'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xA0" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "A0"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pfcmpgt",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xA0" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "A0"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pfcmpgt",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xA0" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "A0"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pfcmpgt",
		},
	},
	['vpcomw'] = {
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xCD"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "CD", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vpcomw",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xCD"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "CD", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vpcomw",
		},
	},
	['pmulhrsw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x38\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "38", "0B", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m32"},
			name = "pmulhrsw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x38\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "38", "0B", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m64"},
			name = "pmulhrsw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x38\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "38", "0B", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "mm"},
			name = "pmulhrsw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "0B", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "m128"},
			name = "pmulhrsw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x0B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "0B", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "xmm"},
			name = "pmulhrsw",
		},
	},
	['pcommit'] = {
		[''] = {
			func = function(op1) return "\x66\x0F\xAE\xF8" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"66", "0F", "AE", "F8"},
			metadata = "PCOMMIT          Volatile",
			operands = {""},
			name = "pcommit",
		},
	},
	['vpcomuq'] = {
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xEF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "EF", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vpcomuq",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xEF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "EF", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vpcomuq",
		},
	},
	['vpaddw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xFD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "FD", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpaddw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xFD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "FD", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpaddw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xFD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "FD", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpaddw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xFD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "FD", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpaddw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xFD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "FD", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpaddw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xFD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "FD", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpaddw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xFD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "FD", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpaddw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xFD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "FD", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpaddw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xFD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "FD", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpaddw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xFD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "FD", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpaddw",
		},
	},
	['vfnmsub213ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "AE", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfnmsub213ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "AE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfnmsub213ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "AE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfnmsub213ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "AE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfnmsub213ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "AE", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfnmsub213ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "AE", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfnmsub213ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "AE", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfnmsub213ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "AE", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfnmsub213ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "AE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfnmsub213ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "AE", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfnmsub213ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "AE", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfnmsub213ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "AE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfnmsub213ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "AE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfnmsub213ps",
		},
	},
	['vpcomud'] = {
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xEE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "EE", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vpcomud",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xEE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "EE", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vpcomud",
		},
	},
	['vpcomq'] = {
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xCF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "CF", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vpcomq",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xCF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "CF", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vpcomq",
		},
	},
	['insertq'] = {
		['xmm,xmm,i8,i8'] = {
			func = function(op1, op2, op3, op4) return "\xF2\x0F\x78"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "ib", "ib"},
			encoding = "RMII",
			has_relative = false,
			operands2 = "X:xmm, xmm, ib/ub, ib/ub",
			opcode = {"F2", "0F", "78", "/r", "ib", "ib"},
			metadata = "SSE4A",
			operands = {"xmm", "xmm", "i8", "i8"},
			name = "insertq",
		},
		['xmm,xmm,u8,u8'] = {
			func = function(op1, op2, op3, op4) return "\xF2\x0F\x78"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "ub", "ub"},
			encoding = "RMII",
			has_relative = false,
			operands2 = "X:xmm, xmm, ib/ub, ib/ub",
			opcode = {"F2", "0F", "78", "/r", "ib", "ib"},
			metadata = "SSE4A",
			operands = {"xmm", "xmm", "u8", "u8"},
			name = "insertq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xF2\x0F\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm",
			opcode = {"F2", "0F", "79", "/r"},
			metadata = "SSE4A",
			operands = {"xmm", "xmm"},
			name = "insertq",
		},
	},
	['pextrb'] = {
		['r64[0],xmm,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x14"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[0]", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64[0], xmm, ib/ub",
			opcode = {"66", "0F", "3A", "14", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"r64[0]", "xmm", "u8"},
			name = "pextrb",
		},
		['m8,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x14"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m8", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r32[0]/m8, xmm, ib/ub",
			opcode = {"66", "0F", "3A", "14", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"m8", "xmm", "u8"},
			name = "pextrb",
		},
		['r32[0],xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x14"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32[0]", "xmm", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r32[0]/m8, xmm, ib/ub",
			opcode = {"66", "0F", "3A", "14", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"r32[0]", "xmm", "i8"},
			name = "pextrb",
		},
		['r64[0],xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x14"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[0]", "xmm", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64[0], xmm, ib/ub",
			opcode = {"66", "0F", "3A", "14", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"r64[0]", "xmm", "i8"},
			name = "pextrb",
		},
	},
	['movlhps'] = {
		['xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2) return "\x0F\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[15:8]", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[15:8], xmm[7:0]",
			opcode = {"0F", "16", "/r"},
			metadata = "SSE",
			operands = {"xmm[15:8]", "xmm[7:0]"},
			name = "movlhps",
		},
	},
	['pmovsxwd'] = {
		['xmm,m64'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "23", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m64"},
			name = "pmovsxwd",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "23", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm[7:0]"},
			name = "pmovsxwd",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "23", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m32"},
			name = "pmovsxwd",
		},
	},
	['vmread'] = {
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32/m32/m64, R:r32",
			opcode = {"0F", "78", "/r"},
			metadata = "VMX X86          PRIVILEGE=L0",
			operands = {"r32", "r32"},
			name = "vmread",
		},
		['r64,r64'] = {
			func = function(op1, op2) return "\x0F\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, R:r64",
			opcode = {"0F", "78", "/r"},
			metadata = "VMX X64          PRIVILEGE=L0",
			operands = {"r64", "r64"},
			name = "vmread",
		},
		['m32,r64'] = {
			func = function(op1, op2) return "\x0F\x78"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, R:r64",
			opcode = {"0F", "78", "/r"},
			metadata = "VMX X64          PRIVILEGE=L0",
			operands = {"m32", "r64"},
			name = "vmread",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x0F\x78"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32/m32/m64, R:r32",
			opcode = {"0F", "78", "/r"},
			metadata = "VMX X86          PRIVILEGE=L0",
			operands = {"m64", "r32"},
			name = "vmread",
		},
		['m64,r64'] = {
			func = function(op1, op2) return "\x0F\x78"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64/m32/m64, R:r64",
			opcode = {"0F", "78", "/r"},
			metadata = "VMX X64          PRIVILEGE=L0",
			operands = {"m64", "r64"},
			name = "vmread",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x0F\x78"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32/m32/m64, R:r32",
			opcode = {"0F", "78", "/r"},
			metadata = "VMX X86          PRIVILEGE=L0",
			operands = {"m32", "r32"},
			name = "vmread",
		},
	},
	['vpcomb'] = {
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xCC"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "CC", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vpcomb",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xCC"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "CC", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vpcomb",
		},
	},
	['vpcmov'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"XOP.NDS.L1.P0.M08.W0", "A2", "/r", "/is4"},
			metadata = "XOP",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vpcmov",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"XOP.NDS.L1.P0.M08.W0", "A2", "/r", "/is4"},
			metadata = "XOP",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vpcmov",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "A2", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vpcmov",
		},
		['ymm,ymm,ymm,m256'] = {
			func = function(op1, op2, op3, op4) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "m256"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256",
			opcode = {"XOP.NDS.L1.P0.M08.W1", "A2", "/r", "/is4"},
			metadata = "XOP",
			operands = {"ymm", "ymm", "ymm", "m256"},
			name = "vpcmov",
		},
		['xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128",
			opcode = {"XOP.NDS.L0.P0.M08.W1", "A2", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "m128"},
			name = "vpcmov",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\xA2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "A2", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vpcmov",
		},
	},
	['minsd'] = {
		['xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "5D", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "xmm[7:0]"},
			name = "minsd",
		},
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\xF2\x0F\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "5D", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m64"},
			name = "minsd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\xF2\x0F\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "5D", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m32"},
			name = "minsd",
		},
	},
	['vfrczsd'] = {
		['xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\x83"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"XOP.L0.P0.M09.W0", "83", "/r"},
			metadata = "XOP",
			operands = {"xmm[7:0]", "xmm[7:0]"},
			name = "vfrczsd",
		},
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\x83"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"XOP.L0.P0.M09.W0", "83", "/r"},
			metadata = "XOP",
			operands = {"xmm[7:0]", "m64"},
			name = "vfrczsd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\x83"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"XOP.L0.P0.M09.W0", "83", "/r"},
			metadata = "XOP",
			operands = {"xmm[7:0]", "m32"},
			name = "vfrczsd",
		},
	},
	['vfrczps'] = {
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"XOP.L1.P0.M09.W0", "80", "/r"},
			metadata = "XOP",
			operands = {"ymm", "ymm"},
			name = "vfrczps",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"XOP.L1.P0.M09.W0", "80", "/r"},
			metadata = "XOP",
			operands = {"ymm", "m256"},
			name = "vfrczps",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "80", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vfrczps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "80", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vfrczps",
		},
	},
	['vfnmaddsd'] = {
		['xmm[7:0],xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3, op4) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "7B", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfnmaddsd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3, op4) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "7B", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfnmaddsd",
		},
		['xmm[7:0],xmm[7:0],m32,xmm[7:0]'] = {
			func = function(op1, op2, op3, op4) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32", "xmm[7:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64, xmm[7:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7B", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32", "xmm[7:0]"},
			name = "vfnmaddsd",
		},
		['xmm[7:0],xmm[7:0],m64,xmm[7:0]'] = {
			func = function(op1, op2, op3, op4) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64", "xmm[7:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64, xmm[7:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7B", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64", "xmm[7:0]"},
			name = "vfnmaddsd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3, op4) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64, xmm[7:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7B", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfnmaddsd",
		},
	},
	['vfrczpd'] = {
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"XOP.L1.P0.M09.W0", "81", "/r"},
			metadata = "XOP",
			operands = {"ymm", "ymm"},
			name = "vfrczpd",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"XOP.L1.P0.M09.W0", "81", "/r"},
			metadata = "XOP",
			operands = {"ymm", "m256"},
			name = "vfrczpd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "81", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vfrczpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "81", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vfrczpd",
		},
	},
	['lodsb'] = {
		[''] = {
			func = function() return "\xAC" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "w:<al>, X:<ds:zsi>",
			opcode = {"AC"},
			metadata = "ANY _Rep         DF=R",
			operands = {},
			name = "lodsb",
		},
	},
	['andnpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "55", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "andnpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "55", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "andnpd",
		},
	},
	['vfnmsub132sd'] = {
		['xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3) return "\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "9F", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfnmsub132sd",
		},
		['xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "9F", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfnmsub132sd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "9F", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfnmsub132sd",
		},
		['xmm[7:0] {kz},xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "9F", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			name = "vfnmsub132sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "9F", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			name = "vfnmsub132sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\x9F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "9F", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			name = "vfnmsub132sd",
		},
	},
	['vcvtps2pd'] = {
		['zmm {kz},ymm'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "ymm"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32 {er}",
			opcode = {"EVEX.512.0F.W0", "5A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "ymm"},
			name = "vcvtps2pd",
		},
		['zmm {kz},b32 {er}'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {er}"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32 {er}",
			opcode = {"EVEX.512.0F.W0", "5A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32 {er}"},
			name = "vcvtps2pd",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.0F.WIG", "5A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[7:0]"},
			name = "vcvtps2pd",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.0F.W0", "5A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vcvtps2pd",
		},
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32 {er}",
			opcode = {"EVEX.512.0F.W0", "5A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m256"},
			name = "vcvtps2pd",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.0F.W0", "5A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vcvtps2pd",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.0F.WIG", "5A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m64"},
			name = "vcvtps2pd",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.0F.WIG", "5A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m32"},
			name = "vcvtps2pd",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.0F.W0", "5A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vcvtps2pd",
		},
		['ymm {kz},xmm'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.0F.W0", "5A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm"},
			name = "vcvtps2pd",
		},
		['ymm,m128'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.0F.WIG", "5A", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m128"},
			name = "vcvtps2pd",
		},
		['ymm,xmm'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.0F.WIG", "5A", "/r"},
			metadata = "AVX",
			operands = {"ymm", "xmm"},
			name = "vcvtps2pd",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.0F.W0", "5A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vcvtps2pd",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.0F.W0", "5A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vcvtps2pd",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.0F.W0", "5A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vcvtps2pd",
		},
	},
	['vfnmsubss'] = {
		['xmm[3:0],xmm[3:0],m32,xmm[3:0]'] = {
			func = function(op1, op2, op3, op4) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32", "xmm[3:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64, xmm[3:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32", "xmm[3:0]"},
			name = "vfnmsubss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3, op4) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "7E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfnmsubss",
		},
		['xmm[3:0],xmm[3:0],m64,xmm[3:0]'] = {
			func = function(op1, op2, op3, op4) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64", "xmm[3:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64, xmm[3:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64", "xmm[3:0]"},
			name = "vfnmsubss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3, op4) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64, xmm[3:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfnmsubss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3, op4) return "\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "7E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfnmsubss",
		},
	},
	['vfnmsubsd'] = {
		['xmm[7:0],xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3, op4) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "7F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfnmsubsd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3, op4) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "7F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfnmsubsd",
		},
		['xmm[7:0],xmm[7:0],m32,xmm[7:0]'] = {
			func = function(op1, op2, op3, op4) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32", "xmm[7:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64, xmm[7:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32", "xmm[7:0]"},
			name = "vfnmsubsd",
		},
		['xmm[7:0],xmm[7:0],m64,xmm[7:0]'] = {
			func = function(op1, op2, op3, op4) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64", "xmm[7:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64, xmm[7:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64", "xmm[7:0]"},
			name = "vfnmsubsd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3, op4) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64, xmm[7:0]",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfnmsubsd",
		},
	},
	['aaa'] = {
		[''] = {
			func = function() return "\x37" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "x:<ax>",
			opcode = {"37"},
			metadata = "X86 Deprecated   OF=U SF=U ZF=U AF=W PF=U CF=W",
			operands = {},
			name = "aaa",
		},
	},
	['fldl2e'] = {
		[''] = {
			func = function(op1) return "\xD9\xEA" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "EA"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fldl2e",
		},
	},
	['vaddps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.0F.W0", "58", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vaddps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vaddps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vaddps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vaddps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "58", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vaddps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "58", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vaddps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.0F.W0", "58", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vaddps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "58", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vaddps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vaddps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "58", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vaddps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.0F.W0", "58", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vaddps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vaddps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vaddps",
		},
	},
	['blcic'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r32", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/5"},
			metadata = "TBM",
			operands = {"r32", "m32"},
			name = "blcic",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r32", "r32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/5"},
			metadata = "TBM",
			operands = {"r32", "r32"},
			name = "blcic",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r32", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/5"},
			metadata = "TBM",
			operands = {"r32", "m64"},
			name = "blcic",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r64", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/5"},
			metadata = "TBM X64",
			operands = {"r64", "m64"},
			name = "blcic",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r64", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/5"},
			metadata = "TBM X64",
			operands = {"r64", "m32"},
			name = "blcic",
		},
		['r64,r64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r64", "r64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/5"},
			metadata = "TBM X64",
			operands = {"r64", "r64"},
			name = "blcic",
		},
	},
	['phaddw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x38\x01"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "38", "01", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m32"},
			name = "phaddw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x38\x01"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "38", "01", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m64"},
			name = "phaddw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x38\x01"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "38", "01", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "mm"},
			name = "phaddw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x01"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "01", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "m128"},
			name = "phaddw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x01"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "01", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "xmm"},
			name = "phaddw",
		},
	},
	['vpblendd'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x02"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "02", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vpblendd",
		},
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x02"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "02", "/r", "ib"},
			metadata = "AVX2",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vpblendd",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x02"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "02", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vpblendd",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x02"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "02", "/r", "ib"},
			metadata = "AVX2",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vpblendd",
		},
	},
	['vpmovusdw'] = {
		['xmm,ymm'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "13", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "ymm"},
			name = "vpmovusdw",
		},
		['xmm[7:0],xmm'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "13", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0]", "xmm"},
			name = "vpmovusdw",
		},
		['m256 {kz},zmm'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "13", "/r"},
			metadata = "AVX512_F",
			operands = {"m256 {kz}", "zmm"},
			name = "vpmovusdw",
		},
		['ymm,zmm'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "13", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm", "zmm"},
			name = "vpmovusdw",
		},
		['m128 {kz},ymm'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "13", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "ymm"},
			name = "vpmovusdw",
		},
		['m64 {kz},xmm'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "13", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "xmm"},
			name = "vpmovusdw",
		},
		['m32,xmm'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "13", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "xmm"},
			name = "vpmovusdw",
		},
	},
	['vpsrlw'] = {
		['xmm,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "71", "/2", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "u8"},
			name = "vpsrlw",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.WIG", "71", "/2", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vpsrlw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "D1", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsrlw",
		},
		['ymm,ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D1", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "xmm"},
			name = "vpsrlw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D1", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsrlw",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "71", "/2", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "i8"},
			name = "vpsrlw",
		},
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "71", "/2", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "i8"},
			name = "vpsrlw",
		},
		['zmm {kz},zmm,m128'] = {
			func = function(op1, op2, op3) return "\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "D1", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m128"},
			name = "vpsrlw",
		},
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.WIG", "71", "/2", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vpsrlw",
		},
		['ymm {kz},ymm,m128'] = {
			func = function(op1, op2, op3) return "\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "D1", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m128"},
			name = "vpsrlw",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.WIG", "71", "/2", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vpsrlw",
		},
		['ymm {kz},ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "D1", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "xmm"},
			name = "vpsrlw",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.WIG", "71", "/2", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vpsrlw",
		},
		['zmm {kz},zmm,xmm'] = {
			func = function(op1, op2, op3) return "\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "D1", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "xmm"},
			name = "vpsrlw",
		},
		['ymm,ymm,u8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "71", "/2", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "u8"},
			name = "vpsrlw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "D1", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsrlw",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.WIG", "71", "/2", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vpsrlw",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.WIG", "71", "/2", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vpsrlw",
		},
		['ymm,ymm,m128'] = {
			func = function(op1, op2, op3) return "\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "D1", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m128"},
			name = "vpsrlw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "D1", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsrlw",
		},
	},
	['vbroadcastss'] = {
		['xmm,m64'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, m32/m64",
			opcode = {"VEX.128.66.0F38.W0", "18", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m64"},
			name = "vbroadcastss",
		},
		['zmm {kz},m32'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W0", "18", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m32"},
			name = "vbroadcastss",
		},
		['ymm,xmm'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm",
			opcode = {"VEX.256.66.0F38.W0", "18", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm"},
			name = "vbroadcastss",
		},
		['zmm {kz},xmm[3:0]'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "xmm[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W0", "18", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "xmm[3:0]"},
			name = "vbroadcastss",
		},
		['ymm,m32'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, m32/m64",
			opcode = {"VEX.256.66.0F38.W0", "18", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m32"},
			name = "vbroadcastss",
		},
		['ymm,m64'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, m32/m64",
			opcode = {"VEX.256.66.0F38.W0", "18", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m64"},
			name = "vbroadcastss",
		},
		['xmm {kz},xmm[3:0]'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "18", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[3:0]"},
			name = "vbroadcastss",
		},
		['ymm {kz},xmm[3:0]'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W0", "18", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm[3:0]"},
			name = "vbroadcastss",
		},
		['zmm {kz},m64'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m64"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W0", "18", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m64"},
			name = "vbroadcastss",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "18", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vbroadcastss",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm",
			opcode = {"VEX.128.66.0F38.W0", "18", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm"},
			name = "vbroadcastss",
		},
		['ymm {kz},m64'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m64"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W0", "18", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m64"},
			name = "vbroadcastss",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "18", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vbroadcastss",
		},
		['ymm {kz},m32'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W0", "18", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m32"},
			name = "vbroadcastss",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x18"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, m32/m64",
			opcode = {"VEX.128.66.0F38.W0", "18", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m32"},
			name = "vbroadcastss",
		},
	},
	['rdpmc'] = {
		[''] = {
			func = function() return "\x0F\x33" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:<edx>,W:<eax>,R:<ecx>",
			opcode = {"0F", "33"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {},
			name = "rdpmc",
		},
	},
	['into'] = {
		[''] = {
			func = function(op1) return "\xCE" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"CE"},
			metadata = "X86 Deprecated   Volatile OF=R",
			operands = {""},
			name = "into",
		},
	},
	['pblendvb'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, <xmm0>",
			opcode = {"66", "0F", "E0", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "pblendvb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xE0"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, <xmm0>",
			opcode = {"66", "0F", "E0", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm"},
			name = "pblendvb",
		},
	},
	['vfmsubaddpd'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "5F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vfmsubaddpd",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "5F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vfmsubaddpd",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "5F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vfmsubaddpd",
		},
		['ymm,ymm,ymm,m256'] = {
			func = function(op1, op2, op3, op4) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "m256"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "5F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "m256"},
			name = "vfmsubaddpd",
		},
		['xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "5F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "m128"},
			name = "vfmsubaddpd",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "5F", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vfmsubaddpd",
		},
	},
	['vfmaddsubps'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "5C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vfmaddsubps",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "5C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vfmaddsubps",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "5C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vfmaddsubps",
		},
		['ymm,ymm,ymm,m256'] = {
			func = function(op1, op2, op3, op4) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "m256"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "5C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "m256"},
			name = "vfmaddsubps",
		},
		['xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "5C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "m128"},
			name = "vfmaddsubps",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "5C", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vfmaddsubps",
		},
	},
	['lds'] = {
		['r32,m16_32'] = {
			func = function(op1, op2) return "\xC5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m16_32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, m16_32",
			opcode = {"C5", "/r"},
			metadata = "X86              Volatile",
			operands = {"r32", "m16_32"},
			name = "lds",
		},
		['r16,m16_16'] = {
			func = function(op1, op2) return "\x66\xC5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16_16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, m16_16",
			opcode = {"66", "C5", "/r"},
			metadata = "X86              Volatile",
			operands = {"r16", "m16_16"},
			name = "lds",
		},
	},
	['vfmsubadd132ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "97", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmsubadd132ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "97", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfmsubadd132ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "97", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmsubadd132ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "97", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmsubadd132ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "97", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmsubadd132ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "97", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmsubadd132ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "97", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfmsubadd132ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "97", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmsubadd132ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "97", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmsubadd132ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "97", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmsubadd132ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "97", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmsubadd132ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "97", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfmsubadd132ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x97"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "97", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmsubadd132ps",
		},
	},
	['roundpd'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x09"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "09", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm", "i8"},
			name = "roundpd",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x09"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "09", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128", "u8"},
			name = "roundpd",
		},
	},
	['blcfill'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r32", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/1"},
			metadata = "TBM",
			operands = {"r32", "m32"},
			name = "blcfill",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r32", "r32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/1"},
			metadata = "TBM",
			operands = {"r32", "r32"},
			name = "blcfill",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r32", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W0", "01", "/1"},
			metadata = "TBM",
			operands = {"r32", "m64"},
			name = "blcfill",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r64", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/1"},
			metadata = "TBM X64",
			operands = {"r64", "m64"},
			name = "blcfill",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r64", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/1"},
			metadata = "TBM X64",
			operands = {"r64", "m32"},
			name = "blcfill",
		},
		['r64,r64'] = {
			func = function(op1, op2) return "\x01"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r64", "r64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"XOP.NDD.LZ.M09.W1", "01", "/1"},
			metadata = "TBM X64",
			operands = {"r64", "r64"},
			name = "blcfill",
		},
	},
	['knotw'] = {
		['k[1:0],k[1:0]'] = {
			func = function(op1, op2) return "\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[1:0]", "k[1:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:k[1:0], k[1:0]",
			opcode = {"VEX.L0.0F.W0", "44", "/r"},
			metadata = "AVX512_F",
			operands = {"k[1:0]", "k[1:0]"},
			name = "knotw",
		},
	},
	['vpmaxsq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "3D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmaxsq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "3D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmaxsq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "3D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmaxsq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "3D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpmaxsq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "3D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpmaxsq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "3D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpmaxsq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "3D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmaxsq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "3D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmaxsq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "3D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmaxsq",
		},
	},
	['vfnmsub231sd'] = {
		['xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3) return "\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "BF", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfnmsub231sd",
		},
		['xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "BF", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfnmsub231sd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "BF", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfnmsub231sd",
		},
		['xmm[7:0] {kz},xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "X:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "BF", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			name = "vfnmsub231sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "X:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "BF", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			name = "vfnmsub231sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xBF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "X:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "BF", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			name = "vfnmsub231sd",
		},
	},
	['vfnmsub231ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "BE", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfnmsub231ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "BE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfnmsub231ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "BE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfnmsub231ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "BE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfnmsub231ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "BE", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfnmsub231ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "BE", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfnmsub231ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "BE", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfnmsub231ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "BE", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfnmsub231ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "BE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfnmsub231ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "BE", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfnmsub231ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "BE", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfnmsub231ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "BE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfnmsub231ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "BE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfnmsub231ps",
		},
	},
	['subpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "5C", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "subpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "5C", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "subpd",
		},
	},
	['vpermi2w'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "75", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermi2w",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "75", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermi2w",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "75", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermi2w",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "75", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermi2w",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "75", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermi2w",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "75", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermi2w",
		},
	},
	['vfnmadd213ss'] = {
		['xmm[3:0] {kz},xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xAD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "AD", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			name = "vfnmadd213ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xAD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "AD", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			name = "vfnmadd213ss",
		},
		['xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3) return "\xAD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "AD", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfnmadd213ss",
		},
		['xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xAD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "AD", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfnmadd213ss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xAD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "AD", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfnmadd213ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xAD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "AD", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			name = "vfnmadd213ss",
		},
	},
	['cpuid'] = {
		[''] = {
			func = function() return "\x0F\xA2" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<eax>, W:<ebx>, X:<ecx>, W:<edx>",
			opcode = {"0F", "A2"},
			metadata = "I486             Volatile",
			operands = {},
			name = "cpuid",
		},
	},
	['vfnmsub213pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "AE", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfnmsub213pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "AE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfnmsub213pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "AE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfnmsub213pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "AE", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfnmsub213pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "AE", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfnmsub213pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "AE", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfnmsub213pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "AE", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfnmsub213pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "AE", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfnmsub213pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "AE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfnmsub213pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "AE", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfnmsub213pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "AE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfnmsub213pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "AE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfnmsub213pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xAE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "AE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfnmsub213pd",
		},
	},
	['vfnmsub132ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "9E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfnmsub132ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "9E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfnmsub132ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "9E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfnmsub132ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "9E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfnmsub132ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "9E", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfnmsub132ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "9E", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfnmsub132ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "9E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfnmsub132ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "9E", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfnmsub132ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "9E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfnmsub132ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "9E", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfnmsub132ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "9E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfnmsub132ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "9E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfnmsub132ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "9E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfnmsub132ps",
		},
	},
	['vfnmsub132pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "9E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfnmsub132pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "9E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfnmsub132pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "9E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfnmsub132pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "9E", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfnmsub132pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "9E", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfnmsub132pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "9E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfnmsub132pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "9E", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfnmsub132pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "9E", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfnmsub132pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "9E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfnmsub132pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "9E", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfnmsub132pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "9E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfnmsub132pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "9E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfnmsub132pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "9E", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfnmsub132pd",
		},
	},
	['roundsd'] = {
		['xmm[7:0],m32,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x0B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm[7:0]", "m32", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "w:xmm[7:0], xmm[7:0]/m32/m64, ib/ub",
			opcode = {"66", "0F", "3A", "0B", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm[7:0]", "m32", "u8"},
			name = "roundsd",
		},
		['xmm[7:0],m64,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x0B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm[7:0]", "m64", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "w:xmm[7:0], xmm[7:0]/m32/m64, ib/ub",
			opcode = {"66", "0F", "3A", "0B", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm[7:0]", "m64", "u8"},
			name = "roundsd",
		},
		['xmm[7:0],xmm[7:0],i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x0B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "w:xmm[7:0], xmm[7:0]/m32/m64, ib/ub",
			opcode = {"66", "0F", "3A", "0B", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm[7:0]", "xmm[7:0]", "i8"},
			name = "roundsd",
		},
	},
	['vfnmadd231ss'] = {
		['xmm[3:0] {kz},xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "BD", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "xmm[3:0]"},
			name = "vfnmadd231ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "BD", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m64 {er}"},
			name = "vfnmadd231ss",
		},
		['xmm[3:0],xmm[3:0],m64'] = {
			func = function(op1, op2, op3) return "\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "BD", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m64"},
			name = "vfnmadd231ss",
		},
		['xmm[3:0],xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "BD", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "m32"},
			name = "vfnmadd231ss",
		},
		['xmm[3:0],xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W0", "BD", "/r"},
			metadata = "FMA",
			operands = {"xmm[3:0]", "xmm[3:0]", "xmm[3:0]"},
			name = "vfnmadd231ss",
		},
		['xmm[3:0] {kz},xmm[3:0],m32'] = {
			func = function(op1, op2, op3) return "\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[3:0] {kz}, xmm[3:0], xmm[3:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W0", "BD", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "xmm[3:0]", "m32"},
			name = "vfnmadd231ss",
		},
	},
	['vfnmsub231pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "BE", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfnmsub231pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "BE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfnmsub231pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "BE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfnmsub231pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "BE", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfnmsub231pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "BE", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfnmsub231pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "BE", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfnmsub231pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "BE", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfnmsub231pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "BE", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfnmsub231pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "BE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfnmsub231pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "BE", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfnmsub231pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "BE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfnmsub231pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "BE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfnmsub231pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xBE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "BE", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfnmsub231pd",
		},
	},
	['vfmsubadd231ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "B7", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmsubadd231ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "B7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfmsubadd231ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "B7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmsubadd231ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "B7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmsubadd231ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "B7", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmsubadd231ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "B7", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmsubadd231ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "B7", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfmsubadd231ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "B7", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmsubadd231ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "B7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmsubadd231ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "B7", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmsubadd231ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "B7", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmsubadd231ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "B7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfmsubadd231ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xB7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "B7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmsubadd231ps",
		},
	},
	['vfmsubadd213ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "A7", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmsubadd213ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "A7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfmsubadd213ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "A7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmsubadd213ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "A7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmsubadd213ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "A7", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmsubadd213ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "A7", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmsubadd213ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "A7", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfmsubadd213ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "A7", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmsubadd213ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "A7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmsubadd213ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "A7", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmsubadd213ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "A7", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmsubadd213ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "A7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfmsubadd213ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xA7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "A7", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmsubadd213ps",
		},
	},
	['vfmsub231sd'] = {
		['xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3) return "\xBB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "BB", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfmsub231sd",
		},
		['xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xBB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "BB", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfmsub231sd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xBB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "BB", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfmsub231sd",
		},
		['xmm[7:0] {kz},xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xBB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "BB", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			name = "vfmsub231sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xBB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "BB", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			name = "vfmsub231sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xBB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "BB", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			name = "vfmsub231sd",
		},
	},
	['vfmsub231pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "BA", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmsub231pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "BA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmsub231pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "BA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmsub231pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "BA", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmsub231pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "BA", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmsub231pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "BA", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmsub231pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "BA", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfmsub231pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "BA", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmsub231pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "BA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfmsub231pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "BA", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmsub231pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "BA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfmsub231pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "BA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmsub231pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xBA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "BA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmsub231pd",
		},
	},
	['vfmsub213ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "AA", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmsub213ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "AA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfmsub213ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "AA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmsub213ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "AA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmsub213ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "AA", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmsub213ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "AA", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmsub213ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "AA", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfmsub213ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "AA", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmsub213ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "AA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmsub213ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "AA", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmsub213ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "AA", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmsub213ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "AA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfmsub213ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "AA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmsub213ps",
		},
	},
	['vfmsub213pd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "AA", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmsub213pd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "AA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmsub213pd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "AA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmsub213pd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "AA", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmsub213pd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W1", "AA", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmsub213pd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "AA", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmsub213pd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "AA", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vfmsub213pd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "AA", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmsub213pd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "AA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vfmsub213pd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W1", "AA", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmsub213pd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "AA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vfmsub213pd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "AA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmsub213pd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xAA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "AA", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmsub213pd",
		},
	},
	['iretq'] = {
		[''] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xCF" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"REX.W", "CF"},
			metadata = "X64              Control=Return OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {""},
			name = "iretq",
		},
	},
	['vfmsub132sd'] = {
		['xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "9B", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfmsub132sd",
		},
		['xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "9B", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfmsub132sd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "9B", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfmsub132sd",
		},
		['xmm[7:0] {kz},xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "9B", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			name = "vfmsub132sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "9B", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			name = "vfmsub132sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "9B", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			name = "vfmsub132sd",
		},
	},
	['vaeskeygenassist'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.66.0F3A.WIG", "DF", "/r", "ib"},
			metadata = "AVX AESNI",
			operands = {"xmm", "xmm", "i8"},
			name = "vaeskeygenassist",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.66.0F3A.WIG", "DF", "/r", "ib"},
			metadata = "AVX AESNI",
			operands = {"xmm", "m128", "u8"},
			name = "vaeskeygenassist",
		},
	},
	['vfmsub132ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "9A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmsub132ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "9A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfmsub132ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "9A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmsub132ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "9A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmsub132ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "9A", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmsub132ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "9A", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmsub132ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "9A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfmsub132ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "9A", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmsub132ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "9A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmsub132ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "9A", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmsub132ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "9A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmsub132ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "9A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfmsub132ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "9A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmsub132ps",
		},
	},
	['vpmovqd'] = {
		['xmm,ymm'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "35", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "ymm"},
			name = "vpmovqd",
		},
		['xmm[7:0],xmm'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "35", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0]", "xmm"},
			name = "vpmovqd",
		},
		['m256 {kz},zmm'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "35", "/r"},
			metadata = "AVX512_F",
			operands = {"m256 {kz}", "zmm"},
			name = "vpmovqd",
		},
		['ymm,zmm'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "35", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm", "zmm"},
			name = "vpmovqd",
		},
		['m128 {kz},ymm'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "35", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "ymm"},
			name = "vpmovqd",
		},
		['m64 {kz},xmm'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "35", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "xmm"},
			name = "vpmovqd",
		},
		['m32,xmm'] = {
			func = function(op1, op2) return "\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "35", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "xmm"},
			name = "vpmovqd",
		},
	},
	['vfmaddps'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "68", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vfmaddps",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "68", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vfmaddps",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "68", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vfmaddps",
		},
		['ymm,ymm,ymm,m256'] = {
			func = function(op1, op2, op3, op4) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "m256"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "68", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "m256"},
			name = "vfmaddps",
		},
		['xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "68", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "m128"},
			name = "vfmaddps",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "68", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vfmaddps",
		},
	},
	['vfmaddsub132ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "96", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmaddsub132ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "96", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfmaddsub132ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "96", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmaddsub132ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "96", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmaddsub132ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "96", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmaddsub132ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "96", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmaddsub132ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "96", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfmaddsub132ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "96", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmaddsub132ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "96", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmaddsub132ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "96", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmaddsub132ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "96", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmaddsub132ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "96", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfmaddsub132ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "96", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmaddsub132ps",
		},
	},
	['cvtps2pi'] = {
		['mm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, xmm[7:0]/m32/m64",
			opcode = {"0F", "2D", "/r"},
			metadata = "SSE",
			operands = {"mm", "xmm[7:0]"},
			name = "cvtps2pi",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, xmm[7:0]/m32/m64",
			opcode = {"0F", "2D", "/r"},
			metadata = "SSE",
			operands = {"mm", "m64"},
			name = "cvtps2pi",
		},
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x2D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, xmm[7:0]/m32/m64",
			opcode = {"0F", "2D", "/r"},
			metadata = "SSE",
			operands = {"mm", "m32"},
			name = "cvtps2pi",
		},
	},
	['phsubsw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x38\x07"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "07", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m32"},
			name = "phsubsw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x38\x07"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "07", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m64"},
			name = "phsubsw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x38\x07"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "07", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "mm"},
			name = "phsubsw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x07"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "07", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "m128"},
			name = "phsubsw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x07"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "07", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "xmm"},
			name = "phsubsw",
		},
	},
	['vcvtudq2ps'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.F2.0F.W0", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vcvtudq2ps",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.F2.0F.W0", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vcvtudq2ps",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.F2.0F.W0", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vcvtudq2ps",
		},
		['zmm {kz},b32 {er}'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {er}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {er}",
			opcode = {"EVEX.512.F2.0F.W0", "7A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32 {er}"},
			name = "vcvtudq2ps",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.F2.0F.W0", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vcvtudq2ps",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.F2.0F.W0", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vcvtudq2ps",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {er}",
			opcode = {"EVEX.512.F2.0F.W0", "7A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vcvtudq2ps",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.F2.0F.W0", "7A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vcvtudq2ps",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {er}",
			opcode = {"EVEX.512.F2.0F.W0", "7A", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vcvtudq2ps",
		},
	},
	['paddusw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "DD", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "paddusw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "DD", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "paddusw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "DD", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "paddusw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "DD", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "paddusw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "DD", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "paddusw",
		},
	},
	['fprem1'] = {
		[''] = {
			func = function(op1) return "\xD9\xF5" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "F5"},
			metadata = "FPU              C0=W C1=W C2=W C3=W",
			operands = {""},
			name = "fprem1",
		},
	},
	['dec'] = {
		['m8'] = {
			func = function(op1) return "\xFE"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8",
			opcode = {"FE", "/1"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"m8"},
			name = "dec",
		},
		['r32'] = {
			func = function(op1) return "\xFF"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64",
			opcode = {"FF", "/1"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"r32"},
			name = "dec",
		},
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xFF"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64",
			opcode = {"REX.W", "FF", "/1"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"m32"},
			name = "dec",
		},
		['r16'] = {
			func = function(op1) return "\x66\xFF"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16",
			opcode = {"66", "FF", "/1"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"r16"},
			name = "dec",
		},
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xFF"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64",
			opcode = {"REX.W", "FF", "/1"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"r64"},
			name = "dec",
		},
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xFF"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64",
			opcode = {"REX.W", "FF", "/1"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"m64"},
			name = "dec",
		},
		['m16'] = {
			func = function(op1) return "\x66\xFF"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16",
			opcode = {"66", "FF", "/1"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"m16"},
			name = "dec",
		},
		['r8'] = {
			func = function(op1) return "\xFE"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8",
			opcode = {"FE", "/1"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W",
			operands = {"r8"},
			name = "dec",
		},
	},
	['vfmadd213sd'] = {
		['xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3) return "\xA9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "A9", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfmadd213sd",
		},
		['xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xA9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "A9", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfmadd213sd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xA9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "A9", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfmadd213sd",
		},
		['xmm[7:0] {kz},xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xA9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "A9", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			name = "vfmadd213sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xA9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "A9", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			name = "vfmadd213sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xA9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "A9", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			name = "vfmadd213sd",
		},
	},
	['vpsrlvd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "45", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsrlvd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "45", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpsrlvd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "45", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsrlvd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "45", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsrlvd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W0", "45", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsrlvd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W0", "45", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsrlvd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "45", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpsrlvd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "45", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsrlvd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "45", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsrlvd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "45", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsrlvd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "45", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsrlvd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "45", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpsrlvd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "45", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsrlvd",
		},
	},
	['vpternlogd'] = {
		['xmm {kz},xmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.DDS.128.66.0F3A.W0", "25", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32", "u8"},
			name = "vpternlogd",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.DDS.128.66.0F3A.W0", "25", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vpternlogd",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.DDS.256.66.0F3A.W0", "25", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vpternlogd",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.DDS.512.66.0F3A.W0", "25", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vpternlogd",
		},
		['ymm {kz},ymm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.DDS.256.66.0F3A.W0", "25", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32", "u8"},
			name = "vpternlogd",
		},
		['zmm {kz},zmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.DDS.512.66.0F3A.W0", "25", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32", "u8"},
			name = "vpternlogd",
		},
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.DDS.512.66.0F3A.W0", "25", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vpternlogd",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.DDS.128.66.0F3A.W0", "25", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vpternlogd",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x25"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.DDS.256.66.0F3A.W0", "25", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vpternlogd",
		},
	},
	['vzeroupper'] = {
		[''] = {
			func = function(op1) return "\x77" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"VEX.128.0F.WIG", "77"},
			metadata = "AVX Volatile",
			operands = {""},
			name = "vzeroupper",
		},
	},
	['cmovg'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4F", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r32", "m32"},
			name = "cmovg",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4F", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r32", "r32"},
			name = "cmovg",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4F", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r32", "m64"},
			name = "cmovg",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4F", "/r"},
			metadata = "CMOV X64         ZF=R SF=R OF=R",
			operands = {"r64", "m64"},
			name = "cmovg",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4F", "/r"},
			metadata = "CMOV X64         ZF=R SF=R OF=R",
			operands = {"r64", "m32"},
			name = "cmovg",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4F", "/r"},
			metadata = "CMOV X64         ZF=R SF=R OF=R",
			operands = {"r64", "r64"},
			name = "cmovg",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4F", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r16", "r16"},
			name = "cmovg",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4F", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r16", "m16"},
			name = "cmovg",
		},
	},
	['fsave'] = {
		['m32'] = {
			func = function(op1) return "\x9B\xDD"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"9B", "DD", "/6"},
			metadata = "FPU              C0=W C1=W C2=W C3=W",
			operands = {"m32"},
			name = "fsave",
		},
		['m64'] = {
			func = function(op1) return "\x9B\xDD"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"9B", "DD", "/6"},
			metadata = "FPU              C0=W C1=W C2=W C3=W",
			operands = {"m64"},
			name = "fsave",
		},
	},
	['vstmxcsr'] = {
		['m32'] = {
			func = function(op1) return "\xAE"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"VEX.LZ.0F.WIG", "AE", "/3"},
			metadata = "AVX",
			operands = {"m32"},
			name = "vstmxcsr",
		},
		['m64'] = {
			func = function(op1) return "\xAE"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"VEX.LZ.0F.WIG", "AE", "/3"},
			metadata = "AVX",
			operands = {"m64"},
			name = "vstmxcsr",
		},
	},
	['vunpcklps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.0F.W0", "14", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vunpcklps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vunpcklps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vunpcklps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vunpcklps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "14", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vunpcklps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "14", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vunpcklps",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.0F.W0", "14", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vunpcklps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "14", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vunpcklps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vunpcklps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "14", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vunpcklps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.0F.W0", "14", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vunpcklps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vunpcklps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vunpcklps",
		},
	},
	['vptestnmw'] = {
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.F3.0F38.W1", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vptestnmw",
		},
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.F3.0F38.W1", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vptestnmw",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.F3.0F38.W1", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vptestnmw",
		},
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.F3.0F38.W1", "26", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vptestnmw",
		},
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.F3.0F38.W1", "26", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vptestnmw",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.F3.0F38.W1", "26", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "m512"},
			name = "vptestnmw",
		},
	},
	['pcmpeqd'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "76", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "pcmpeqd",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "76", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "pcmpeqd",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "76", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "pcmpeqd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "76", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pcmpeqd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x76"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "76", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pcmpeqd",
		},
	},
	['vprotd'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "C2", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "i8"},
			name = "vprotd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"XOP.NDS.L0.P0.M09.W1", "92", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128"},
			name = "vprotd",
		},
		['xmm,m128,xmm'] = {
			func = function(op1, op2, op3) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "92", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128", "xmm"},
			name = "vprotd",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "C2", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "m128", "u8"},
			name = "vprotd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "92", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm"},
			name = "vprotd",
		},
	},
	['vucomisd'] = {
		['xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "R:xmm[7:0], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.66.0F.W1", "2E", "/r"},
			metadata = "AVX512_F OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[7:0]", "xmm[7:0]"},
			name = "vucomisd",
		},
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.LIG.66.0F.WIG", "2E", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[7:0]", "m64"},
			name = "vucomisd",
		},
		['xmm[7:0],m64 {sae}'] = {
			func = function(op1, op2) return "\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64 {sae}"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "R:xmm[7:0], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.66.0F.W1", "2E", "/r"},
			metadata = "AVX512_F OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[7:0]", "m64 {sae}"},
			name = "vucomisd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "R:xmm[7:0], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.66.0F.W1", "2E", "/r"},
			metadata = "AVX512_F OF=0 SF=0 ZF=W AF=0 PF=W CF=W",
			operands = {"xmm[7:0]", "m32"},
			name = "vucomisd",
		},
	},
	['vtestpd'] = {
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x0F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~ymm, ~ymm/m256",
			opcode = {"VEX.256.66.0F38.W0", "0F", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"ymm", "ymm"},
			name = "vtestpd",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x0F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~ymm, ~ymm/m256",
			opcode = {"VEX.256.66.0F38.W0", "0F", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"ymm", "m256"},
			name = "vtestpd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~xmm, ~xmm/m128",
			opcode = {"VEX.128.66.0F38.W0", "0F", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "m128"},
			name = "vtestpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~xmm, ~xmm/m128",
			opcode = {"VEX.128.66.0F38.W0", "0F", "/r"},
			metadata = "AVX OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "xmm"},
			name = "vtestpd",
		},
	},
	['vsubsd'] = {
		['xmm,xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "5C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			name = "vsubsd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "5C", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			name = "vsubsd",
		},
		['xmm {kz},xmm[15:8],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "5C", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m64 {er}"},
			name = "vsubsd",
		},
		['xmm,xmm[15:8],m64'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "5C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m64"},
			name = "vsubsd",
		},
		['xmm,xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "5C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m32"},
			name = "vsubsd",
		},
		['xmm {kz},xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "5C", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			name = "vsubsd",
		},
	},
	['cmovae'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "43", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "m32"},
			name = "cmovae",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "43", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "r32"},
			name = "cmovae",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "43", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "m64"},
			name = "cmovae",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "43", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "m64"},
			name = "cmovae",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "43", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "m32"},
			name = "cmovae",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "43", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "r64"},
			name = "cmovae",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "43", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r16", "r16"},
			name = "cmovae",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "43", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r16", "m16"},
			name = "cmovae",
		},
	},
	['vpermt2w'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "7D", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermt2w",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "7D", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermt2w",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "7D", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermt2w",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.DDS.256.66.0F38.W1", "7D", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermt2w",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.DDS.512.66.0F38.W1", "7D", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermt2w",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.DDS.128.66.0F38.W1", "7D", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermt2w",
		},
	},
	['pmovsxdq'] = {
		['xmm,m64'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "25", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m64"},
			name = "pmovsxdq",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "25", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm[7:0]"},
			name = "pmovsxdq",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x25"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "25", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m32"},
			name = "pmovsxdq",
		},
	},
	['fsqrt'] = {
		[''] = {
			func = function(op1) return "\xD9\xFE" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "FE"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fsqrt",
		},
	},
	['vorpd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "56", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vorpd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "56", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vorpd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "56", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vorpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "56", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vorpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "56", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vorpd",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "56", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vorpd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "56", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vorpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "56", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vorpd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "56", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vorpd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "56", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vorpd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "56", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vorpd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "56", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vorpd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "56", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vorpd",
		},
	},
	['vextractps'] = {
		['m32,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x17"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m32", "xmm", "ub"},
			encoding = "MRI-T1S",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.WIG", "17", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"m32", "xmm", "u8"},
			name = "vextractps",
		},
		['r64[3:0],xmm,u8'] = {
			func = function(op1, op2, op3) return "\x17"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[3:0]", "xmm", "ub"},
			encoding = "MRI-T1S",
			has_relative = false,
			operands2 = "W:r64[3:0], xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.WIG", "17", "/r", "ib"},
			metadata = "AVX512_F X64",
			operands = {"r64[3:0]", "xmm", "u8"},
			name = "vextractps",
		},
		['m64,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x17"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m64", "xmm", "ub"},
			encoding = "MRI-T1S",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.WIG", "17", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"m64", "xmm", "u8"},
			name = "vextractps",
		},
		['r64[3:0],xmm,i8'] = {
			func = function(op1, op2, op3) return "\x17"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[3:0]", "xmm", "ib"},
			encoding = "MRI-T1S",
			has_relative = false,
			operands2 = "W:r64[3:0], xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.WIG", "17", "/r", "ib"},
			metadata = "AVX512_F X64",
			operands = {"r64[3:0]", "xmm", "i8"},
			name = "vextractps",
		},
		['r32[3:0],xmm,i8'] = {
			func = function(op1, op2, op3) return "\x17"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32[3:0]", "xmm", "ib"},
			encoding = "MRI-T1S",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.WIG", "17", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"r32[3:0]", "xmm", "i8"},
			name = "vextractps",
		},
	},
	['vsqrtpd'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "51", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vsqrtpd",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.66.0F.WIG", "51", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vsqrtpd",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "51", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vsqrtpd",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.66.0F.WIG", "51", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vsqrtpd",
		},
		['zmm {kz},b64 {er}'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b64 {er}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.66.0F.W1", "51", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b64 {er}"},
			name = "vsqrtpd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.66.0F.W1", "51", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vsqrtpd",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "51", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vsqrtpd",
		},
		['ymm {kz},b64'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "51", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b64"},
			name = "vsqrtpd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.66.0F.W1", "51", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vsqrtpd",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "51", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vsqrtpd",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "51", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vsqrtpd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.66.0F.WIG", "51", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vsqrtpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.66.0F.WIG", "51", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vsqrtpd",
		},
	},
	['adc'] = {
		['r64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/2", "id"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r64", "i32"},
			name = "adc",
		},
		['m64,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/2", "id"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m64", "u32"},
			name = "adc",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64,~r64",
			opcode = {"REX.W", "11", "/r"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m32", "r64"},
			name = "adc",
		},
		['m16,u16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"m16", "uw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, iw/uw",
			opcode = {"66", "81", "/2", "iw"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m16", "u16"},
			name = "adc",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32,~r32/m32/m64",
			opcode = {"13", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r32", "m32"},
			name = "adc",
		},
		['m32,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/2", "id"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m32", "i32"},
			name = "adc",
		},
		['ax,u16'] = {
			func = function(op1, op2) return "\x66\x15"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "uw"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:ax, iw/uw",
			opcode = {"66", "15", "iw"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"ax", "u16"},
			name = "adc",
		},
		['r8,m8'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:~r8,~r8/m8",
			opcode = {"12", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r8", "m8"},
			name = "adc",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64,~r32",
			opcode = {"11", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m32", "r32"},
			name = "adc",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r16/m16,~r16",
			opcode = {"66", "11", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m16", "r16"},
			name = "adc",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64,~r64",
			opcode = {"REX.W", "11", "/r"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r64", "r64"},
			name = "adc",
		},
		['eax,u32'] = {
			func = function(op1, op2) return "\x15"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "ud"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:eax, id/ud",
			opcode = {"15", "id"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"eax", "u32"},
			name = "adc",
		},
		['eax,i32'] = {
			func = function(op1, op2) return "\x15"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:eax, id/ud",
			opcode = {"15", "id"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"eax", "i32"},
			name = "adc",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r16/m16,~r16",
			opcode = {"66", "11", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r16", "r16"},
			name = "adc",
		},
		['r8,r8'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r8/m8,~r8",
			opcode = {"10", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r8", "r8"},
			name = "adc",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64,~r32",
			opcode = {"11", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m64", "r32"},
			name = "adc",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"80", "/2", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m8", "u8"},
			name = "adc",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/2", "ib"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r64", "i8"},
			name = "adc",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32,~r32/m32/m64",
			opcode = {"13", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r32", "m64"},
			name = "adc",
		},
		['r32,i32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/2", "id"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r32", "i32"},
			name = "adc",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\x83"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib",
			opcode = {"83", "/2", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r32", "i8"},
			name = "adc",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64,~r64/m32/m64",
			opcode = {"REX.W", "13", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r64", "m32"},
			name = "adc",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:~r16,~r16/m16",
			opcode = {"66", "13", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r16", "m16"},
			name = "adc",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x13"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64,~r64/m32/m64",
			opcode = {"REX.W", "13", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r64", "m64"},
			name = "adc",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64,~r32",
			opcode = {"11", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r32", "r32"},
			name = "adc",
		},
		['m16,i8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib",
			opcode = {"66", "83", "/2", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m16", "i8"},
			name = "adc",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64,~r64",
			opcode = {"REX.W", "11", "/r"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m64", "r64"},
			name = "adc",
		},
		['m64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/2", "id"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m64", "i32"},
			name = "adc",
		},
		['m8,r8'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r8/m8,~r8",
			opcode = {"10", "/r"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m8", "r8"},
			name = "adc",
		},
		['al,u8'] = {
			func = function(op1, op2) return "\x14"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:al, ib/ub",
			opcode = {"14", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"al", "u8"},
			name = "adc",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib",
			opcode = {"66", "83", "/2", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r16", "i8"},
			name = "adc",
		},
		['rax,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x15"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"rax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:rax, id",
			opcode = {"REX.W", "15", "id"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"rax", "i32"},
			name = "adc",
		},
		['r16,i16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"r16", "iw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, iw/uw",
			opcode = {"66", "81", "/2", "iw"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r16", "i16"},
			name = "adc",
		},
		['al,i8'] = {
			func = function(op1, op2) return "\x14"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:al, ib/ub",
			opcode = {"14", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"al", "i8"},
			name = "adc",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"80", "/2", "ib"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"r8", "i8"},
			name = "adc",
		},
		['m64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/2", "ib"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m64", "i8"},
			name = "adc",
		},
		['m32,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib",
			opcode = {"REX.W", "83", "/2", "ib"},
			metadata = "X64 _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m32", "i8"},
			name = "adc",
		},
		['m32,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/2", "id"},
			metadata = "ANY _XLock       OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"m32", "u32"},
			name = "adc",
		},
		['ax,i16'] = {
			func = function(op1, op2) return "\x66\x15"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "iw"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:ax, iw/uw",
			opcode = {"66", "15", "iw"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=X",
			operands = {"ax", "i16"},
			name = "adc",
		},
	},
	['vmxon'] = {
		['m32'] = {
			func = function(op1) return "\xF3\x0F\xC7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"F3", "0F", "C7", "/6"},
			metadata = "VMX",
			operands = {"m32"},
			name = "vmxon",
		},
		['m64'] = {
			func = function(op1) return "\xF3\x0F\xC7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"F3", "0F", "C7", "/6"},
			metadata = "VMX",
			operands = {"m64"},
			name = "vmxon",
		},
	},
	['vpacksswb'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "63", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpacksswb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "63", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpacksswb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "63", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpacksswb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "63", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpacksswb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "63", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpacksswb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "63", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpacksswb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "63", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpacksswb",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "63", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpacksswb",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "63", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpacksswb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "63", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpacksswb",
		},
	},
	['cvtps2dq'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"66", "0F", "5B", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "cvtps2dq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x5B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"66", "0F", "5B", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "cvtps2dq",
		},
	},
	['orps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"0F", "56", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "orps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"0F", "56", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "orps",
		},
	},
	['vpmaxuw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x3E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "3E", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmaxuw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x3E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "3E", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmaxuw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x3E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "3E", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmaxuw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x3E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "3E", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmaxuw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x3E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "3E", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpmaxuw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x3E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "3E", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmaxuw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x3E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "3E", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmaxuw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x3E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "3E", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpmaxuw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x3E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "3E", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmaxuw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x3E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "3E", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmaxuw",
		},
	},
	['sqrtsd'] = {
		['xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "51", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "xmm[7:0]"},
			name = "sqrtsd",
		},
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\xF2\x0F\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "51", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m64"},
			name = "sqrtsd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\xF2\x0F\x51"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "51", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m32"},
			name = "sqrtsd",
		},
	},
	['cvtdq2pd'] = {
		['xmm,m64'] = {
			func = function(op1, op2) return "\xF3\x0F\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"F3", "0F", "E6", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m64"},
			name = "cvtdq2pd",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"F3", "0F", "E6", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm[7:0]"},
			name = "cvtdq2pd",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\xF3\x0F\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"F3", "0F", "E6", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m32"},
			name = "cvtdq2pd",
		},
	},
	['vcvtps2qq'] = {
		['zmm {kz},ymm'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "ymm"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32 {er}",
			opcode = {"EVEX.512.66.0F.W0", "7B", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "ymm"},
			name = "vcvtps2qq",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "7B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vcvtps2qq",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.66.0F.W0", "7B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vcvtps2qq",
		},
		['zmm {kz},b32 {er}'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {er}"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32 {er}",
			opcode = {"EVEX.512.66.0F.W0", "7B", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "b32 {er}"},
			name = "vcvtps2qq",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.66.0F.W0", "7B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vcvtps2qq",
		},
		['ymm {kz},xmm'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.66.0F.W0", "7B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "xmm"},
			name = "vcvtps2qq",
		},
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32 {er}",
			opcode = {"EVEX.512.66.0F.W0", "7B", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m256"},
			name = "vcvtps2qq",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "7B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vcvtps2qq",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "7B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vcvtps2qq",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x7B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "7B", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vcvtps2qq",
		},
	},
	['pushfq'] = {
		[''] = {
			func = function(op1) return "\x9C" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"9C"},
			metadata = "X64",
			operands = {""},
			name = "pushfq",
		},
	},
	['vpmaxsd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "3D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmaxsd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "3D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpmaxsd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "3D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmaxsd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "3D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmaxsd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "3D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmaxsd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "3D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpmaxsd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "3D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpmaxsd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "3D", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmaxsd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "3D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmaxsd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "3D", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpmaxsd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "3D", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmaxsd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "3D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpmaxsd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x3D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "3D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmaxsd",
		},
	},
	['vpsllvq'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "47", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsllvq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "47", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsllvq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "47", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsllvq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W1", "47", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsllvq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W1", "47", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsllvq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "47", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpsllvq",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "47", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsllvq",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W1", "47", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsllvq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "47", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpsllvq",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W1", "47", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsllvq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "47", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpsllvq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "47", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsllvq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "47", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsllvq",
		},
	},
	['jae'] = {
		['i8'] = {
			func = function(op1) return "\x73"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"73", "cb"},
			metadata = "ANY              Control=Branch CF=R",
			operands = {"string"},
			name = "jae",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x83"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "83", "cw"},
			metadata = "X86              Control=Branch CF=R",
			operands = {"string"},
			name = "jae",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x83"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "83", "cd"},
			metadata = "ANY              Control=Branch CF=R",
			operands = {"string"},
			name = "jae",
		},
		['string'] = {
			func = function(op1) return "\x0F\x83"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "83", "cd"},
			metadata = "ANY              Control=Branch CF=R",
			operands = {"string"},
			name = "jae",
		},
	},
	['rdgsbase'] = {
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF3\x0F\xAE"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r64",
			opcode = {"REX.W", "F3", "0F", "AE", "/1"},
			metadata = "FSGSBASE X64     Volatile",
			operands = {"r64"},
			name = "rdgsbase",
		},
		['r32'] = {
			func = function(op1) return "\xF3\x0F\xAE"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r32",
			opcode = {"F3", "0F", "AE", "/1"},
			metadata = "FSGSBASE X64     Volatile",
			operands = {"r32"},
			name = "rdgsbase",
		},
	},
	['vpextrw'] = {
		['r32[1:0],xmm,u8'] = {
			func = function(op1, op2, op3) return "\xC5"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32[1:0]", "xmm", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r32[1:0], xmm, ib/ub",
			opcode = {"EVEX.128.66.0F.WIG", "C5", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"r32[1:0]", "xmm", "u8"},
			name = "vpextrw",
		},
		['r32[1:0],xmm,i8'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32[1:0]", "xmm", "ib"},
			encoding = "MRI-T1S",
			has_relative = false,
			operands2 = "W:r32[1:0]/m16, xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.WIG", "15", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"r32[1:0]", "xmm", "i8"},
			name = "vpextrw",
		},
		['m16,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m16", "xmm", "ub"},
			encoding = "MRI-T1S",
			has_relative = false,
			operands2 = "W:r32[1:0]/m16, xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.WIG", "15", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"m16", "xmm", "u8"},
			name = "vpextrw",
		},
		['r64[1:0],xmm,i8'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[1:0]", "xmm", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64[1:0], xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.WIG", "15", "/r", "ib"},
			metadata = "AVX512_BW X64",
			operands = {"r64[1:0]", "xmm", "i8"},
			name = "vpextrw",
		},
		['r64[1:0],xmm,u8'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[1:0]", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64[1:0], xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.WIG", "15", "/r", "ib"},
			metadata = "AVX512_BW X64",
			operands = {"r64[1:0]", "xmm", "u8"},
			name = "vpextrw",
		},
	},
	['setnge'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9C", "/r"},
			metadata = "ANY              SF=R OF=R",
			operands = {"m8"},
			name = "setnge",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x9C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9C", "/r"},
			metadata = "ANY              SF=R OF=R",
			operands = {"r8"},
			name = "setnge",
		},
	},
	['setb'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "92", "/r"},
			metadata = "ANY              CF=R",
			operands = {"m8"},
			name = "setb",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "92", "/r"},
			metadata = "ANY              CF=R",
			operands = {"r8"},
			name = "setb",
		},
	},
	['fprem'] = {
		[''] = {
			func = function(op1) return "\xD9\xF8" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "F8"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fprem",
		},
	},
	['fnstenv'] = {
		['m32'] = {
			func = function(op1) return "\xD9"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"D9", "/6"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {"m32"},
			name = "fnstenv",
		},
		['m64'] = {
			func = function(op1) return "\xD9"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"D9", "/6"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {"m64"},
			name = "fnstenv",
		},
	},
	['verw'] = {
		['m16'] = {
			func = function(op1) return "\x0F\x00"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r16/m16",
			opcode = {"0F", "00", "/5"},
			metadata = "ANY Volatile     ZF=W",
			operands = {"m16"},
			name = "verw",
		},
		['r16'] = {
			func = function(op1) return "\x0F\x00"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r16/m16",
			opcode = {"0F", "00", "/5"},
			metadata = "ANY Volatile     ZF=W",
			operands = {"r16"},
			name = "verw",
		},
	},
	['sti'] = {
		[''] = {
			func = function(op1) return "\xFB" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"FB"},
			metadata = "ANY              Volatile IF=1",
			operands = {""},
			name = "sti",
		},
	},
	['out'] = {
		['u8,al'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"ub", "al"},
			encoding = "I",
			has_relative = false,
			operands2 = "ub, al",
			opcode = {"E6", "ib"},
			metadata = "ANY              Volatile",
			operands = {"u8", "al"},
			name = "out",
		},
		['dx,eax'] = {
			func = function(op1, op2) return "\xEF" end,
			real_operands = {"dx", "eax"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:dx, R:eax",
			opcode = {"EF"},
			metadata = "ANY              Volatile",
			operands = {"dx", "eax"},
			name = "out",
		},
		['dx,ax'] = {
			func = function(op1, op2) return "\x66\xEF" end,
			real_operands = {"dx", "ax"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:dx, R:ax",
			opcode = {"66", "EF"},
			metadata = "ANY              Volatile",
			operands = {"dx", "ax"},
			name = "out",
		},
		['u8,ax'] = {
			func = function(op1, op2) return "\x66\xE7"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"ub", "ax"},
			encoding = "I",
			has_relative = false,
			operands2 = "ub, ax",
			opcode = {"66", "E7", "ib"},
			metadata = "ANY              Volatile",
			operands = {"u8", "ax"},
			name = "out",
		},
		['u8,eax'] = {
			func = function(op1, op2) return "\xE7"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"ub", "eax"},
			encoding = "I",
			has_relative = false,
			operands2 = "ub, eax",
			opcode = {"E7", "ib"},
			metadata = "ANY              Volatile",
			operands = {"u8", "eax"},
			name = "out",
		},
		['dx,al'] = {
			func = function(op1, op2) return "\xEE" end,
			real_operands = {"dx", "al"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:dx, R:al",
			opcode = {"EE"},
			metadata = "ANY              Volatile",
			operands = {"dx", "al"},
			name = "out",
		},
	},
	['movhpd'] = {
		['xmm[15:8],m64'] = {
			func = function(op1, op2) return "\x66\x0F\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[15:8]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[15:8], m32/m64",
			opcode = {"66", "0F", "16", "/r"},
			metadata = "SSE2",
			operands = {"xmm[15:8]", "m64"},
			name = "movhpd",
		},
		['m64,xmm[15:8]'] = {
			func = function(op1, op2) return "\x66\x0F\x17"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[15:8]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[15:8]",
			opcode = {"66", "0F", "17", "/r"},
			metadata = "SSE2",
			operands = {"m64", "xmm[15:8]"},
			name = "movhpd",
		},
		['xmm[15:8],m32'] = {
			func = function(op1, op2) return "\x66\x0F\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[15:8]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[15:8], m32/m64",
			opcode = {"66", "0F", "16", "/r"},
			metadata = "SSE2",
			operands = {"xmm[15:8]", "m32"},
			name = "movhpd",
		},
		['m32,xmm[15:8]'] = {
			func = function(op1, op2) return "\x66\x0F\x17"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[15:8]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[15:8]",
			opcode = {"66", "0F", "17", "/r"},
			metadata = "SSE2",
			operands = {"m32", "xmm[15:8]"},
			name = "movhpd",
		},
	},
	['setbe'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "96", "/r"},
			metadata = "ANY              CF=R ZF=R",
			operands = {"m8"},
			name = "setbe",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "96", "/r"},
			metadata = "ANY              CF=R ZF=R",
			operands = {"r8"},
			name = "setbe",
		},
	},
	['not'] = {
		['m8'] = {
			func = function(op1) return "\xF6"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8",
			opcode = {"F6", "/2"},
			metadata = "ANY _XLock",
			operands = {"m8"},
			name = "not",
		},
		['r8'] = {
			func = function(op1) return "\xF6"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8",
			opcode = {"F6", "/2"},
			metadata = "ANY _XLock",
			operands = {"r8"},
			name = "not",
		},
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64",
			opcode = {"REX.W", "F7", "/2"},
			metadata = "X64 _XLock",
			operands = {"m32"},
			name = "not",
		},
		['r16'] = {
			func = function(op1) return "\x66\xF7"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16",
			opcode = {"66", "F7", "/2"},
			metadata = "ANY _XLock",
			operands = {"r16"},
			name = "not",
		},
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64",
			opcode = {"REX.W", "F7", "/2"},
			metadata = "X64 _XLock",
			operands = {"r64"},
			name = "not",
		},
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64",
			opcode = {"REX.W", "F7", "/2"},
			metadata = "X64 _XLock",
			operands = {"m64"},
			name = "not",
		},
		['r32'] = {
			func = function(op1) return "\xF7"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64",
			opcode = {"F7", "/2"},
			metadata = "ANY _XLock",
			operands = {"r32"},
			name = "not",
		},
		['m16'] = {
			func = function(op1) return "\x66\xF7"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16",
			opcode = {"66", "F7", "/2"},
			metadata = "ANY _XLock",
			operands = {"m16"},
			name = "not",
		},
	},
	['vaesdeclast'] = {
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "DF", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"ymm", "ymm", "m256"},
			name = "vaesdeclast",
		},
		['zmm,zmm,m512'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "DF", "/r"},
			metadata = "AVX512_F    VAES",
			operands = {"zmm", "zmm", "m512"},
			name = "vaesdeclast",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "DF", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"ymm", "ymm", "ymm"},
			name = "vaesdeclast",
		},
		['zmm,zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "DF", "/r"},
			metadata = "AVX512_F    VAES",
			operands = {"zmm", "zmm", "zmm"},
			name = "vaesdeclast",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "DF", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"xmm", "xmm", "m128"},
			name = "vaesdeclast",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "DF", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"xmm", "xmm", "xmm"},
			name = "vaesdeclast",
		},
	},
	['jnp'] = {
		['i8'] = {
			func = function(op1) return "\x7B"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"7B", "cb"},
			metadata = "ANY              Control=Branch PF=R",
			operands = {"string"},
			name = "jnp",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x8B"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "8B", "cw"},
			metadata = "X86              Control=Branch PF=R",
			operands = {"string"},
			name = "jnp",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x8B"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "8B", "cd"},
			metadata = "ANY              Control=Branch PF=R",
			operands = {"string"},
			name = "jnp",
		},
		['string'] = {
			func = function(op1) return "\x0F\x8B"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "8B", "cd"},
			metadata = "ANY              Control=Branch PF=R",
			operands = {"string"},
			name = "jnp",
		},
	},
	['popf'] = {
		[''] = {
			func = function(op1) return "\x66\x9D" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"66", "9D"},
			metadata = "ANY              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {""},
			name = "popf",
		},
	},
	['femms'] = {
		[''] = {
			func = function(op1) return "\x0F\x0E" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "0E"},
			metadata = "3DNOW Volatile",
			operands = {""},
			name = "femms",
		},
	},
	['maskmovq'] = {
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:mm, mm, X:<ds:zdi>",
			opcode = {"0F", "F7", "/r"},
			metadata = "MMX2",
			operands = {"mm", "mm"},
			name = "maskmovq",
		},
	},
	['cmove'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "44", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r32", "m32"},
			name = "cmove",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "44", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r32", "r32"},
			name = "cmove",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "44", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r32", "m64"},
			name = "cmove",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "44", "/r"},
			metadata = "CMOV X64         ZF=R",
			operands = {"r64", "m64"},
			name = "cmove",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "44", "/r"},
			metadata = "CMOV X64         ZF=R",
			operands = {"r64", "m32"},
			name = "cmove",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "44", "/r"},
			metadata = "CMOV X64         ZF=R",
			operands = {"r64", "r64"},
			name = "cmove",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "44", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r16", "r16"},
			name = "cmove",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x44"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "44", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r16", "m16"},
			name = "cmove",
		},
	},
	['stac'] = {
		[''] = {
			func = function(op1) return "\x0F\x01\xCB" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "01", "CB"},
			metadata = "SMAP             Volatile AC=1",
			operands = {""},
			name = "stac",
		},
	},
	['xtest'] = {
		[''] = {
			func = function(op1) return "\x0F\x01\xD6" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "01", "D6"},
			metadata = "TSX              Volatile OF=0 SF=0 ZF=W AF=0 PF=0 CF=0",
			operands = {""},
			name = "xtest",
		},
	},
	['cvttps2pi'] = {
		['mm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, xmm[7:0]/m32/m64",
			opcode = {"0F", "2C", "/r"},
			metadata = "SSE",
			operands = {"mm", "xmm[7:0]"},
			name = "cvttps2pi",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, xmm[7:0]/m32/m64",
			opcode = {"0F", "2C", "/r"},
			metadata = "SSE",
			operands = {"mm", "m64"},
			name = "cvttps2pi",
		},
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, xmm[7:0]/m32/m64",
			opcode = {"0F", "2C", "/r"},
			metadata = "SSE",
			operands = {"mm", "m32"},
			name = "cvttps2pi",
		},
	},
	['pshufw'] = {
		['mm,m64,u8'] = {
			func = function(op1, op2, op3) return "\x0F\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"mm", "m64", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64, ib/ub",
			opcode = {"0F", "70", "/r", "ib"},
			metadata = "MMX2",
			operands = {"mm", "m64", "u8"},
			name = "pshufw",
		},
		['mm,mm,i8'] = {
			func = function(op1, op2, op3) return "\x0F\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"mm", "mm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64, ib/ub",
			opcode = {"0F", "70", "/r", "ib"},
			metadata = "MMX2",
			operands = {"mm", "mm", "i8"},
			name = "pshufw",
		},
		['mm,m32,u8'] = {
			func = function(op1, op2, op3) return "\x0F\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"mm", "m32", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64, ib/ub",
			opcode = {"0F", "70", "/r", "ib"},
			metadata = "MMX2",
			operands = {"mm", "m32", "u8"},
			name = "pshufw",
		},
	},
	['vmovmskps'] = {
		['r64[0],xmm'] = {
			func = function(op1, op2) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64[0], xmm",
			opcode = {"VEX.128.0F.WIG", "50", "/r"},
			metadata = "AVX X64",
			operands = {"r64[0]", "xmm"},
			name = "vmovmskps",
		},
		['r32[0],xmm'] = {
			func = function(op1, op2) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32[0], xmm",
			opcode = {"VEX.128.0F.WIG", "50", "/r"},
			metadata = "AVX",
			operands = {"r32[0]", "xmm"},
			name = "vmovmskps",
		},
		['r32[0],ymm'] = {
			func = function(op1, op2) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[0]", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32[0], ymm",
			opcode = {"VEX.256.0F.WIG", "50", "/r"},
			metadata = "AVX",
			operands = {"r32[0]", "ymm"},
			name = "vmovmskps",
		},
		['r64[0],ymm'] = {
			func = function(op1, op2) return "\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[0]", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64[0], ymm",
			opcode = {"VEX.256.0F.WIG", "50", "/r"},
			metadata = "AVX X64",
			operands = {"r64[0]", "ymm"},
			name = "vmovmskps",
		},
	},
	['vmovhpd'] = {
		['xmm,xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0], m32/m64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "16", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm[7:0]", "m32"},
			name = "vmovhpd",
		},
		['m64,xmm[15:8]'] = {
			func = function(op1, op2) return "\x17"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[15:8]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[15:8]",
			opcode = {"VEX.128.66.0F.WIG", "17", "/r"},
			metadata = "AVX",
			operands = {"m64", "xmm[15:8]"},
			name = "vmovhpd",
		},
		['xmm,xmm[7:0],m64'] = {
			func = function(op1, op2, op3) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]", "m64"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0], m32/m64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "16", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm[7:0]", "m64"},
			name = "vmovhpd",
		},
		['m32,xmm[15:8]'] = {
			func = function(op1, op2) return "\x17"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[15:8]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[15:8]",
			opcode = {"VEX.128.66.0F.WIG", "17", "/r"},
			metadata = "AVX",
			operands = {"m32", "xmm[15:8]"},
			name = "vmovhpd",
		},
	},
	['psrad'] = {
		['mm,u8'] = {
			func = function(op1, op2) return "\x0F\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "72", "/4", "ib"},
			metadata = "MMX",
			operands = {"mm", "u8"},
			name = "psrad",
		},
		['xmm,i8'] = {
			func = function(op1, op2) return "\x66\x0F\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "72", "/4", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "i8"},
			name = "psrad",
		},
		['mm,i8'] = {
			func = function(op1, op2) return "\x0F\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "72", "/4", "ib"},
			metadata = "MMX",
			operands = {"mm", "i8"},
			name = "psrad",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "E2", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psrad",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "E2", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "psrad",
		},
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "E2", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "psrad",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "E2", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "psrad",
		},
		['xmm,u8'] = {
			func = function(op1, op2) return "\x66\x0F\x72"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "72", "/4", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "u8"},
			name = "psrad",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "E2", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psrad",
		},
	},
	['movss'] = {
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[3:0], m32/m64",
			opcode = {"F3", "0F", "10", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m32"},
			name = "movss",
		},
		['xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], xmm[3:0]",
			opcode = {"F3", "0F", "10", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "xmm[3:0]"},
			name = "movss",
		},
		['m64,xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[3:0]",
			opcode = {"F3", "0F", "11", "/r"},
			metadata = "SSE",
			operands = {"m64", "xmm[3:0]"},
			name = "movss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[3:0], m32/m64",
			opcode = {"F3", "0F", "10", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m64"},
			name = "movss",
		},
		['m32,xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[3:0]",
			opcode = {"F3", "0F", "11", "/r"},
			metadata = "SSE",
			operands = {"m32", "xmm[3:0]"},
			name = "movss",
		},
	},
	['mulx'] = {
		['r32,r32,r32'] = {
			func = function(op1, op2, op3) return "\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "r32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r32, W:r32, ~r32/m32/m64, ~<edx>",
			opcode = {"VEX.NDD.LZ.F2.0F38.W0", "F6", "/r"},
			metadata = "BMI2",
			operands = {"r32", "r32", "r32"},
			name = "mulx",
		},
		['r32,r32,m32'] = {
			func = function(op1, op2, op3) return "\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r32, W:r32, ~r32/m32/m64, ~<edx>",
			opcode = {"VEX.NDD.LZ.F2.0F38.W0", "F6", "/r"},
			metadata = "BMI2",
			operands = {"r32", "r32", "m32"},
			name = "mulx",
		},
		['r64,r64,r64'] = {
			func = function(op1, op2, op3) return "\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "r64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r64, W:r64, ~r64/m32/m64, ~<rdx>",
			opcode = {"VEX.NDD.LZ.F2.0F38.W1", "F6", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "r64", "r64"},
			name = "mulx",
		},
		['r64,r64,m64'] = {
			func = function(op1, op2, op3) return "\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r64, W:r64, ~r64/m32/m64, ~<rdx>",
			opcode = {"VEX.NDD.LZ.F2.0F38.W1", "F6", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "r64", "m64"},
			name = "mulx",
		},
		['r64,r64,m32'] = {
			func = function(op1, op2, op3) return "\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r64, W:r64, ~r64/m32/m64, ~<rdx>",
			opcode = {"VEX.NDD.LZ.F2.0F38.W1", "F6", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "r64", "m32"},
			name = "mulx",
		},
		['r32,r32,m64'] = {
			func = function(op1, op2, op3) return "\xF6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r32, W:r32, ~r32/m32/m64, ~<edx>",
			opcode = {"VEX.NDD.LZ.F2.0F38.W0", "F6", "/r"},
			metadata = "BMI2",
			operands = {"r32", "r32", "m64"},
			name = "mulx",
		},
	},
	['vmovhlps'] = {
		['xmm,xmm[15:8],xmm[15:8]'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "xmm[15:8]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[15:8]",
			opcode = {"EVEX.NDS.128.0F.W0", "12", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm[15:8]", "xmm[15:8]"},
			name = "vmovhlps",
		},
	},
	['setpe'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9A", "/r"},
			metadata = "ANY              PF=R",
			operands = {"m8"},
			name = "setpe",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9A", "/r"},
			metadata = "ANY              PF=R",
			operands = {"r8"},
			name = "setpe",
		},
	},
	['pinsrw'] = {
		['mm,r32[1:0],i8'] = {
			func = function(op1, op2, op3) return "\x0F\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"mm", "r32[1:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:mm, r32[1:0]/m16, ib/ub",
			opcode = {"0F", "C4", "/r", "ib"},
			metadata = "MMX2",
			operands = {"mm", "r32[1:0]", "i8"},
			name = "pinsrw",
		},
		['mm,r64[1:0],u8'] = {
			func = function(op1, op2, op3) return "\x0F\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"mm", "r64[1:0]", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:mm, r64[1:0], ib/ub",
			opcode = {"0F", "C4", "/r", "ib"},
			metadata = "MMX2 X64",
			operands = {"mm", "r64[1:0]", "u8"},
			name = "pinsrw",
		},
		['xmm,r32[1:0],i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "r32[1:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r32[1:0]/m16, ib/ub",
			opcode = {"66", "0F", "C4", "/r", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "r32[1:0]", "i8"},
			name = "pinsrw",
		},
		['xmm,m16,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m16", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r32[1:0]/m16, ib/ub",
			opcode = {"66", "0F", "C4", "/r", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "m16", "u8"},
			name = "pinsrw",
		},
		['mm,m16,u8'] = {
			func = function(op1, op2, op3) return "\x0F\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"mm", "m16", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:mm, r32[1:0]/m16, ib/ub",
			opcode = {"0F", "C4", "/r", "ib"},
			metadata = "MMX2",
			operands = {"mm", "m16", "u8"},
			name = "pinsrw",
		},
		['xmm,r64[1:0],i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "r64[1:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r64[1:0], ib/ub",
			opcode = {"66", "0F", "C4", "/r", "ib"},
			metadata = "SSE2 X64",
			operands = {"xmm", "r64[1:0]", "i8"},
			name = "pinsrw",
		},
		['mm,r64[1:0],i8'] = {
			func = function(op1, op2, op3) return "\x0F\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"mm", "r64[1:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:mm, r64[1:0], ib/ub",
			opcode = {"0F", "C4", "/r", "ib"},
			metadata = "MMX2 X64",
			operands = {"mm", "r64[1:0]", "i8"},
			name = "pinsrw",
		},
		['xmm,r64[1:0],u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xC4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "r64[1:0]", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, r64[1:0], ib/ub",
			opcode = {"66", "0F", "C4", "/r", "ib"},
			metadata = "SSE2 X64",
			operands = {"xmm", "r64[1:0]", "u8"},
			name = "pinsrw",
		},
	},
	['phminposuw'] = {
		['xmm[2:0],xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[2:0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[2:0], xmm/m128",
			opcode = {"66", "0F", "38", "41", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm[2:0]", "xmm"},
			name = "phminposuw",
		},
		['xmm[2:0],m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[2:0]", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[2:0], xmm/m128",
			opcode = {"66", "0F", "38", "41", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm[2:0]", "m128"},
			name = "phminposuw",
		},
	},
	['roundps'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x08"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "08", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm", "i8"},
			name = "roundps",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x08"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "08", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128", "u8"},
			name = "roundps",
		},
	},
	['pusha'] = {
		[''] = {
			func = function(op1) return "\x66\x60" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"66", "60"},
			metadata = "X86 Deprecated",
			operands = {""},
			name = "pusha",
		},
	},
	['vinserti128'] = {
		['ymm,ymm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x38"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "38", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m128", "u8"},
			name = "vinserti128",
		},
		['ymm,ymm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x38"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "38", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "xmm", "i8"},
			name = "vinserti128",
		},
	},
	['vmrun'] = {
		[''] = {
			func = function() return "\x0F\x01\xD8" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<rax>",
			opcode = {"0F", "01", "D8"},
			metadata = "SVM X64          PRIVILEGE=L0",
			operands = {},
			name = "vmrun",
		},
	},
	['pfrsqit1'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xA7" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "A7"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pfrsqit1",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xA7" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "A7"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pfrsqit1",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xA7" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "A7"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pfrsqit1",
		},
	},
	['vgatherpf0dpd'] = {
		['m64y {k}'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64y {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64y {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C6", "/1"},
			metadata = "AVX512_PFI",
			operands = {"m64y {k}"},
			name = "vgatherpf0dpd",
		},
		['vm32'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64y {k}",
			opcode = {"EVEX.512.66.0F38.W1", "C6", "/1"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vgatherpf0dpd",
		},
	},
	['extractps'] = {
		['m32,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x17"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m32", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r32/m32/m64, xmm, ib/ub",
			opcode = {"66", "0F", "3A", "17", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"m32", "xmm", "u8"},
			name = "extractps",
		},
		['r64,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x17"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64", "xmm", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64, xmm, ib/ub",
			opcode = {"66", "0F", "3A", "17", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"r64", "xmm", "i8"},
			name = "extractps",
		},
		['r32,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x17"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32", "xmm", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r32/m32/m64, xmm, ib/ub",
			opcode = {"66", "0F", "3A", "17", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"r32", "xmm", "i8"},
			name = "extractps",
		},
		['r64,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x17"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64, xmm, ib/ub",
			opcode = {"66", "0F", "3A", "17", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"r64", "xmm", "u8"},
			name = "extractps",
		},
		['m64,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x17"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m64", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r32/m32/m64, xmm, ib/ub",
			opcode = {"66", "0F", "3A", "17", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"m64", "xmm", "u8"},
			name = "extractps",
		},
	},
	['bndcn'] = {
		['bnd,r32'] = {
			func = function(op1, op2) return "\xF2\x0F\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:bnd, r32/m32/m64",
			opcode = {"F2", "0F", "1B", "/r"},
			metadata = "MPX X86",
			operands = {"bnd", "r32"},
			name = "bndcn",
		},
		['bnd,r64'] = {
			func = function(op1, op2) return "\xF2\x0F\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:bnd, r64/m32/m64",
			opcode = {"F2", "0F", "1B", "/r"},
			metadata = "MPX X64",
			operands = {"bnd", "r64"},
			name = "bndcn",
		},
		['bnd,m64'] = {
			func = function(op1, op2) return "\xF2\x0F\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:bnd, r64/m32/m64",
			opcode = {"F2", "0F", "1B", "/r"},
			metadata = "MPX X64",
			operands = {"bnd", "m64"},
			name = "bndcn",
		},
		['bnd,m32'] = {
			func = function(op1, op2) return "\xF2\x0F\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:bnd, r64/m32/m64",
			opcode = {"F2", "0F", "1B", "/r"},
			metadata = "MPX X64",
			operands = {"bnd", "m32"},
			name = "bndcn",
		},
	},
	['cmovnz'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "45", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r32", "m32"},
			name = "cmovnz",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "45", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r32", "r32"},
			name = "cmovnz",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "45", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r32", "m64"},
			name = "cmovnz",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "45", "/r"},
			metadata = "CMOV X64         ZF=R",
			operands = {"r64", "m64"},
			name = "cmovnz",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "45", "/r"},
			metadata = "CMOV X64         ZF=R",
			operands = {"r64", "m32"},
			name = "cmovnz",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "45", "/r"},
			metadata = "CMOV X64         ZF=R",
			operands = {"r64", "r64"},
			name = "cmovnz",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "45", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r16", "r16"},
			name = "cmovnz",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x45"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "45", "/r"},
			metadata = "CMOV             ZF=R",
			operands = {"r16", "m16"},
			name = "cmovnz",
		},
	},
	['vprolvd'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "15", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vprolvd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vprolvd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vprolvd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vprolvd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vprolvd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "15", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vprolvd",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "15", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vprolvd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vprolvd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vprolvd",
		},
	},
	['v4fmaddps'] = {
		['zmm {kz},zmm,zmm,zmm,zmm,m128'] = {
			func = function(op1, op2, op3, op4, op5, op6) return "\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "zmm", "zmm", "m128"},
			encoding = "RM-T1_4X",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm, zmm, zmm, m128",
			opcode = {"EVEX.DDS.512.F2.0F38.W0", "9A", "/r"},
			metadata = "AVX512_4FMAPS",
			operands = {"zmm {kz}", "zmm", "zmm", "zmm", "zmm", "m128"},
			name = "v4fmaddps",
		},
	},
	['phsubd'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x38\x06"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "06", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m32"},
			name = "phsubd",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x38\x06"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "06", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m64"},
			name = "phsubd",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x38\x06"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "06", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "mm"},
			name = "phsubd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x06"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "06", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "m128"},
			name = "phsubd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x06"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "06", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "xmm"},
			name = "phsubd",
		},
	},
	['swapgs'] = {
		[''] = {
			func = function(op1) return "\x0F\x01\xF8" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "01", "F8"},
			metadata = "X64              Volatile PRIVILEGE=L0",
			operands = {""},
			name = "swapgs",
		},
	},
	['vpmovm2w'] = {
		['zmm,k'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:zmm, k",
			opcode = {"EVEX.512.F3.0F38.W1", "28", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm", "k"},
			name = "vpmovm2w",
		},
		['ymm,k'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, k",
			opcode = {"EVEX.256.F3.0F38.W1", "28", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm", "k"},
			name = "vpmovm2w",
		},
		['xmm,k'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "k"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, k",
			opcode = {"EVEX.128.F3.0F38.W1", "28", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm", "k"},
			name = "vpmovm2w",
		},
	},
	['palignr'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x0F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "0F", "/r", "ib"},
			metadata = "SSE3",
			operands = {"xmm", "xmm", "i8"},
			name = "palignr",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x0F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "0F", "/r", "ib"},
			metadata = "SSE3",
			operands = {"xmm", "m128", "u8"},
			name = "palignr",
		},
		['mm,m64,u8'] = {
			func = function(op1, op2, op3) return "\x0F\x3A\x0F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"mm", "m64", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64, ib/ub",
			opcode = {"0F", "3A", "0F", "/r", "ib"},
			metadata = "SSE3",
			operands = {"mm", "m64", "u8"},
			name = "palignr",
		},
		['mm,m32,u8'] = {
			func = function(op1, op2, op3) return "\x0F\x3A\x0F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"mm", "m32", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64, ib/ub",
			opcode = {"0F", "3A", "0F", "/r", "ib"},
			metadata = "SSE3",
			operands = {"mm", "m32", "u8"},
			name = "palignr",
		},
		['mm,mm,i8'] = {
			func = function(op1, op2, op3) return "\x0F\x3A\x0F"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"mm", "mm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64, ib/ub",
			opcode = {"0F", "3A", "0F", "/r", "ib"},
			metadata = "SSE3",
			operands = {"mm", "mm", "i8"},
			name = "palignr",
		},
	},
	['vpmovwb'] = {
		['xmm,ymm'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "30", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm", "ymm"},
			name = "vpmovwb",
		},
		['xmm[7:0],xmm'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "30", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm[7:0]", "xmm"},
			name = "vpmovwb",
		},
		['m256 {kz},zmm'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "30", "/r"},
			metadata = "AVX512_BW",
			operands = {"m256 {kz}", "zmm"},
			name = "vpmovwb",
		},
		['ymm,zmm'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "30", "/r"},
			metadata = "AVX512_BW",
			operands = {"ymm", "zmm"},
			name = "vpmovwb",
		},
		['m128 {kz},ymm'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "30", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"m128 {kz}", "ymm"},
			name = "vpmovwb",
		},
		['m64 {kz},xmm'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "30", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"m64 {kz}", "xmm"},
			name = "vpmovwb",
		},
		['m32,xmm'] = {
			func = function(op1, op2) return "\x30"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "30", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"m32", "xmm"},
			name = "vpmovwb",
		},
	},
	['lldt'] = {
		['m16'] = {
			func = function(op1) return "\x0F\x00"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r16/m16",
			opcode = {"0F", "00", "/2"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {"m16"},
			name = "lldt",
		},
		['r16'] = {
			func = function(op1) return "\x0F\x00"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r16/m16",
			opcode = {"0F", "00", "/2"},
			metadata = "ANY              Volatile PRIVILEGE=L0",
			operands = {"r16"},
			name = "lldt",
		},
	},
	['invept'] = {
		['r32,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x80"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r32, R:m128",
			opcode = {"66", "0F", "38", "80", "/r"},
			metadata = "VMX X86          PRIVILEGE=L0",
			operands = {"r32", "m128"},
			name = "invept",
		},
		['r64,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x80"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r64, R:m128",
			opcode = {"66", "0F", "38", "80", "/r"},
			metadata = "VMX X64          PRIVILEGE=L0",
			operands = {"r64", "m128"},
			name = "invept",
		},
	},
	['jg'] = {
		['i8'] = {
			func = function(op1) return "\x7F"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"7F", "cb"},
			metadata = "ANY              Control=Branch ZF=R SF=R OF=R",
			operands = {"string"},
			name = "jg",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x8F"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "8F", "cw"},
			metadata = "X86              Control=Branch ZF=R SF=R OF=R",
			operands = {"string"},
			name = "jg",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x8F"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "8F", "cd"},
			metadata = "ANY              Control=Branch ZF=R SF=R OF=R",
			operands = {"string"},
			name = "jg",
		},
		['string'] = {
			func = function(op1) return "\x0F\x8F"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "8F", "cd"},
			metadata = "ANY              Control=Branch ZF=R SF=R OF=R",
			operands = {"string"},
			name = "jg",
		},
	},
	['slwpcb'] = {
		['r64'] = {
			func = function(op1) return "\x12"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r64",
			opcode = {"XOP.L0.P0.M09.W1", "12", "/1"},
			metadata = "LWP X64",
			operands = {"r64"},
			name = "slwpcb",
		},
		['r32'] = {
			func = function(op1) return "\x12"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r32",
			opcode = {"XOP.L0.P0.M09.W0", "12", "/1"},
			metadata = "LWP",
			operands = {"r32"},
			name = "slwpcb",
		},
	},
	['vpminuw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38", "3A", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpminuw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38", "3A", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpminuw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38", "3A", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpminuw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "3A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpminuw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "3A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpminuw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "3A", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpminuw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38", "3A", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpminuw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "3A", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpminuw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38", "3A", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpminuw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38", "3A", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpminuw",
		},
	},
	['shufpd'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "C6", "/r", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "xmm", "i8"},
			name = "shufpd",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "C6", "/r", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "m128", "u8"},
			name = "shufpd",
		},
	},
	['vcvtdq2pd'] = {
		['zmm {kz},ymm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "ymm"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32",
			opcode = {"EVEX.512.F3.0F.W0", "E6", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "ymm"},
			name = "vcvtdq2pd",
		},
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32",
			opcode = {"EVEX.512.F3.0F.W0", "E6", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m256"},
			name = "vcvtdq2pd",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.F3.0F.WIG", "E6", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[7:0]"},
			name = "vcvtdq2pd",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.F3.0F.W0", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vcvtdq2pd",
		},
		['zmm {kz},b32'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32",
			opcode = {"EVEX.512.F3.0F.W0", "E6", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32"},
			name = "vcvtdq2pd",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.F3.0F.W0", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vcvtdq2pd",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.F3.0F.WIG", "E6", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m64"},
			name = "vcvtdq2pd",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.F3.0F.WIG", "E6", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m32"},
			name = "vcvtdq2pd",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.F3.0F.W0", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vcvtdq2pd",
		},
		['ymm {kz},xmm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.F3.0F.W0", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm"},
			name = "vcvtdq2pd",
		},
		['ymm,m128'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.F3.0F.WIG", "E6", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m128"},
			name = "vcvtdq2pd",
		},
		['ymm,xmm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.F3.0F.WIG", "E6", "/r"},
			metadata = "AVX",
			operands = {"ymm", "xmm"},
			name = "vcvtdq2pd",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.F3.0F.W0", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vcvtdq2pd",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.F3.0F.W0", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vcvtdq2pd",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.F3.0F.W0", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vcvtdq2pd",
		},
	},
	['pxor'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "EF", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "pxor",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "EF", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "pxor",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "EF", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "pxor",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "EF", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pxor",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "EF", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pxor",
		},
	},
	['vrcp28pd'] = {
		['zmm {kz},b64 {sae}'] = {
			func = function(op1, op2) return "\xCA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b64 {sae}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F38.W1", "CA", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "b64 {sae}"},
			name = "vrcp28pd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\xCA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F38.W1", "CA", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "zmm"},
			name = "vrcp28pd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\xCA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F38.W1", "CA", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "m512"},
			name = "vrcp28pd",
		},
	},
	['vcmpps'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.0F.WIG", "C2", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vcmpps",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.0F.WIG", "C2", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vcmpps",
		},
		['k {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.0F.W0", "C2", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {kz}", "xmm", "m128", "u8"},
			name = "vcmpps",
		},
		['k {kz},ymm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "ymm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.0F.W0", "C2", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {kz}", "ymm", "b32", "u8"},
			name = "vcmpps",
		},
		['k {kz},xmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "xmm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.0F.W0", "C2", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {kz}", "xmm", "b32", "u8"},
			name = "vcmpps",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.0F.WIG", "C2", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vcmpps",
		},
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.0F.WIG", "C2", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vcmpps",
		},
		['k {kz},zmm,b32,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "zmm", "b32", "ub {sae}"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, zmm, zmm/m512/b32, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.0F.W0", "C2", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {kz}", "zmm", "b32", "ub {sae}"},
			name = "vcmpps",
		},
		['k {kz},zmm,m512,ub {sae}'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "zmm", "m512", "ub {sae}"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, zmm, zmm/m512/b32, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.0F.W0", "C2", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {kz}", "zmm", "m512", "ub {sae}"},
			name = "vcmpps",
		},
		['k {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, zmm, zmm/m512/b32, ib/ub {sae}",
			opcode = {"EVEX.NDS.512.0F.W0", "C2", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"k {kz}", "zmm", "zmm", "i8"},
			name = "vcmpps",
		},
		['k {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.0F.W0", "C2", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {kz}", "ymm", "m256", "u8"},
			name = "vcmpps",
		},
		['k {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.0F.W0", "C2", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {kz}", "ymm", "ymm", "i8"},
			name = "vcmpps",
		},
		['k {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"k {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:k {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.0F.W0", "C2", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"k {kz}", "xmm", "xmm", "i8"},
			name = "vcmpps",
		},
	},
	['fldz'] = {
		[''] = {
			func = function(op1) return "\xD9\xEE" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "EE"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fldz",
		},
	},
	['sahf'] = {
		[''] = {
			func = function() return "\x9E" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:<ah>",
			opcode = {"9E"},
			metadata = "LAHFSAHF         Volatile SF=W ZF=W AF=W PF=W CF=W",
			operands = {},
			name = "sahf",
		},
	},
	['xrstors'] = {
		['m32'] = {
			func = function(op1) return "\x0F\xC7"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64, <edx>, <eax>",
			opcode = {"0F", "C7", "/3"},
			metadata = "XSAVES           Volatile XCR=R",
			operands = {"m32"},
			name = "xrstors",
		},
		['m64'] = {
			func = function(op1) return "\x0F\xC7"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64, <edx>, <eax>",
			opcode = {"0F", "C7", "/3"},
			metadata = "XSAVES           Volatile XCR=R",
			operands = {"m64"},
			name = "xrstors",
		},
	},
	['cmovnc'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "43", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "m32"},
			name = "cmovnc",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "43", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "r32"},
			name = "cmovnc",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "43", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r32", "m64"},
			name = "cmovnc",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "43", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "m64"},
			name = "cmovnc",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "43", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "m32"},
			name = "cmovnc",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "43", "/r"},
			metadata = "CMOV X64         CF=R",
			operands = {"r64", "r64"},
			name = "cmovnc",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "43", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r16", "r16"},
			name = "cmovnc",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x43"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "43", "/r"},
			metadata = "CMOV             CF=R",
			operands = {"r16", "m16"},
			name = "cmovnc",
		},
	},
	['mulss'] = {
		['xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "59", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "xmm[3:0]"},
			name = "mulss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "59", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m32"},
			name = "mulss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "59", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m64"},
			name = "mulss",
		},
	},
	['vmaskmovps'] = {
		['m128,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128", "xmm", "xmm"},
			encoding = "MVR",
			has_relative = false,
			operands2 = "X:m128, xmm, xmm",
			opcode = {"VEX.NDS.128.66.0F38.W0", "2E", "/r"},
			metadata = "AVX",
			operands = {"m128", "xmm", "xmm"},
			name = "vmaskmovps",
		},
		['m256,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x2E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256", "ymm", "ymm"},
			encoding = "MVR",
			has_relative = false,
			operands2 = "X:m256, ymm, ymm",
			opcode = {"VEX.NDS.256.66.0F38.W0", "2E", "/r"},
			metadata = "AVX",
			operands = {"m256", "ymm", "ymm"},
			name = "vmaskmovps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, m128",
			opcode = {"VEX.NDS.128.66.0F38.W0", "2C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vmaskmovps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "2C", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vmaskmovps",
		},
	},
	['movhlps'] = {
		['xmm[7:0],xmm[15:8]'] = {
			func = function(op1, op2) return "\x0F\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[15:8]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], xmm[15:8]",
			opcode = {"0F", "12", "/r"},
			metadata = "SSE",
			operands = {"xmm[7:0]", "xmm[15:8]"},
			name = "movhlps",
		},
	},
	['cmovge'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4D", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r32", "m32"},
			name = "cmovge",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4D", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r32", "r32"},
			name = "cmovge",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4D", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r32", "m64"},
			name = "cmovge",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4D", "/r"},
			metadata = "CMOV X64         SF=R OF=R",
			operands = {"r64", "m64"},
			name = "cmovge",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4D", "/r"},
			metadata = "CMOV X64         SF=R OF=R",
			operands = {"r64", "m32"},
			name = "cmovge",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4D", "/r"},
			metadata = "CMOV X64         SF=R OF=R",
			operands = {"r64", "r64"},
			name = "cmovge",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4D", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r16", "r16"},
			name = "cmovge",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x4D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4D", "/r"},
			metadata = "CMOV             SF=R OF=R",
			operands = {"r16", "m16"},
			name = "cmovge",
		},
	},
	['vprorvd'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "14", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vprorvd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vprorvd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vprorvd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vprorvd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vprorvd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "14", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vprorvd",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "14", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vprorvd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vprorvd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vprorvd",
		},
	},
	['vandps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.0F.W0", "54", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vandps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "54", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vandps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "54", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vandps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "54", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vandps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "54", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vandps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "54", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vandps",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.0F.W0", "54", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vandps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "54", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vandps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "54", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vandps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "54", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vandps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.0F.W0", "54", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vandps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.0F.W0", "54", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vandps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.0F.W0", "54", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vandps",
		},
	},
	['vandnps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.W0", "55", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vandnps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.W0", "55", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vandnps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.W0", "55", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vandnps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.W0", "55", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vandnps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "55", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vandnps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.0F.WIG", "55", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vandnps",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.W0", "55", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vandnps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "55", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vandnps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.W0", "55", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vandnps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.0F.WIG", "55", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vandnps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.W0", "55", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vandnps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.W0", "55", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vandnps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.W0", "55", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vandnps",
		},
	},
	['vpxor'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "EF", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpxor",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "EF", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpxor",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "EF", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpxor",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xEF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "EF", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpxor",
		},
	},
	['vandnpd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "55", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vandnpd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "55", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vandnpd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "55", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vandnpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "55", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vandnpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "55", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vandnpd",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "55", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vandnpd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F.W1", "55", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vandnpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "55", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vandnpd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "55", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vandnpd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "55", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vandnpd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "55", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vandnpd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "55", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vandnpd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x55"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "55", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vandnpd",
		},
	},
	['fscale'] = {
		[''] = {
			func = function(op1) return "\xD9\xFD" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "FD"},
			metadata = "FPU              C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fscale",
		},
	},
	['vphaddwq'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xC7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "C7", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vphaddwq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xC7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "C7", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vphaddwq",
		},
	},
	['pdep'] = {
		['r32,r32,r32'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "r32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r32, r32, r32/m32/m64",
			opcode = {"VEX.NDS.LZ.F2.0F38.W0", "F5", "/r"},
			metadata = "BMI2",
			operands = {"r32", "r32", "r32"},
			name = "pdep",
		},
		['r32,r32,m32'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r32, r32, r32/m32/m64",
			opcode = {"VEX.NDS.LZ.F2.0F38.W0", "F5", "/r"},
			metadata = "BMI2",
			operands = {"r32", "r32", "m32"},
			name = "pdep",
		},
		['r64,r64,r64'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "r64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r64, r64, r64/m32/m64",
			opcode = {"VEX.NDS.LZ.F2.0F38.W1", "F5", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "r64", "r64"},
			name = "pdep",
		},
		['r64,r64,m64'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r64, r64, r64/m32/m64",
			opcode = {"VEX.NDS.LZ.F2.0F38.W1", "F5", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "r64", "m64"},
			name = "pdep",
		},
		['r64,r64,m32'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r64, r64, r64/m32/m64",
			opcode = {"VEX.NDS.LZ.F2.0F38.W1", "F5", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "r64", "m32"},
			name = "pdep",
		},
		['r32,r32,m64'] = {
			func = function(op1, op2, op3) return "\xF5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r32, r32, r32/m32/m64",
			opcode = {"VEX.NDS.LZ.F2.0F38.W0", "F5", "/r"},
			metadata = "BMI2",
			operands = {"r32", "r32", "m64"},
			name = "pdep",
		},
	},
	['fnop'] = {
		[''] = {
			func = function(op1) return "\xD9\xD0" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "D0"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {""},
			name = "fnop",
		},
	},
	['cvtsi2sd'] = {
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF2\x0F\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], r64/m32/m64",
			opcode = {"REX.W", "F2", "0F", "2A", "/r"},
			metadata = "SSE2 X64",
			operands = {"xmm[7:0]", "m64"},
			name = "cvtsi2sd",
		},
		['xmm[7:0],r32'] = {
			func = function(op1, op2) return "\xF2\x0F\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], r32/m32/m64",
			opcode = {"F2", "0F", "2A", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "r32"},
			name = "cvtsi2sd",
		},
		['xmm[7:0],r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF2\x0F\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], r64/m32/m64",
			opcode = {"REX.W", "F2", "0F", "2A", "/r"},
			metadata = "SSE2 X64",
			operands = {"xmm[7:0]", "r64"},
			name = "cvtsi2sd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF2\x0F\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[7:0], r64/m32/m64",
			opcode = {"REX.W", "F2", "0F", "2A", "/r"},
			metadata = "SSE2 X64",
			operands = {"xmm[7:0]", "m32"},
			name = "cvtsi2sd",
		},
	},
	['cmpss'] = {
		['xmm[3:0],m32,u8'] = {
			func = function(op1, op2, op3) return "\xF3\x0F\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm[3:0]", "m32", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64, ib/ub",
			opcode = {"F3", "0F", "C2", "/r", "ib"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m32", "u8"},
			name = "cmpss",
		},
		['xmm[3:0],m64,u8'] = {
			func = function(op1, op2, op3) return "\xF3\x0F\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm[3:0]", "m64", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64, ib/ub",
			opcode = {"F3", "0F", "C2", "/r", "ib"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m64", "u8"},
			name = "cmpss",
		},
		['xmm[3:0],xmm[3:0],i8'] = {
			func = function(op1, op2, op3) return "\xF3\x0F\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64, ib/ub",
			opcode = {"F3", "0F", "C2", "/r", "ib"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "xmm[3:0]", "i8"},
			name = "cmpss",
		},
	},
	['sysret64'] = {
		[''] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\x07" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"REX.W", "0F", "07"},
			metadata = "X64              Volatile PRIVILEGE=L0",
			operands = {""},
			name = "sysret64",
		},
	},
	['jna'] = {
		['string'] = {
			func = function(op1) return "\x0F\x86"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"string"},
			encoding = "D",
			has_relative = false,
			operands2 = "rel32",
			opcode = {"0F", "86", "cd"},
			metadata = "ANY              Control=Branch CF=R ZF=R",
			operands = {"string"},
			name = "jna",
		},
	},
	['vrcp28ps'] = {
		['zmm {kz},b32 {sae}'] = {
			func = function(op1, op2) return "\xCA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {sae}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.66.0F38.W0", "CA", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "b32 {sae}"},
			name = "vrcp28ps",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\xCA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.66.0F38.W0", "CA", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "zmm"},
			name = "vrcp28ps",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\xCA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.66.0F38.W0", "CA", "/r"},
			metadata = "AVX512_ERI",
			operands = {"zmm {kz}", "m512"},
			name = "vrcp28ps",
		},
	},
	['setle'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9E", "/r"},
			metadata = "ANY              ZF=R SF=R OF=R",
			operands = {"m8"},
			name = "setle",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9E", "/r"},
			metadata = "ANY              ZF=R SF=R OF=R",
			operands = {"r8"},
			name = "setle",
		},
	},
	['vscatterpf0dps'] = {
		['m64z {k}'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m64z {k}"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C6", "/5"},
			metadata = "AVX512_PFI",
			operands = {"m64z {k}"},
			name = "vscatterpf0dps",
		},
		['vm32'] = {
			func = function(op1) return "\xC6"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"vm32"},
			encoding = "M-T1S",
			has_relative = false,
			operands2 = "R:vm32/m64z {k}",
			opcode = {"EVEX.512.66.0F38.W0", "C6", "/5"},
			metadata = "AVX512_PFI",
			operands = {"vm32"},
			name = "vscatterpf0dps",
		},
	},
	['ftst'] = {
		[''] = {
			func = function(op1) return "\xD9\xE4" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "E4"},
			metadata = "FPU              C0=W C1=0 C2=W C3=W",
			operands = {""},
			name = "ftst",
		},
	},
	['cvtsi2ss'] = {
		['xmm[3:0],r32'] = {
			func = function(op1, op2) return "\xF3\x0F\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], r32/m32/m64",
			opcode = {"F3", "0F", "2A", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "r32"},
			name = "cvtsi2ss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], r64/m32/m64",
			opcode = {"REX.W", "F3", "0F", "2A", "/r"},
			metadata = "SSE X64",
			operands = {"xmm[3:0]", "m32"},
			name = "cvtsi2ss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], r64/m32/m64",
			opcode = {"REX.W", "F3", "0F", "2A", "/r"},
			metadata = "SSE X64",
			operands = {"xmm[3:0]", "m64"},
			name = "cvtsi2ss",
		},
		['xmm[3:0],r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\x2A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[3:0], r64/m32/m64",
			opcode = {"REX.W", "F3", "0F", "2A", "/r"},
			metadata = "SSE X64",
			operands = {"xmm[3:0]", "r64"},
			name = "cvtsi2ss",
		},
	},
	['cmovs'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x48"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "48", "/r"},
			metadata = "CMOV             SF=R",
			operands = {"r32", "m32"},
			name = "cmovs",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x48"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "48", "/r"},
			metadata = "CMOV             SF=R",
			operands = {"r32", "r32"},
			name = "cmovs",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x48"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "48", "/r"},
			metadata = "CMOV             SF=R",
			operands = {"r32", "m64"},
			name = "cmovs",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x48"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "48", "/r"},
			metadata = "CMOV X64         SF=R",
			operands = {"r64", "m64"},
			name = "cmovs",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x48"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "48", "/r"},
			metadata = "CMOV X64         SF=R",
			operands = {"r64", "m32"},
			name = "cmovs",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x48"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "48", "/r"},
			metadata = "CMOV X64         SF=R",
			operands = {"r64", "r64"},
			name = "cmovs",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x48"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "48", "/r"},
			metadata = "CMOV             SF=R",
			operands = {"r16", "r16"},
			name = "cmovs",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x48"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "48", "/r"},
			metadata = "CMOV             SF=R",
			operands = {"r16", "m16"},
			name = "cmovs",
		},
	},
	['vmovntps'] = {
		['m512,zmm'] = {
			func = function(op1, op2) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:m512, zmm",
			opcode = {"EVEX.512.0F.W0", "2B", "/r"},
			metadata = "AVX512_F",
			operands = {"m512", "zmm"},
			name = "vmovntps",
		},
		['m128,xmm'] = {
			func = function(op1, op2) return "\x2B"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m128, xmm",
			opcode = {"VEX.128.0F.WIG", "2B", "/r"},
			metadata = "AVX",
			operands = {"m128", "xmm"},
			name = "vmovntps",
		},
		['m256,ymm'] = {
			func = function(op1, op2) return "\x2B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256", "ymm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m256, ymm",
			opcode = {"VEX.256.0F.WIG", "2B", "/r"},
			metadata = "AVX",
			operands = {"m256", "ymm"},
			name = "vmovntps",
		},
	},
	['bndldx'] = {
		['bnd,mib'] = {
			func = function(op1, op2) return "\x0F\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "mib"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:bnd, mib",
			opcode = {"0F", "1A", "/r"},
			metadata = "MPX",
			operands = {"bnd", "mib"},
			name = "bndldx",
		},
	},
	['jno'] = {
		['i8'] = {
			func = function(op1) return "\x71"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"71", "cb"},
			metadata = "ANY              Control=Branch OF=R",
			operands = {"string"},
			name = "jno",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x81"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "81", "cw"},
			metadata = "X86              Control=Branch OF=R",
			operands = {"string"},
			name = "jno",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x81"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "81", "cd"},
			metadata = "ANY              Control=Branch OF=R",
			operands = {"string"},
			name = "jno",
		},
		['string'] = {
			func = function(op1) return "\x0F\x81"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "81", "cd"},
			metadata = "ANY              Control=Branch OF=R",
			operands = {"string"},
			name = "jno",
		},
	},
	['iretd'] = {
		[''] = {
			func = function(op1) return "\xCF" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"CF"},
			metadata = "ANY              Control=Return OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {""},
			name = "iretd",
		},
	},
	['vpcompressd'] = {
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F38.W0", "8B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vpcompressd",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F38.W0", "8B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm", "zmm"},
			name = "vpcompressd",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F38.W0", "8B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm", "ymm"},
			name = "vpcompressd",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F38.W0", "8B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vpcompressd",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F38.W0", "8B", "/r"},
			metadata = "AVX512_F",
			operands = {"m512 {kz}", "zmm"},
			name = "vpcompressd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x8B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F38.W0", "8B", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "xmm"},
			name = "vpcompressd",
		},
	},
	['cld'] = {
		[''] = {
			func = function(op1) return "\xFC" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"FC"},
			metadata = "ANY              DF=0",
			operands = {""},
			name = "cld",
		},
	},
	['vinsertf128'] = {
		['ymm,ymm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x18"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "18", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m128", "u8"},
			name = "vinsertf128",
		},
		['ymm,ymm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x18"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "18", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "xmm", "i8"},
			name = "vinsertf128",
		},
	},
	['vpermilps'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x0C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "0C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpermilps",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "04", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vpermilps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x0C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "0C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpermilps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x0C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "0C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpermilps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x0C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W0", "0C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpermilps",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x0C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "0C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpermilps",
		},
		['zmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "04", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b64", "u8"},
			name = "vpermilps",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.66.0F3A.W0", "04", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "i8"},
			name = "vpermilps",
		},
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.66.0F3A.W0", "04", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "i8"},
			name = "vpermilps",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x0C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "0C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpermilps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x0C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "0C", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpermilps",
		},
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "04", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vpermilps",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "04", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vpermilps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x0C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "0C", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vpermilps",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x0C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "0C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpermilps",
		},
		['ymm,m256,u8'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "m256", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256, ib/ub",
			opcode = {"VEX.256.66.0F3A.W0", "04", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "m256", "u8"},
			name = "vpermilps",
		},
		['xmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W0", "04", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64", "u8"},
			name = "vpermilps",
		},
		['ymm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "04", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b64", "u8"},
			name = "vpermilps",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "04", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vpermilps",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W0", "04", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vpermilps",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x0C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "0C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpermilps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x0C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "0C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpermilps",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"VEX.128.66.0F3A.W0", "04", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "m128", "u8"},
			name = "vpermilps",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x04"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.512.66.0F3A.W0", "04", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vpermilps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x0C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.W0", "0C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpermilps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x0C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "0C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpermilps",
		},
	},
	['movhps'] = {
		['xmm[15:8],m64'] = {
			func = function(op1, op2) return "\x0F\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[15:8]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[15:8], m32/m64",
			opcode = {"0F", "16", "/r"},
			metadata = "SSE",
			operands = {"xmm[15:8]", "m64"},
			name = "movhps",
		},
		['m64,xmm[15:8]'] = {
			func = function(op1, op2) return "\x0F\x17"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[15:8]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[15:8]",
			opcode = {"0F", "17", "/r"},
			metadata = "SSE",
			operands = {"m64", "xmm[15:8]"},
			name = "movhps",
		},
		['xmm[15:8],m32'] = {
			func = function(op1, op2) return "\x0F\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[15:8]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:xmm[15:8], m32/m64",
			opcode = {"0F", "16", "/r"},
			metadata = "SSE",
			operands = {"xmm[15:8]", "m32"},
			name = "movhps",
		},
		['m32,xmm[15:8]'] = {
			func = function(op1, op2) return "\x0F\x17"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[15:8]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[15:8]",
			opcode = {"0F", "17", "/r"},
			metadata = "SSE",
			operands = {"m32", "xmm[15:8]"},
			name = "movhps",
		},
	},
	['ud2'] = {
		[''] = {
			func = function(op1) return "\x0F\x0B" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "0B"},
			metadata = "ANY",
			operands = {""},
			name = "ud2",
		},
	},
	['vpbroadcastb'] = {
		['zmm {kz},m8'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m8"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[0]/m8",
			opcode = {"EVEX.512.66.0F38.W0", "78", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "m8"},
			name = "vpbroadcastb",
		},
		['zmm {kz},xmm[0]'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "xmm[0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[0]/m8",
			opcode = {"EVEX.512.66.0F38.W0", "78", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "xmm[0]"},
			name = "vpbroadcastb",
		},
		['xmm {kz},r64[0]'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "r64[0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, r64[0]",
			opcode = {"EVEX.128.66.0F38.W0", "7A", "/r"},
			metadata = "AVX512_BW-VL X64",
			operands = {"xmm {kz}", "r64[0]"},
			name = "vpbroadcastb",
		},
		['ymm {kz},r64[0]'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "r64[0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, r64[0]",
			opcode = {"EVEX.256.66.0F38.W0", "7A", "/r"},
			metadata = "AVX512_BW-VL X64",
			operands = {"ymm {kz}", "r64[0]"},
			name = "vpbroadcastb",
		},
		['zmm {kz},r64[0]'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "r64[0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, r64[0]",
			opcode = {"EVEX.512.66.0F38.W0", "7A", "/r"},
			metadata = "AVX512_BW X64",
			operands = {"zmm {kz}", "r64[0]"},
			name = "vpbroadcastb",
		},
		['xmm {kz},xmm[0]'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[0]/m8",
			opcode = {"EVEX.128.66.0F38.W0", "78", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm[0]"},
			name = "vpbroadcastb",
		},
		['xmm {kz},r32[0]'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "r32[0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, r32[0]",
			opcode = {"EVEX.128.66.0F38.W0", "7A", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "r32[0]"},
			name = "vpbroadcastb",
		},
		['ymm {kz},r32[0]'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "r32[0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, r32[0]",
			opcode = {"EVEX.256.66.0F38.W0", "7A", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "r32[0]"},
			name = "vpbroadcastb",
		},
		['zmm {kz},r32[0]'] = {
			func = function(op1, op2) return "\x7A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "r32[0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, r32[0]",
			opcode = {"EVEX.512.66.0F38.W0", "7A", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "r32[0]"},
			name = "vpbroadcastb",
		},
		['xmm,m8'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[0]/m8",
			opcode = {"VEX.128.66.0F38.W0", "78", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m8"},
			name = "vpbroadcastb",
		},
		['xmm {kz},m8'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m8"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[0]/m8",
			opcode = {"EVEX.128.66.0F38.W0", "78", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "m8"},
			name = "vpbroadcastb",
		},
		['ymm {kz},m8'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m8"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[0]/m8",
			opcode = {"EVEX.256.66.0F38.W0", "78", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "m8"},
			name = "vpbroadcastb",
		},
		['ymm {kz},xmm[0]'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm[0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[0]/m8",
			opcode = {"EVEX.256.66.0F38.W0", "78", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "xmm[0]"},
			name = "vpbroadcastb",
		},
		['ymm,m8'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[0]/m8",
			opcode = {"VEX.256.66.0F38.W0", "78", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m8"},
			name = "vpbroadcastb",
		},
		['xmm,xmm[0]'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[0]/m8",
			opcode = {"VEX.128.66.0F38.W0", "78", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm[0]"},
			name = "vpbroadcastb",
		},
		['ymm,xmm[0]'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm[0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[0]/m8",
			opcode = {"VEX.256.66.0F38.W0", "78", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm[0]"},
			name = "vpbroadcastb",
		},
	},
	['pfacc'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xAE" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "AE"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pfacc",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xAE" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "AE"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pfacc",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xAE" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "AE"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pfacc",
		},
	},
	['fdivp'] = {
		[''] = {
			func = function(op1) return "\xDE\xF9" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"DE", "F9"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fdivp",
		},
		['st(i)'] = {
			func = function(op1) return "\xDE" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"DE", "F8+i"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fdivp",
		},
	},
	['vfmaddsubpd'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "5D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vfmaddsubpd",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "5D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vfmaddsubpd",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "5D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vfmaddsubpd",
		},
		['ymm,ymm,ymm,m256'] = {
			func = function(op1, op2, op3, op4) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "m256"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "5D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "m256"},
			name = "vfmaddsubpd",
		},
		['xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "5D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "m128"},
			name = "vfmaddsubpd",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "5D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vfmaddsubpd",
		},
	},
	['vpermps'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "16", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpermps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.W0", "16", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpermps",
		},
	},
	['vphaddubq'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "D3", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vphaddubq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "D3", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vphaddubq",
		},
	},
	['lea'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, m32/m64",
			opcode = {"8D", "/r"},
			metadata = "ANY",
			operands = {"r32", "m32"},
			name = "lea",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, m32/m64",
			opcode = {"8D", "/r"},
			metadata = "ANY",
			operands = {"r32", "m64"},
			name = "lea",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, m32/m64",
			opcode = {"REX.W", "8D", "/r"},
			metadata = "X64",
			operands = {"r64", "m64"},
			name = "lea",
		},
		['r16,m32'] = {
			func = function(op1, op2) return "\x67\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, m32/m64",
			opcode = {"67", "8D", "/r"},
			metadata = "ANY",
			operands = {"r16", "m32"},
			name = "lea",
		},
		['r16,m64'] = {
			func = function(op1, op2) return "\x67\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, m32/m64",
			opcode = {"67", "8D", "/r"},
			metadata = "ANY",
			operands = {"r16", "m64"},
			name = "lea",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x8D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, m32/m64",
			opcode = {"REX.W", "8D", "/r"},
			metadata = "X64",
			operands = {"r64", "m32"},
			name = "lea",
		},
	},
	['vgetmantpd'] = {
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "26", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vgetmantpd",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "26", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vgetmantpd",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "26", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vgetmantpd",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "26", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vgetmantpd",
		},
		['xmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "26", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64", "u8"},
			name = "vgetmantpd",
		},
		['ymm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "26", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b64", "u8"},
			name = "vgetmantpd",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub {sae}",
			opcode = {"EVEX.512.66.0F3A.W1", "26", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vgetmantpd",
		},
		['zmm {kz},b64,ub {sae}'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b64", "ub {sae}"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub {sae}",
			opcode = {"EVEX.512.66.0F3A.W1", "26", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b64", "ub {sae}"},
			name = "vgetmantpd",
		},
		['zmm {kz},m512,ub {sae}'] = {
			func = function(op1, op2, op3) return "\x26"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub {sae}"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub {sae}",
			opcode = {"EVEX.512.66.0F3A.W1", "26", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "ub {sae}"},
			name = "vgetmantpd",
		},
	},
	['fnstsw'] = {
		['ax'] = {
			func = function(op1) return "\xDF\xE0" end,
			real_operands = {"ax"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "w:ax",
			opcode = {"DF", "E0"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {"ax"},
			name = "fnstsw",
		},
		['m16'] = {
			func = function(op1) return "\xDD"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m16",
			opcode = {"DD", "/7"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {"m16"},
			name = "fnstsw",
		},
	},
	['pmovzxdq'] = {
		['xmm,m64'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "35", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m64"},
			name = "pmovzxdq",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "35", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm[7:0]"},
			name = "pmovzxdq",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x35"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"66", "0F", "38", "35", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m32"},
			name = "pmovzxdq",
		},
	},
	['vpsubw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xF9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "F9", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpsubw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "F9", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsubw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xF9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "F9", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpsubw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xF9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "F9", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsubw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "F9", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsubw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xF9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "F9", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpsubw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xF9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "F9", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpsubw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xF9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "F9", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpsubw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xF9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "F9", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpsubw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xF9"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "F9", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsubw",
		},
	},
	['vpmaxsb'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x3C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "3C", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmaxsb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x3C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "3C", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmaxsb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x3C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "3C", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmaxsb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x3C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "3C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmaxsb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x3C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "3C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpmaxsb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x3C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "3C", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmaxsb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x3C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "3C", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmaxsb",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x3C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "3C", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpmaxsb",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x3C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "3C", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmaxsb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x3C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "3C", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmaxsb",
		},
	},
	['psubb'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xF8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "F8", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "psubb",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xF8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "F8", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "psubb",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xF8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "F8", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "psubb",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xF8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "F8", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psubb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xF8"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "F8", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psubb",
		},
	},
	['aam'] = {
		['i8'] = {
			func = function(op1) return "\xD4"..x86_64.encode_int("int8_t", op1) end,
			real_operands = {"ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:<ax>, ib/ub",
			opcode = {"D4", "ib"},
			metadata = "X86 Deprecated   OF=U SF=W ZF=W AF=U PF=W CF=U",
			operands = {"i8"},
			name = "aam",
		},
		['u8'] = {
			func = function(op1) return "\xD4"..x86_64.encode_int("int8_t", op1) end,
			real_operands = {"ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:<ax>, ib/ub",
			opcode = {"D4", "ib"},
			metadata = "X86 Deprecated   OF=U SF=W ZF=W AF=U PF=W CF=U",
			operands = {"u8"},
			name = "aam",
		},
	},
	['popfq'] = {
		[''] = {
			func = function(op1) return "\x9D" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"9D"},
			metadata = "X64              OF=W SF=W ZF=W AF=W PF=W CF=W",
			operands = {""},
			name = "popfq",
		},
	},
	['pushf'] = {
		[''] = {
			func = function(op1) return "\x66\x9C" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"66", "9C"},
			metadata = "ANY",
			operands = {""},
			name = "pushf",
		},
	},
	['scasb'] = {
		[''] = {
			func = function() return "\xAE" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:<al>, X:<es:zdi>",
			opcode = {"AE"},
			metadata = "ANY _Rep         OF=W SF=W ZF=W AF=W PF=W CF=W DF=R",
			operands = {},
			name = "scasb",
		},
	},
	['vbroadcastf128'] = {
		['ymm,m128'] = {
			func = function(op1, op2) return "\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, m128",
			opcode = {"VEX.256.66.0F38.W0", "1A", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m128"},
			name = "vbroadcastf128",
		},
	},
	['cmovng'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4E", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r32", "m32"},
			name = "cmovng",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4E", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r32", "r32"},
			name = "cmovng",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4E", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r32", "m64"},
			name = "cmovng",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4E", "/r"},
			metadata = "CMOV X64         ZF=R SF=R OF=R",
			operands = {"r64", "m64"},
			name = "cmovng",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4E", "/r"},
			metadata = "CMOV X64         ZF=R SF=R OF=R",
			operands = {"r64", "m32"},
			name = "cmovng",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4E", "/r"},
			metadata = "CMOV X64         ZF=R SF=R OF=R",
			operands = {"r64", "r64"},
			name = "cmovng",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4E", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r16", "r16"},
			name = "cmovng",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x4E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4E", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r16", "m16"},
			name = "cmovng",
		},
	},
	['mulpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "59", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "mulpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "59", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "mulpd",
		},
	},
	['cvttss2si'] = {
		['r32,xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "2C", "/r"},
			metadata = "SSE",
			operands = {"r32", "xmm[3:0]"},
			name = "cvttss2si",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "2C", "/r"},
			metadata = "SSE",
			operands = {"r32", "m64"},
			name = "cvttss2si",
		},
		['r64,xmm[3:0]'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF3\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64",
			opcode = {"REX.W", "F3", "0F", "2C", "/r"},
			metadata = "SSE X64",
			operands = {"r64", "xmm[3:0]"},
			name = "cvttss2si",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64",
			opcode = {"REX.W", "F3", "0F", "2C", "/r"},
			metadata = "SSE X64",
			operands = {"r64", "m64"},
			name = "cvttss2si",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\xF3\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[3:0]/m32/m64",
			opcode = {"REX.W", "F3", "0F", "2C", "/r"},
			metadata = "SSE X64",
			operands = {"r64", "m32"},
			name = "cvttss2si",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "2C", "/r"},
			metadata = "SSE",
			operands = {"r32", "m32"},
			name = "cvttss2si",
		},
	},
	['llwpcb'] = {
		['r64'] = {
			func = function(op1) return "\x12"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r64",
			opcode = {"XOP.L0.P0.M09.W1", "12", "/0"},
			metadata = "LWP X64",
			operands = {"r64"},
			name = "llwpcb",
		},
		['r32'] = {
			func = function(op1) return "\x12"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r32",
			opcode = {"XOP.L0.P0.M09.W0", "12", "/0"},
			metadata = "LWP",
			operands = {"r32"},
			name = "llwpcb",
		},
	},
	['pop'] = {
		['m16'] = {
			func = function(op1) return "\x66\x8F"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r16/m16",
			opcode = {"66", "8F", "/0"},
			metadata = "ANY",
			operands = {"m16"},
			name = "pop",
		},
		['es'] = {
			func = function(op1) return "\x07" end,
			real_operands = {"es"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:es",
			opcode = {"07"},
			metadata = "X86",
			operands = {"es"},
			name = "pop",
		},
		['r16'] = {
			func = function(op1) return "\x66"..string.char(0x58 + x86_64.reginfo[op1.reg].index) end,
			real_operands = {"r16"},
			encoding = "O",
			has_relative = false,
			operands2 = "w:r16",
			opcode = {"66", "58+r"},
			metadata = "ANY",
			operands = {"r16"},
			name = "pop",
		},
		['gs'] = {
			func = function(op1) return "\x0F\xA9" end,
			real_operands = {"gs"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:gs",
			opcode = {"0F", "A9"},
			metadata = "ANY",
			operands = {"gs"},
			name = "pop",
		},
		['r32'] = {
			func = function(op1) return string.char(0x58 + x86_64.reginfo[op1.reg].index) end,
			real_operands = {"r32"},
			encoding = "O",
			has_relative = false,
			operands2 = "W:r32",
			opcode = {"58+r"},
			metadata = "X86",
			operands = {"r32"},
			name = "pop",
		},
		['m32'] = {
			func = function(op1) return "\x8F"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r64/m32/m64",
			opcode = {"8F", "/0"},
			metadata = "X64",
			operands = {"m32"},
			name = "pop",
		},
		['m64'] = {
			func = function(op1) return "\x8F"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r64/m32/m64",
			opcode = {"8F", "/0"},
			metadata = "X64",
			operands = {"m64"},
			name = "pop",
		},
		['ss'] = {
			func = function(op1) return "\x17" end,
			real_operands = {"ss"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:ss",
			opcode = {"17"},
			metadata = "X86",
			operands = {"ss"},
			name = "pop",
		},
		['fs'] = {
			func = function(op1) return "\x0F\xA1" end,
			real_operands = {"fs"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:fs",
			opcode = {"0F", "A1"},
			metadata = "ANY",
			operands = {"fs"},
			name = "pop",
		},
		['r64'] = {
			func = function(op1) return string.char(0x58 + x86_64.reginfo[op1.reg].index) end,
			real_operands = {"r64"},
			encoding = "O",
			has_relative = false,
			operands2 = "W:r64",
			opcode = {"58+r"},
			metadata = "X64",
			operands = {"r64"},
			name = "pop",
		},
		['ds'] = {
			func = function(op1) return "\x1F" end,
			real_operands = {"ds"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:ds",
			opcode = {"1F"},
			metadata = "X86",
			operands = {"ds"},
			name = "pop",
		},
	},
	['vcvttpd2dq'] = {
		['xmm,ymm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, ymm/m256",
			opcode = {"VEX.256.66.0F.WIG", "E6", "/r"},
			metadata = "AVX",
			operands = {"xmm", "ymm"},
			name = "vcvttpd2dq",
		},
		['xmm[7:0],xmm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm/m128",
			opcode = {"VEX.128.66.0F.WIG", "E6", "/r"},
			metadata = "AVX",
			operands = {"xmm[7:0]", "xmm"},
			name = "vcvttpd2dq",
		},
		['xmm[7:0] {kz},b64'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0] {kz}", "b64"},
			name = "vcvttpd2dq",
		},
		['xmm[7:0],m128'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm/m128",
			opcode = {"VEX.128.66.0F.WIG", "E6", "/r"},
			metadata = "AVX",
			operands = {"xmm[7:0]", "m128"},
			name = "vcvttpd2dq",
		},
		['xmm[7:0] {kz},xmm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0] {kz}", "xmm"},
			name = "vcvttpd2dq",
		},
		['ymm {kz},zmm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F.W1", "E6", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "zmm"},
			name = "vcvttpd2dq",
		},
		['ymm {kz},m512'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F.W1", "E6", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "m512"},
			name = "vcvttpd2dq",
		},
		['ymm {kz},b64 {sae}'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64 {sae}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F.W1", "E6", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "b64 {sae}"},
			name = "vcvttpd2dq",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vcvttpd2dq",
		},
		['xmm {kz},m256'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m256"},
			name = "vcvttpd2dq",
		},
		['xmm,m256'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, ymm/m256",
			opcode = {"VEX.256.66.0F.WIG", "E6", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m256"},
			name = "vcvttpd2dq",
		},
		['xmm[7:0] {kz},m128'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0] {kz}", "m128"},
			name = "vcvttpd2dq",
		},
		['xmm {kz},ymm'] = {
			func = function(op1, op2) return "\xE6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "E6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "ymm"},
			name = "vcvttpd2dq",
		},
	},
	['vpcmpgtd'] = {
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "66", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vpcmpgtd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "66", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpcmpgtd",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "66", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "m512"},
			name = "vpcmpgtd",
		},
		['k {k},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "b32"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "66", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "b32"},
			name = "vpcmpgtd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "66", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpcmpgtd",
		},
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F.W0", "66", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vpcmpgtd",
		},
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "66", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vpcmpgtd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "66", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpcmpgtd",
		},
		['k {k},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "b32"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "66", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "b32"},
			name = "vpcmpgtd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "66", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpcmpgtd",
		},
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "66", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vpcmpgtd",
		},
		['k {k},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "b32"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F.W0", "66", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "b32"},
			name = "vpcmpgtd",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x66"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F.W0", "66", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vpcmpgtd",
		},
	},
	['vpaddusw'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "DD", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpaddusw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "DD", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpaddusw",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "DD", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpaddusw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "DD", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpaddusw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "DD", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpaddusw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "DD", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpaddusw",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "DD", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpaddusw",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "DD", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpaddusw",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "DD", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpaddusw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "DD", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpaddusw",
		},
	},
	['cmovnbe'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "47", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r32", "m32"},
			name = "cmovnbe",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "47", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r32", "r32"},
			name = "cmovnbe",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "47", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r32", "m64"},
			name = "cmovnbe",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "47", "/r"},
			metadata = "CMOV X64         CF=R ZF=R",
			operands = {"r64", "m64"},
			name = "cmovnbe",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "47", "/r"},
			metadata = "CMOV X64         CF=R ZF=R",
			operands = {"r64", "m32"},
			name = "cmovnbe",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "47", "/r"},
			metadata = "CMOV X64         CF=R ZF=R",
			operands = {"r64", "r64"},
			name = "cmovnbe",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "47", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r16", "r16"},
			name = "cmovnbe",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x47"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "47", "/r"},
			metadata = "CMOV             CF=R ZF=R",
			operands = {"r16", "m16"},
			name = "cmovnbe",
		},
	},
	['vfpclasssd'] = {
		['k {k},m32,u8'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "m32", "ub"},
			encoding = "RMI-T1S",
			has_relative = false,
			operands2 = "W:k {k}, xmm[7:0]/m32/m64, ib/ub",
			opcode = {"EVEX.LIG.66.0F3A.W1", "67", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k {k}", "m32", "u8"},
			name = "vfpclasssd",
		},
		['k {k},xmm[7:0],i8'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "xmm[7:0]", "ib"},
			encoding = "RMI-T1S",
			has_relative = false,
			operands2 = "W:k {k}, xmm[7:0]/m32/m64, ib/ub",
			opcode = {"EVEX.LIG.66.0F3A.W1", "67", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k {k}", "xmm[7:0]", "i8"},
			name = "vfpclasssd",
		},
		['k {k},m64,u8'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"k {k}", "m64", "ub"},
			encoding = "RMI-T1S",
			has_relative = false,
			operands2 = "W:k {k}, xmm[7:0]/m32/m64, ib/ub",
			opcode = {"EVEX.LIG.66.0F3A.W1", "67", "/r", "ib"},
			metadata = "AVX512_DQ",
			operands = {"k {k}", "m64", "u8"},
			name = "vfpclasssd",
		},
	},
	['fxch'] = {
		[''] = {
			func = function(op1) return "\xD9\xC9" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "C9"},
			metadata = "FPU              C0=U C1=0 C2=U C3=U",
			operands = {""},
			name = "fxch",
		},
		['st(i)'] = {
			func = function(op1) return "\xD9" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"D9", "C8+i"},
			metadata = "FPU              C0=U C1=0 C2=U C3=U",
			operands = {"st(i)"},
			name = "fxch",
		},
	},
	['cmovnle'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4F", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r32", "m32"},
			name = "cmovnle",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4F", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r32", "r32"},
			name = "cmovnle",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "4F", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r32", "m64"},
			name = "cmovnle",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4F", "/r"},
			metadata = "CMOV X64         ZF=R SF=R OF=R",
			operands = {"r64", "m64"},
			name = "cmovnle",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4F", "/r"},
			metadata = "CMOV X64         ZF=R SF=R OF=R",
			operands = {"r64", "m32"},
			name = "cmovnle",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "4F", "/r"},
			metadata = "CMOV X64         ZF=R SF=R OF=R",
			operands = {"r64", "r64"},
			name = "cmovnle",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4F", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r16", "r16"},
			name = "cmovnle",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x4F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "4F", "/r"},
			metadata = "CMOV             ZF=R SF=R OF=R",
			operands = {"r16", "m16"},
			name = "cmovnle",
		},
	},
	['movd'] = {
		['xmm[3:0],r64[3:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "r64[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[3:0], R:r64[3:0]",
			opcode = {"66", "0F", "6E", "/r"},
			metadata = "SSE2 X64",
			operands = {"xmm[3:0]", "r64[3:0]"},
			name = "movd",
		},
		['r64[3:0],mm[3:0]'] = {
			func = function(op1, op2) return "\x0F\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[3:0]", "mm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64[3:0], R:mm[3:0]",
			opcode = {"0F", "7E", "/r"},
			metadata = "MMX X64",
			operands = {"r64[3:0]", "mm[3:0]"},
			name = "movd",
		},
		['m64,mm[3:0]'] = {
			func = function(op1, op2) return "\x0F\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64", "mm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, R:mm[3:0]",
			opcode = {"0F", "7E", "/r"},
			metadata = "MMX",
			operands = {"m64", "mm[3:0]"},
			name = "movd",
		},
		['mm[3:0],m64'] = {
			func = function(op1, op2) return "\x0F\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm[3:0], R:r32[3:0]/m32/m64",
			opcode = {"0F", "6E", "/r"},
			metadata = "MMX",
			operands = {"mm[3:0]", "m64"},
			name = "movd",
		},
		['m32,xmm[3:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x7E"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, xmm[3:0]",
			opcode = {"66", "0F", "7E", "/r"},
			metadata = "SSE2",
			operands = {"m32", "xmm[3:0]"},
			name = "movd",
		},
		['m32,mm[3:0]'] = {
			func = function(op1, op2) return "\x0F\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "mm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, R:mm[3:0]",
			opcode = {"0F", "7E", "/r"},
			metadata = "MMX",
			operands = {"m32", "mm[3:0]"},
			name = "movd",
		},
		['m64,xmm[3:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x7E"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, xmm[3:0]",
			opcode = {"66", "0F", "7E", "/r"},
			metadata = "SSE2",
			operands = {"m64", "xmm[3:0]"},
			name = "movd",
		},
		['mm[3:0],r32[3:0]'] = {
			func = function(op1, op2) return "\x0F\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm[3:0]", "r32[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm[3:0], R:r32[3:0]/m32/m64",
			opcode = {"0F", "6E", "/r"},
			metadata = "MMX",
			operands = {"mm[3:0]", "r32[3:0]"},
			name = "movd",
		},
		['r64[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[3:0]", "xmm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r64[3:0], xmm[3:0]",
			opcode = {"66", "0F", "7E", "/r"},
			metadata = "SSE2 X64",
			operands = {"r64[3:0]", "xmm[3:0]"},
			name = "movd",
		},
		['r32[3:0],mm[3:0]'] = {
			func = function(op1, op2) return "\x0F\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[3:0]", "mm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, R:mm[3:0]",
			opcode = {"0F", "7E", "/r"},
			metadata = "MMX",
			operands = {"r32[3:0]", "mm[3:0]"},
			name = "movd",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\x66\x0F\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[3:0], R:r32[3:0]/m32/m64",
			opcode = {"66", "0F", "6E", "/r"},
			metadata = "SSE2",
			operands = {"xmm[3:0]", "m32"},
			name = "movd",
		},
		['xmm[3:0],r32[3:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "r32[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[3:0], R:r32[3:0]/m32/m64",
			opcode = {"66", "0F", "6E", "/r"},
			metadata = "SSE2",
			operands = {"xmm[3:0]", "r32[3:0]"},
			name = "movd",
		},
		['r32[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x7E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[3:0]", "xmm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, xmm[3:0]",
			opcode = {"66", "0F", "7E", "/r"},
			metadata = "SSE2",
			operands = {"r32[3:0]", "xmm[3:0]"},
			name = "movd",
		},
		['mm[3:0],m32'] = {
			func = function(op1, op2) return "\x0F\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm[3:0], R:r32[3:0]/m32/m64",
			opcode = {"0F", "6E", "/r"},
			metadata = "MMX",
			operands = {"mm[3:0]", "m32"},
			name = "movd",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\x66\x0F\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[3:0], R:r32[3:0]/m32/m64",
			opcode = {"66", "0F", "6E", "/r"},
			metadata = "SSE2",
			operands = {"xmm[3:0]", "m64"},
			name = "movd",
		},
		['mm[3:0],r64[3:0]'] = {
			func = function(op1, op2) return "\x0F\x6E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm[3:0]", "r64[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm[3:0], R:r64[3:0]",
			opcode = {"0F", "6E", "/r"},
			metadata = "MMX X64",
			operands = {"mm[3:0]", "r64[3:0]"},
			name = "movd",
		},
	},
	['pmulhuw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xE4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "E4", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m32"},
			name = "pmulhuw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xE4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "E4", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m64"},
			name = "pmulhuw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xE4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "E4", "/r"},
			metadata = "MMX2",
			operands = {"mm", "mm"},
			name = "pmulhuw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xE4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "E4", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pmulhuw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xE4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "E4", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pmulhuw",
		},
	},
	['fldcw'] = {
		['m16'] = {
			func = function(op1) return "\xD9"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m16",
			opcode = {"D9", "/5"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {"m16"},
			name = "fldcw",
		},
	},
	['vpmovsxwd'] = {
		['zmm {kz},ymm'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "ymm"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256",
			opcode = {"EVEX.512.66.0F38.WIG", "23", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "ymm"},
			name = "vpmovsxwd",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "23", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[7:0]"},
			name = "vpmovsxwd",
		},
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256",
			opcode = {"EVEX.512.66.0F38.WIG", "23", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m256"},
			name = "vpmovsxwd",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "23", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m64"},
			name = "vpmovsxwd",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "23", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m32"},
			name = "vpmovsxwd",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128",
			opcode = {"EVEX.256.66.0F38.WIG", "23", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vpmovsxwd",
		},
		['ymm {kz},xmm'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128",
			opcode = {"EVEX.256.66.0F38.WIG", "23", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm"},
			name = "vpmovsxwd",
		},
		['ymm,m128'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.66.0F38.WIG", "23", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m128"},
			name = "vpmovsxwd",
		},
		['ymm,xmm'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.66.0F38.WIG", "23", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm"},
			name = "vpmovsxwd",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "23", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vpmovsxwd",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "23", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vpmovsxwd",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "23", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vpmovsxwd",
		},
	},
	['addps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"0F", "58", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "addps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"0F", "58", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "addps",
		},
	},
	['std'] = {
		[''] = {
			func = function(op1) return "\xFD" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"FD"},
			metadata = "ANY              DF=1",
			operands = {""},
			name = "std",
		},
	},
	['vgetexpps'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "42", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vgetexpps",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "42", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vgetexpps",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "42", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vgetexpps",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "42", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vgetexpps",
		},
		['zmm {kz},b32 {sae}'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {sae}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.66.0F38.W0", "42", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32 {sae}"},
			name = "vgetexpps",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32",
			opcode = {"EVEX.128.66.0F38.W0", "42", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vgetexpps",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.66.0F38.W0", "42", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vgetexpps",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32",
			opcode = {"EVEX.256.66.0F38.W0", "42", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vgetexpps",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32 {sae}",
			opcode = {"EVEX.512.66.0F38.W0", "42", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vgetexpps",
		},
	},
	['vhsubpd'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "7D", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vhsubpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "7D", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vhsubpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "7D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vhsubpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "7D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vhsubpd",
		},
	},
	['setc'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "92", "/r"},
			metadata = "ANY              CF=R",
			operands = {"m8"},
			name = "setc",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x92"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "92", "/r"},
			metadata = "ANY              CF=R",
			operands = {"r8"},
			name = "setc",
		},
	},
	['phsubw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x38\x05"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "05", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m32"},
			name = "phsubw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x38\x05"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "05", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m64"},
			name = "phsubw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x38\x05"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "05", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "mm"},
			name = "phsubw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x05"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "05", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "m128"},
			name = "phsubw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x05"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "05", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "xmm"},
			name = "phsubw",
		},
	},
	['vmovapd'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F.W1", "28", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vmovapd",
		},
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F.W1", "29", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vmovapd",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F.W1", "29", "/r"},
			metadata = "AVX512_F",
			operands = {"m512 {kz}", "zmm"},
			name = "vmovapd",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F.W1", "28", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vmovapd",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:ymm/m256, ymm",
			opcode = {"VEX.256.66.0F.WIG", "29", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vmovapd",
		},
		['m128,xmm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"VEX.128.66.0F.WIG", "29", "/r"},
			metadata = "AVX",
			operands = {"m128", "xmm"},
			name = "vmovapd",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.66.0F.WIG", "28", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vmovapd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F.W1", "28", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vmovapd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F.W1", "28", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vmovapd",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F.W1", "28", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vmovapd",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F.W1", "29", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm", "zmm"},
			name = "vmovapd",
		},
		['m256,ymm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256", "ymm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:ymm/m256, ymm",
			opcode = {"VEX.256.66.0F.WIG", "29", "/r"},
			metadata = "AVX",
			operands = {"m256", "ymm"},
			name = "vmovapd",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F.W1", "28", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vmovapd",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F.W1", "29", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vmovapd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.66.0F.WIG", "28", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vmovapd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"VEX.128.66.0F.WIG", "29", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vmovapd",
		},
	},
	['setz'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x94"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "94", "/r"},
			metadata = "ANY              ZF=R",
			operands = {"m8"},
			name = "setz",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x94"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "94", "/r"},
			metadata = "ANY              ZF=R",
			operands = {"r8"},
			name = "setz",
		},
	},
	['pmaxuw'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x3E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "3E", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "pmaxuw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x3E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "3E", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm"},
			name = "pmaxuw",
		},
	},
	['pmaxub'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "DE", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m32"},
			name = "pmaxub",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "DE", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m64"},
			name = "pmaxub",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "DE", "/r"},
			metadata = "MMX2",
			operands = {"mm", "mm"},
			name = "pmaxub",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "DE", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pmaxub",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "DE", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pmaxub",
		},
	},
	['fcompp'] = {
		[''] = {
			func = function(op1) return "\xDE\xD9" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"DE", "D9"},
			metadata = "FPU_POP=2        C0=W C1=W C2=W C3=W",
			operands = {""},
			name = "fcompp",
		},
	},
	['aesenc'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "DC", "/r"},
			metadata = "AESNI",
			operands = {"xmm", "m128"},
			name = "aesenc",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xDC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "DC", "/r"},
			metadata = "AESNI",
			operands = {"xmm", "xmm"},
			name = "aesenc",
		},
	},
	['vpackuswb'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "67", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpackuswb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "67", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpackuswb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "67", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpackuswb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "67", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpackuswb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "67", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpackuswb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "67", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpackuswb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "67", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpackuswb",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "67", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpackuswb",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "67", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpackuswb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x67"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "67", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpackuswb",
		},
	},
	['ptest'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x17"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "17", "/r"},
			metadata = "SSE4_1 OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "m128"},
			name = "ptest",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x17"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "17", "/r"},
			metadata = "SSE4_1 OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "xmm"},
			name = "ptest",
		},
	},
	['pslldq'] = {
		['xmm,i8'] = {
			func = function(op1, op2) return "\x66\x0F\x73"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "73", "/7", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "i8"},
			name = "pslldq",
		},
		['xmm,u8'] = {
			func = function(op1, op2) return "\x66\x0F\x73"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "73", "/7", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "u8"},
			name = "pslldq",
		},
	},
	['cvttpd2pi'] = {
		['mm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, xmm/m128",
			opcode = {"66", "0F", "2C", "/r"},
			metadata = "SSE2",
			operands = {"mm", "m128"},
			name = "cvttpd2pi",
		},
		['mm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, xmm/m128",
			opcode = {"66", "0F", "2C", "/r"},
			metadata = "SSE2",
			operands = {"mm", "xmm"},
			name = "cvttpd2pi",
		},
	},
	['vpcomd'] = {
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xCE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "CE", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vpcomd",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xCE"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "CE", "/r", "ib"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vpcomd",
		},
	},
	['invlpga'] = {
		[''] = {
			func = function() return "\x0F\x01\xDF" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:<rax>, R:<ecx>",
			opcode = {"0F", "01", "DF"},
			metadata = "SVM X64          PRIVILEGE=L0",
			operands = {},
			name = "invlpga",
		},
	},
	['ror'] = {
		['m16,u8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/1", "ib"},
			metadata = "ANY              CF=W OF=W",
			operands = {"m16", "u8"},
			name = "ror",
		},
		['m8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/1"},
			metadata = "ANY              CF=W OF=W",
			operands = {"m8", "1"},
			name = "ror",
		},
		['m32,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/1", "ib"},
			metadata = "X64              CF=W OF=W",
			operands = {"m32", "u8"},
			name = "ror",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/1", "ib"},
			metadata = "ANY              CF=W OF=W",
			operands = {"m8", "u8"},
			name = "ror",
		},
		['r8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/1"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r8", "cl"},
			name = "ror",
		},
		['r16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/1"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r16", "cl"},
			name = "ror",
		},
		['m16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/1"},
			metadata = "ANY              CF=W OF=W",
			operands = {"m16", "cl"},
			name = "ror",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\xC1"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib/ub",
			opcode = {"C1", "/1", "ib"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r32", "i8"},
			name = "ror",
		},
		['r32,cl'] = {
			func = function(op1, op2) return "\xD3"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, cl",
			opcode = {"D3", "/1"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r32", "cl"},
			name = "ror",
		},
		['r32,1'] = {
			func = function(op1, op2) return "\xD1"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, 1",
			opcode = {"D1", "/1"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r32", "1"},
			name = "ror",
		},
		['m64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/1"},
			metadata = "X64              CF=W OF=W",
			operands = {"m64", "cl"},
			name = "ror",
		},
		['m64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/1"},
			metadata = "X64              CF=W OF=W",
			operands = {"m64", "1"},
			name = "ror",
		},
		['r16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/1"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r16", "1"},
			name = "ror",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/1", "ib"},
			metadata = "X64              CF=W OF=W",
			operands = {"r64", "i8"},
			name = "ror",
		},
		['r64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/1"},
			metadata = "X64              CF=W OF=W",
			operands = {"r64", "cl"},
			name = "ror",
		},
		['r64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/1"},
			metadata = "X64              CF=W OF=W",
			operands = {"r64", "1"},
			name = "ror",
		},
		['m64,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/1", "ib"},
			metadata = "X64              CF=W OF=W",
			operands = {"m64", "u8"},
			name = "ror",
		},
		['m8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/1"},
			metadata = "ANY              CF=W OF=W",
			operands = {"m8", "cl"},
			name = "ror",
		},
		['m32,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/1"},
			metadata = "X64              CF=W OF=W",
			operands = {"m32", "1"},
			name = "ror",
		},
		['r8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/1"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r8", "1"},
			name = "ror",
		},
		['m32,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/1"},
			metadata = "X64              CF=W OF=W",
			operands = {"m32", "cl"},
			name = "ror",
		},
		['m16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/1"},
			metadata = "ANY              CF=W OF=W",
			operands = {"m16", "1"},
			name = "ror",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/1", "ib"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r16", "i8"},
			name = "ror",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/1", "ib"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r8", "i8"},
			name = "ror",
		},
	},
	['vmovdqu'] = {
		['ymm,m256'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.F3.0F.WIG", "6F", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vmovdqu",
		},
		['m256,ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256", "ymm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:ymm/m256, ymm",
			opcode = {"VEX.256.F3.0F.WIG", "7F", "/r"},
			metadata = "AVX",
			operands = {"m256", "ymm"},
			name = "vmovdqu",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:ymm/m256, ymm",
			opcode = {"VEX.256.F3.0F.WIG", "7F", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vmovdqu",
		},
		['m128,xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"VEX.128.F3.0F.WIG", "7F", "/r"},
			metadata = "AVX",
			operands = {"m128", "xmm"},
			name = "vmovdqu",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.F3.0F.WIG", "6F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vmovdqu",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"VEX.128.F3.0F.WIG", "7F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vmovdqu",
		},
	},
	['vprorvq'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "14", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vprorvq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vprorvq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vprorvq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vprorvq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vprorvq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "14", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vprorvq",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "14", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vprorvq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vprorvq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "14", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vprorvq",
		},
	},
	['sgdt'] = {
		['m32'] = {
			func = function(op1) return "\x0F\x01"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"0F", "01", "/0"},
			metadata = "Volatile",
			operands = {"m32"},
			name = "sgdt",
		},
		['m64'] = {
			func = function(op1) return "\x0F\x01"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64",
			opcode = {"0F", "01", "/0"},
			metadata = "Volatile",
			operands = {"m64"},
			name = "sgdt",
		},
	},
	['psllq'] = {
		['mm,u8'] = {
			func = function(op1, op2) return "\x0F\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "73", "/6", "ib"},
			metadata = "MMX",
			operands = {"mm", "u8"},
			name = "psllq",
		},
		['xmm,i8'] = {
			func = function(op1, op2) return "\x66\x0F\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "73", "/6", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "i8"},
			name = "psllq",
		},
		['mm,i8'] = {
			func = function(op1, op2) return "\x0F\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "73", "/6", "ib"},
			metadata = "MMX",
			operands = {"mm", "i8"},
			name = "psllq",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xF3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "F3", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psllq",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xF3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "F3", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "psllq",
		},
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xF3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "F3", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "psllq",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xF3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "F3", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "psllq",
		},
		['xmm,u8'] = {
			func = function(op1, op2) return "\x66\x0F\x73"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "73", "/6", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "u8"},
			name = "psllq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xF3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "F3", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psllq",
		},
	},
	['rsm'] = {
		[''] = {
			func = function(op1) return "\x0F\xAA" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "AA"},
			metadata = "X86              Volatile OF=U SF=U ZF=U AF=U PF=U CF=U",
			operands = {""},
			name = "rsm",
		},
	},
	['vfrczss'] = {
		['xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\x82"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"XOP.L0.P0.M09.W0", "82", "/r"},
			metadata = "XOP",
			operands = {"xmm[3:0]", "xmm[3:0]"},
			name = "vfrczss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\x82"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"XOP.L0.P0.M09.W0", "82", "/r"},
			metadata = "XOP",
			operands = {"xmm[3:0]", "m32"},
			name = "vfrczss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\x82"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"XOP.L0.P0.M09.W0", "82", "/r"},
			metadata = "XOP",
			operands = {"xmm[3:0]", "m64"},
			name = "vfrczss",
		},
	},
	['vpcmpgtb'] = {
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "64", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vpcmpgtb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "64", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpcmpgtb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "64", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpcmpgtb",
		},
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "64", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vpcmpgtb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "64", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpcmpgtb",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "64", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "m512"},
			name = "vpcmpgtb",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "64", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpcmpgtb",
		},
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "64", "/r"},
			metadata = "AVX512_BW",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vpcmpgtb",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "64", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vpcmpgtb",
		},
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "64", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vpcmpgtb",
		},
	},
	['pmovzxbd'] = {
		['xmm,m64'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"66", "0F", "38", "31", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m64"},
			name = "pmovzxbd",
		},
		['xmm,xmm[3:0]'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"66", "0F", "38", "31", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm[3:0]"},
			name = "pmovzxbd",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x31"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"66", "0F", "38", "31", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m32"},
			name = "pmovzxbd",
		},
	},
	['movsb'] = {
		[''] = {
			func = function() return "\xA4" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<es:zdi>, X:<ds:zsi>",
			opcode = {"A4"},
			metadata = "ANY _Rep         DF=R",
			operands = {},
			name = "movsb",
		},
	},
	['vpabsw'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x1D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38", "1D", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vpabsw",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x1D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F38", "1D", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vpabsw",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x1D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.66.0F38.WIG", "1D", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m256"},
			name = "vpabsw",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x1D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38", "1D", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vpabsw",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x1D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38", "1D", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "m512"},
			name = "vpabsw",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x1D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F38", "1D", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm"},
			name = "vpabsw",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x1D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F38", "1D", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vpabsw",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x1D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.66.0F38.WIG", "1D", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm"},
			name = "vpabsw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x1D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.66.0F38.WIG", "1D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m128"},
			name = "vpabsw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x1D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.66.0F38.WIG", "1D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vpabsw",
		},
	},
	['imul'] = {
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:<rdx>, X:<rax>, r64/m32/m64",
			opcode = {"REX.W", "F7", "/5"},
			metadata = "X64              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"m64"},
			name = "imul",
		},
		['r64,m64,i32'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x69"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r64", "m64", "id"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, id",
			opcode = {"REX.W", "69", "/r", "id"},
			metadata = "X64              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r64", "m64", "i32"},
			name = "imul",
		},
		['r32,r32,i32'] = {
			func = function(op1, op2, op3) return "\x69"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r32", "r32", "id"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, id/ud",
			opcode = {"69", "/r", "id"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r32", "r32", "i32"},
			name = "imul",
		},
		['r16'] = {
			func = function(op1) return "\x66\xF7"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:<dx>, x:<ax>, r16/m16",
			opcode = {"66", "F7", "/5"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r16"},
			name = "imul",
		},
		['r32,m32,i8'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32", "m32", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, ib",
			opcode = {"6B", "/r", "ib"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r32", "m32", "i8"},
			name = "imul",
		},
		['r64,r64,i32'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x69"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r64", "r64", "id"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, id",
			opcode = {"REX.W", "69", "/r", "id"},
			metadata = "X64              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r64", "r64", "i32"},
			name = "imul",
		},
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:<rdx>, X:<rax>, r64/m32/m64",
			opcode = {"REX.W", "F7", "/5"},
			metadata = "X64              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r64"},
			name = "imul",
		},
		['r32,m32,u32'] = {
			func = function(op1, op2, op3) return "\x69"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r32", "m32", "ud"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, id/ud",
			opcode = {"69", "/r", "id"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r32", "m32", "u32"},
			name = "imul",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32,~r32/m32/m64",
			opcode = {"0F", "AF", "/r"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r32", "m32"},
			name = "imul",
		},
		['r8'] = {
			func = function(op1) return "\xF6"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:<ax>, r8/m8",
			opcode = {"F6", "/5"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r8"},
			name = "imul",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32,~r32/m32/m64",
			opcode = {"0F", "AF", "/r"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r32", "m64"},
			name = "imul",
		},
		['r64,m32,i32'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x69"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r64", "m32", "id"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, id",
			opcode = {"REX.W", "69", "/r", "id"},
			metadata = "X64              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r64", "m32", "i32"},
			name = "imul",
		},
		['r32,m64,i8'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32", "m64", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, ib",
			opcode = {"6B", "/r", "ib"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r32", "m64", "i8"},
			name = "imul",
		},
		['m8'] = {
			func = function(op1) return "\xF6"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:<ax>, r8/m8",
			opcode = {"F6", "/5"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"m8"},
			name = "imul",
		},
		['r16,r16,i16'] = {
			func = function(op1, op2, op3) return "\x66\x69"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int16_t", op3) end,
			real_operands = {"r16", "r16", "iw"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "w:r16, r16/m16, iw/uw",
			opcode = {"66", "69", "/r", "iw"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r16", "r16", "i16"},
			name = "imul",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:~r16,~r16/m16",
			opcode = {"66", "0F", "AF", "/r"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r16", "m16"},
			name = "imul",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64,~r64/m32/m64",
			opcode = {"REX.W", "0F", "AF", "/r"},
			metadata = "X64              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r64", "m64"},
			name = "imul",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32,~r32/m32/m64",
			opcode = {"0F", "AF", "/r"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r32", "r32"},
			name = "imul",
		},
		['r64,m64,i8'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x6B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64", "m64", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, ib",
			opcode = {"REX.W", "6B", "/r", "ib"},
			metadata = "X64              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r64", "m64", "i8"},
			name = "imul",
		},
		['r16,m16,u16'] = {
			func = function(op1, op2, op3) return "\x66\x69"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int16_t", op3) end,
			real_operands = {"r16", "m16", "uw"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "w:r16, r16/m16, iw/uw",
			opcode = {"66", "69", "/r", "iw"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r16", "m16", "u16"},
			name = "imul",
		},
		['r64,r64,i8'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x6B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64", "r64", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, ib",
			opcode = {"REX.W", "6B", "/r", "ib"},
			metadata = "X64              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r64", "r64", "i8"},
			name = "imul",
		},
		['r16,m16,i8'] = {
			func = function(op1, op2, op3) return "\x66\x6B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r16", "m16", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "w:r16, r16/m16, ib",
			opcode = {"66", "6B", "/r", "ib"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r16", "m16", "i8"},
			name = "imul",
		},
		['r16,r16,i8'] = {
			func = function(op1, op2, op3) return "\x66\x6B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r16", "r16", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "w:r16, r16/m16, ib",
			opcode = {"66", "6B", "/r", "ib"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r16", "r16", "i8"},
			name = "imul",
		},
		['m16'] = {
			func = function(op1) return "\x66\xF7"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:<dx>, x:<ax>, r16/m16",
			opcode = {"66", "F7", "/5"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"m16"},
			name = "imul",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:~r16,~r16/m16",
			opcode = {"66", "0F", "AF", "/r"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r16", "r16"},
			name = "imul",
		},
		['r32,r32,i8'] = {
			func = function(op1, op2, op3) return "\x6B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32", "r32", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, ib",
			opcode = {"6B", "/r", "ib"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r32", "r32", "i8"},
			name = "imul",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64,~r64/m32/m64",
			opcode = {"REX.W", "0F", "AF", "/r"},
			metadata = "X64              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r64", "r64"},
			name = "imul",
		},
		['r32'] = {
			func = function(op1) return "\xF7"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:<edx>, X:<eax>, r32/m32/m64",
			opcode = {"F7", "/5"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r32"},
			name = "imul",
		},
		['r32,m64,u32'] = {
			func = function(op1, op2, op3) return "\x69"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r32", "m64", "ud"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, id/ud",
			opcode = {"69", "/r", "id"},
			metadata = "ANY              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r32", "m64", "u32"},
			name = "imul",
		},
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xF7"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:<rdx>, X:<rax>, r64/m32/m64",
			opcode = {"REX.W", "F7", "/5"},
			metadata = "X64              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"m32"},
			name = "imul",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xAF"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64,~r64/m32/m64",
			opcode = {"REX.W", "0F", "AF", "/r"},
			metadata = "X64              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r64", "m32"},
			name = "imul",
		},
		['r64,m32,i8'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x6B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64", "m32", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, ib",
			opcode = {"REX.W", "6B", "/r", "ib"},
			metadata = "X64              OF=W SF=W ZF=U AF=U PF=U CF=W",
			operands = {"r64", "m32", "i8"},
			name = "imul",
		},
	},
	['jnge'] = {
		['string'] = {
			func = function(op1) return "\x0F\x8C"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"string"},
			encoding = "D",
			has_relative = false,
			operands2 = "rel32",
			opcode = {"0F", "8C", "cd"},
			metadata = "ANY              Control=Branch SF=R OF=R",
			operands = {"string"},
			name = "jnge",
		},
	},
	['popa'] = {
		[''] = {
			func = function(op1) return "\x66\x61" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"66", "61"},
			metadata = "X86 Deprecated",
			operands = {""},
			name = "popa",
		},
	},
	['jc'] = {
		['string'] = {
			func = function(op1) return "\x0F\x82"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"string"},
			encoding = "D",
			has_relative = false,
			operands2 = "rel32",
			opcode = {"0F", "82", "cd"},
			metadata = "ANY              Control=Branch CF=R",
			operands = {"string"},
			name = "jc",
		},
	},
	['bndstx'] = {
		['mib,bnd'] = {
			func = function(op1, op2) return "\x0F\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mib", "bnd"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:mib, bnd",
			opcode = {"0F", "1B", "/r"},
			metadata = "MPX",
			operands = {"mib", "bnd"},
			name = "bndstx",
		},
	},
	['vaesdec'] = {
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "DE", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"ymm", "ymm", "m256"},
			name = "vaesdec",
		},
		['zmm,zmm,m512'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "DE", "/r"},
			metadata = "AVX512_F    VAES",
			operands = {"zmm", "zmm", "m512"},
			name = "vaesdec",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "DE", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"ymm", "ymm", "ymm"},
			name = "vaesdec",
		},
		['zmm,zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "DE", "/r"},
			metadata = "AVX512_F    VAES",
			operands = {"zmm", "zmm", "zmm"},
			name = "vaesdec",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "DE", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"xmm", "xmm", "m128"},
			name = "vaesdec",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDE"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "DE", "/r"},
			metadata = "AVX512_F-VL VAES",
			operands = {"xmm", "xmm", "xmm"},
			name = "vaesdec",
		},
	},
	['vfmaddsub231ps'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "B6", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vfmaddsub231ps",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "B6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vfmaddsub231ps",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "B6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vfmaddsub231ps",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "B6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vfmaddsub231ps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "B6", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "m128"},
			name = "vfmaddsub231ps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:xmm, xmm, xmm/m128",
			opcode = {"VEX.DDS.128.66.0F38.W0", "B6", "/r"},
			metadata = "FMA",
			operands = {"xmm", "xmm", "xmm"},
			name = "vfmaddsub231ps",
		},
		['zmm {kz},zmm,b32 {er}'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "B6", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32 {er}"},
			name = "vfmaddsub231ps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "B6", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "m256"},
			name = "vfmaddsub231ps",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "B6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vfmaddsub231ps",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "X:ymm, ymm, ymm/m256",
			opcode = {"VEX.DDS.256.66.0F38.W0", "B6", "/r"},
			metadata = "FMA",
			operands = {"ymm", "ymm", "ymm"},
			name = "vfmaddsub231ps",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:zmm {kz}, zmm, zmm/m512/b32 {er}",
			opcode = {"EVEX.DDS.512.66.0F38.W0", "B6", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vfmaddsub231ps",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.DDS.256.66.0F38.W0", "B6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vfmaddsub231ps",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "X:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.DDS.128.66.0F38.W0", "B6", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vfmaddsub231ps",
		},
	},
	['movmskpd'] = {
		['r64[0],xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64[0], xmm",
			opcode = {"66", "0F", "50", "/r"},
			metadata = "SSE2 X64",
			operands = {"r64[0]", "xmm"},
			name = "movmskpd",
		},
		['r32[0],xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x50"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32[0], xmm",
			opcode = {"66", "0F", "50", "/r"},
			metadata = "SSE2",
			operands = {"r32[0]", "xmm"},
			name = "movmskpd",
		},
	},
	['vphaddbd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xC2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "C2", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vphaddbd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xC2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "C2", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vphaddbd",
		},
	},
	['vextracti128'] = {
		['xmm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "ymm", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:xmm/m128, ymm, ib/ub",
			opcode = {"VEX.256.66.0F3A.W0", "39", "/r", "ib"},
			metadata = "AVX2",
			operands = {"xmm", "ymm", "i8"},
			name = "vextracti128",
		},
		['m128,ymm,u8'] = {
			func = function(op1, op2, op3) return "\x39"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m128", "ymm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:xmm/m128, ymm, ib/ub",
			opcode = {"VEX.256.66.0F3A.W0", "39", "/r", "ib"},
			metadata = "AVX2",
			operands = {"m128", "ymm", "u8"},
			name = "vextracti128",
		},
	},
	['fld1'] = {
		[''] = {
			func = function(op1) return "\xD9\xE8" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "E8"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fld1",
		},
	},
	['cmpps'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x0F\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"0F", "C2", "/r", "ib"},
			metadata = "SSE",
			operands = {"xmm", "xmm", "i8"},
			name = "cmpps",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x0F\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"0F", "C2", "/r", "ib"},
			metadata = "SSE",
			operands = {"xmm", "m128", "u8"},
			name = "cmpps",
		},
	},
	['mulps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"0F", "59", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "mulps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"0F", "59", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "mulps",
		},
	},
	['pshufd'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "70", "/r", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "xmm", "i8"},
			name = "pshufd",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "70", "/r", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "m128", "u8"},
			name = "pshufd",
		},
	},
	['orpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "56", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "orpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x56"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "56", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "orpd",
		},
	},
	['pabsw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x38\x1D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "38", "1D", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m32"},
			name = "pabsw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x38\x1D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "38", "1D", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m64"},
			name = "pabsw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x38\x1D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "38", "1D", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "mm"},
			name = "pabsw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x1D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "1D", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "m128"},
			name = "pabsw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x1D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "1D", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "xmm"},
			name = "pabsw",
		},
	},
	['jge'] = {
		['i8'] = {
			func = function(op1) return "\x7D"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"7D", "cb"},
			metadata = "ANY              Control=Branch SF=R OF=R",
			operands = {"string"},
			name = "jge",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x8D"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "8D", "cw"},
			metadata = "X86              Control=Branch SF=R OF=R",
			operands = {"string"},
			name = "jge",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x8D"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "8D", "cd"},
			metadata = "ANY              Control=Branch SF=R OF=R",
			operands = {"string"},
			name = "jge",
		},
		['string'] = {
			func = function(op1) return "\x0F\x8D"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "8D", "cd"},
			metadata = "ANY              Control=Branch SF=R OF=R",
			operands = {"string"},
			name = "jge",
		},
	},
	['vpmacsdd'] = {
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "9E", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vpmacsdd",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x9E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "9E", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vpmacsdd",
		},
	},
	['vhaddps'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.F2.0F.WIG", "7C", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vhaddps",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.F2.0F.WIG", "7C", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vhaddps",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.F2.0F.WIG", "7C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vhaddps",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.F2.0F.WIG", "7C", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vhaddps",
		},
	},
	['shrx'] = {
		['r64,m64,r64'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64", "r64"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, r64",
			opcode = {"VEX.NDS.LZ.F2.0F38.W1", "F7", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "m64", "r64"},
			name = "shrx",
		},
		['r32,r32,r32'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "r32"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, r32",
			opcode = {"VEX.NDS.LZ.F2.0F38.W0", "F7", "/r"},
			metadata = "BMI2",
			operands = {"r32", "r32", "r32"},
			name = "shrx",
		},
		['r32,m32,r32'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32", "r32"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, r32",
			opcode = {"VEX.NDS.LZ.F2.0F38.W0", "F7", "/r"},
			metadata = "BMI2",
			operands = {"r32", "m32", "r32"},
			name = "shrx",
		},
		['r64,r64,r64'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "r64"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, r64",
			opcode = {"VEX.NDS.LZ.F2.0F38.W1", "F7", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "r64", "r64"},
			name = "shrx",
		},
		['r32,m64,r32'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64", "r32"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, r32",
			opcode = {"VEX.NDS.LZ.F2.0F38.W0", "F7", "/r"},
			metadata = "BMI2",
			operands = {"r32", "m64", "r32"},
			name = "shrx",
		},
		['r64,m32,r64'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32", "r64"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, r64",
			opcode = {"VEX.NDS.LZ.F2.0F38.W1", "F7", "/r"},
			metadata = "BMI2 X64",
			operands = {"r64", "m32", "r64"},
			name = "shrx",
		},
	},
	['vcvtpd2ps'] = {
		['xmm,ymm'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, ymm/m256",
			opcode = {"VEX.256.66.0F.WIG", "5A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "ymm"},
			name = "vcvtpd2ps",
		},
		['xmm[7:0],xmm'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm/m128",
			opcode = {"VEX.128.66.0F.WIG", "5A", "/r"},
			metadata = "AVX",
			operands = {"xmm[7:0]", "xmm"},
			name = "vcvtpd2ps",
		},
		['xmm[7:0] {kz},b64'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "5A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0] {kz}", "b64"},
			name = "vcvtpd2ps",
		},
		['xmm[7:0],m128'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[7:0], xmm/m128",
			opcode = {"VEX.128.66.0F.WIG", "5A", "/r"},
			metadata = "AVX",
			operands = {"xmm[7:0]", "m128"},
			name = "vcvtpd2ps",
		},
		['xmm[7:0] {kz},xmm'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "5A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0] {kz}", "xmm"},
			name = "vcvtpd2ps",
		},
		['ymm {kz},zmm'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.66.0F.W1", "5A", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "zmm"},
			name = "vcvtpd2ps",
		},
		['xmm,m256'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, ymm/m256",
			opcode = {"VEX.256.66.0F.WIG", "5A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m256"},
			name = "vcvtpd2ps",
		},
		['ymm {kz},m512'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.66.0F.W1", "5A", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "m512"},
			name = "vcvtpd2ps",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "5A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vcvtpd2ps",
		},
		['xmm {kz},m256'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "5A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m256"},
			name = "vcvtpd2ps",
		},
		['ymm {kz},b64 {er}'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64 {er}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, zmm/m512/b64 {er}",
			opcode = {"EVEX.512.66.0F.W1", "5A", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm {kz}", "b64 {er}"},
			name = "vcvtpd2ps",
		},
		['xmm[7:0] {kz},m128'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm[7:0] {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F.W1", "5A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0] {kz}", "m128"},
			name = "vcvtpd2ps",
		},
		['xmm {kz},ymm'] = {
			func = function(op1, op2) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F.W1", "5A", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "ymm"},
			name = "vcvtpd2ps",
		},
	},
	['bndcl'] = {
		['bnd,r32'] = {
			func = function(op1, op2) return "\xF3\x0F\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:bnd, r32/m32/m64",
			opcode = {"F3", "0F", "1A", "/r"},
			metadata = "MPX X86",
			operands = {"bnd", "r32"},
			name = "bndcl",
		},
		['bnd,r64'] = {
			func = function(op1, op2) return "\xF3\x0F\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:bnd, r64/m32/m64",
			opcode = {"F3", "0F", "1A", "/r"},
			metadata = "MPX X64",
			operands = {"bnd", "r64"},
			name = "bndcl",
		},
		['bnd,m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:bnd, r64/m32/m64",
			opcode = {"F3", "0F", "1A", "/r"},
			metadata = "MPX X64",
			operands = {"bnd", "m64"},
			name = "bndcl",
		},
		['bnd,m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x1A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"bnd", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:bnd, r64/m32/m64",
			opcode = {"F3", "0F", "1A", "/r"},
			metadata = "MPX X64",
			operands = {"bnd", "m32"},
			name = "bndcl",
		},
	},
	['btc'] = {
		['m16,u8'] = {
			func = function(op1, op2) return "\x66\x0F\xBA"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "0F", "BA", "/7", "ib"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m16", "u8"},
			name = "btc",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\xBB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32",
			opcode = {"0F", "BB", "/r"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r32", "r32"},
			name = "btc",
		},
		['m32,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xBA"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "0F", "BA", "/7", "ib"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m32", "u8"},
			name = "btc",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xBB"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64",
			opcode = {"REX.W", "0F", "BB", "/r"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m32", "r64"},
			name = "btc",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x0F\xBB"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32",
			opcode = {"0F", "BB", "/r"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m64", "r32"},
			name = "btc",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x0F\xBB"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32",
			opcode = {"0F", "BB", "/r"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m32", "r32"},
			name = "btc",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\xBB"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16",
			opcode = {"66", "0F", "BB", "/r"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m16", "r16"},
			name = "btc",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xBA"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "0F", "BA", "/7", "ib"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r64", "i8"},
			name = "btc",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xBB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64",
			opcode = {"REX.W", "0F", "BB", "/r"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r64", "r64"},
			name = "btc",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xBB"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64",
			opcode = {"REX.W", "0F", "BB", "/r"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m64", "r64"},
			name = "btc",
		},
		['m64,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xBA"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "0F", "BA", "/7", "ib"},
			metadata = "X64 _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"m64", "u8"},
			name = "btc",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\x0F\xBA"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib/ub",
			opcode = {"0F", "BA", "/7", "ib"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r32", "i8"},
			name = "btc",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\xBB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16",
			opcode = {"66", "0F", "BB", "/r"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r16", "r16"},
			name = "btc",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\x0F\xBA"..x86_64.encode_modrm_sib(op1, 7)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "0F", "BA", "/7", "ib"},
			metadata = "ANY _XLock       OF=U SF=U AF=U PF=U CF=W",
			operands = {"r16", "i8"},
			name = "btc",
		},
	},
	['fldln2'] = {
		[''] = {
			func = function(op1) return "\xD9\xED" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "ED"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fldln2",
		},
	},
	['vmovlps'] = {
		['xmm,xmm[15:8],m64'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m64"},
			encoding = "RVM-T2",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], m32/m64",
			opcode = {"EVEX.NDS.128.0F.W0", "12", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm[15:8]", "m64"},
			name = "vmovlps",
		},
		['m64,xmm[7:0]'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[7:0]",
			opcode = {"VEX.128.0F.WIG", "13", "/r"},
			metadata = "AVX",
			operands = {"m64", "xmm[7:0]"},
			name = "vmovlps",
		},
		['xmm,xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m32"},
			encoding = "RVM-T2",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], m32/m64",
			opcode = {"EVEX.NDS.128.0F.W0", "12", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm[15:8]", "m32"},
			name = "vmovlps",
		},
		['m32,xmm[7:0]'] = {
			func = function(op1, op2) return "\x13"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[7:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[7:0]",
			opcode = {"VEX.128.0F.WIG", "13", "/r"},
			metadata = "AVX",
			operands = {"m32", "xmm[7:0]"},
			name = "vmovlps",
		},
	},
	['vpextrq'] = {
		['m32,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m32", "xmm", "ub"},
			encoding = "MRI-T1S",
			has_relative = false,
			operands2 = "W:r64/m32/m64, xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "16", "/r", "ib"},
			metadata = "AVX512_DQ X64",
			operands = {"m32", "xmm", "u8"},
			name = "vpextrq",
		},
		['m64,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m64", "xmm", "ub"},
			encoding = "MRI-T1S",
			has_relative = false,
			operands2 = "W:r64/m32/m64, xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "16", "/r", "ib"},
			metadata = "AVX512_DQ X64",
			operands = {"m64", "xmm", "u8"},
			name = "vpextrq",
		},
		['r64,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64", "xmm", "ib"},
			encoding = "MRI-T1S",
			has_relative = false,
			operands2 = "W:r64/m32/m64, xmm, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "16", "/r", "ib"},
			metadata = "AVX512_DQ X64",
			operands = {"r64", "xmm", "i8"},
			name = "vpextrq",
		},
	},
	['vdpps'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x40"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.WIG", "40", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vdpps",
		},
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x40"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.WIG", "40", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vdpps",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x40"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.WIG", "40", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vdpps",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x40"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.WIG", "40", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vdpps",
		},
	},
	['pcmpeqq'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "29", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "pcmpeqq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "29", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm"},
			name = "pcmpeqq",
		},
	},
	['fxrstor'] = {
		['m32'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m32"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "AE", "/1"},
			metadata = "FXSR             Volatile C0=W C1=W C2=W C3=W",
			operands = {"m32"},
			name = "fxrstor",
		},
		['m64'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"m64"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "AE", "/1"},
			metadata = "FXSR             Volatile C0=W C1=W C2=W C3=W",
			operands = {"m64"},
			name = "fxrstor",
		},
	},
	['pcmpeqw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "75", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "pcmpeqw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "75", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "pcmpeqw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "75", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "pcmpeqw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "75", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pcmpeqw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x75"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "75", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pcmpeqw",
		},
	},
	['fdecstp'] = {
		[''] = {
			func = function(op1) return "\xD9\xF6" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "F6"},
			metadata = "FPU_TOP=-1       C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fdecstp",
		},
	},
	['sets'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "98", "/r"},
			metadata = "ANY              SF=R",
			operands = {"m8"},
			name = "sets",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x98"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "98", "/r"},
			metadata = "ANY              SF=R",
			operands = {"r8"},
			name = "sets",
		},
	},
	['monitor'] = {
		[''] = {
			func = function() return "\x0F\x01\xC8" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:<ds:zax>, R:<ecx>, R:<edx>",
			opcode = {"0F", "01", "C8"},
			metadata = "MONITOR          Volatile PRIVILEGE=L0",
			operands = {},
			name = "monitor",
		},
	},
	['pextrw'] = {
		['r64[1:0],mm,u8'] = {
			func = function(op1, op2, op3) return "\x0F\xC5"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[1:0]", "mm", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r64[1:0], mm, ib/ub",
			opcode = {"0F", "C5", "/r", "ib"},
			metadata = "MMX2 X64",
			operands = {"r64[1:0]", "mm", "u8"},
			name = "pextrw",
		},
		['r32[1:0],xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x15"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32[1:0]", "xmm", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r32[1:0]/m16, xmm, ib/ub",
			opcode = {"66", "0F", "3A", "15", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"r32[1:0]", "xmm", "i8"},
			name = "pextrw",
		},
		['r32[1:0],mm,u8'] = {
			func = function(op1, op2, op3) return "\x0F\xC5"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32[1:0]", "mm", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r32[1:0], mm, ib/ub",
			opcode = {"0F", "C5", "/r", "ib"},
			metadata = "MMX2",
			operands = {"r32[1:0]", "mm", "u8"},
			name = "pextrw",
		},
		['r32[1:0],xmm,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xC5"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32[1:0]", "xmm", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r32[1:0], xmm, ib/ub",
			opcode = {"66", "0F", "C5", "/r", "ib"},
			metadata = "SSE2",
			operands = {"r32[1:0]", "xmm", "u8"},
			name = "pextrw",
		},
		['r32[1:0],mm,i8'] = {
			func = function(op1, op2, op3) return "\x0F\xC5"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32[1:0]", "mm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r32[1:0], mm, ib/ub",
			opcode = {"0F", "C5", "/r", "ib"},
			metadata = "MMX2",
			operands = {"r32[1:0]", "mm", "i8"},
			name = "pextrw",
		},
		['m16,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x15"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m16", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r32[1:0]/m16, xmm, ib/ub",
			opcode = {"66", "0F", "3A", "15", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"m16", "xmm", "u8"},
			name = "pextrw",
		},
		['r64[1:0],mm,i8'] = {
			func = function(op1, op2, op3) return "\x0F\xC5"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[1:0]", "mm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:r64[1:0], mm, ib/ub",
			opcode = {"0F", "C5", "/r", "ib"},
			metadata = "MMX2 X64",
			operands = {"r64[1:0]", "mm", "i8"},
			name = "pextrw",
		},
		['r64[1:0],xmm,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x15"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[1:0]", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64[1:0], xmm, ib/ub",
			opcode = {"66", "0F", "3A", "15", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"r64[1:0]", "xmm", "u8"},
			name = "pextrw",
		},
		['r64[1:0],xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x15"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[1:0]", "xmm", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64[1:0], xmm, ib/ub",
			opcode = {"66", "0F", "3A", "15", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"r64[1:0]", "xmm", "i8"},
			name = "pextrw",
		},
	},
	['phaddsw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x38\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "38", "03", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m32"},
			name = "phaddsw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x38\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "38", "03", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m64"},
			name = "phaddsw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x38\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "38", "03", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "mm"},
			name = "phaddsw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "03", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "m128"},
			name = "phaddsw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x03"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "03", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "xmm"},
			name = "phaddsw",
		},
	},
	['vpinsrb'] = {
		['xmm {kz},xmm,r64[0],u8'] = {
			func = function(op1, op2, op3, op4) return "\x20"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "r64[0]", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r64[0], ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.WIG", "20", "/r", "ib"},
			metadata = "AVX512_BW X64",
			operands = {"xmm {kz}", "xmm", "r64[0]", "u8"},
			name = "vpinsrb",
		},
		['xmm {kz},xmm,r64[0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x20"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "r64[0]", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r64[0], ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.WIG", "20", "/r", "ib"},
			metadata = "AVX512_BW X64",
			operands = {"xmm {kz}", "xmm", "r64[0]", "i8"},
			name = "vpinsrb",
		},
		['xmm,xmm,r64[0],u8'] = {
			func = function(op1, op2, op3, op4) return "\x20"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "r64[0]", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r64[0], ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "20", "/r", "ib"},
			metadata = "AVX X64",
			operands = {"xmm", "xmm", "r64[0]", "u8"},
			name = "vpinsrb",
		},
		['xmm,xmm,r32[0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x20"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "r32[0]", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r32[0]/m8, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "20", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "r32[0]", "i8"},
			name = "vpinsrb",
		},
		['xmm {kz},xmm,m8,u8'] = {
			func = function(op1, op2, op3, op4) return "\x20"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m8", "ub"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r32[0]/m8, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.WIG", "20", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"xmm {kz}", "xmm", "m8", "u8"},
			name = "vpinsrb",
		},
		['xmm,xmm,m8,u8'] = {
			func = function(op1, op2, op3, op4) return "\x20"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m8", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r32[0]/m8, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "20", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m8", "u8"},
			name = "vpinsrb",
		},
		['xmm,xmm,r64[0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x20"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "r64[0]", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, r64[0], ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "20", "/r", "ib"},
			metadata = "AVX X64",
			operands = {"xmm", "xmm", "r64[0]", "i8"},
			name = "vpinsrb",
		},
		['xmm {kz},xmm,r32[0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x20"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "r32[0]", "ib"},
			encoding = "RVMI-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, r32[0]/m8, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.WIG", "20", "/r", "ib"},
			metadata = "AVX512_BW",
			operands = {"xmm {kz}", "xmm", "r32[0]", "i8"},
			name = "vpinsrb",
		},
	},
	['ktestd'] = {
		['k[3:0],k[3:0]'] = {
			func = function(op1, op2) return "\x99"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[3:0]", "k[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:~k[3:0], ~k[3:0]",
			opcode = {"VEX.L0.66.0F.W1", "99", "/r"},
			metadata = "AVX512_BW OF=0 SF=0 ZF=W AF=0 PF=0 CF=W",
			operands = {"k[3:0]", "k[3:0]"},
			name = "ktestd",
		},
	},
	['movsw'] = {
		[''] = {
			func = function() return "\x66\xA5" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<es:zdi>, X:<ds:zsi>",
			opcode = {"66", "A5"},
			metadata = "ANY _Rep         DF=R",
			operands = {},
			name = "movsw",
		},
	},
	['vmaxsd'] = {
		['xmm,xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "5F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			name = "vmaxsd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			name = "vmaxsd",
		},
		['xmm {kz},xmm[15:8],m64 {sae}'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64 {sae}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[15:8]", "m64 {sae}"},
			name = "vmaxsd",
		},
		['xmm,xmm[15:8],m64'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "5F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m64"},
			name = "vmaxsd",
		},
		['xmm,xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "5F", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m32"},
			name = "vmaxsd",
		},
		['xmm {kz},xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "5F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			name = "vmaxsd",
		},
	},
	['rdrand'] = {
		['r32'] = {
			func = function(op1) return "\x0F\xC7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r32",
			opcode = {"0F", "C7", "/6"},
			metadata = "RDRAND           Volatile OF=0 SF=0 ZF=0 AF=0 PF=0 CF=W",
			operands = {"r32"},
			name = "rdrand",
		},
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xC7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r64",
			opcode = {"REX.W", "0F", "C7", "/6"},
			metadata = "RDRAND X64       Volatile OF=0 SF=0 ZF=0 AF=0 PF=0 CF=W",
			operands = {"r64"},
			name = "rdrand",
		},
		['r16'] = {
			func = function(op1) return "\x66\x0F\xC7"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r16",
			opcode = {"66", "0F", "C7", "/6"},
			metadata = "RDRAND           Volatile OF=0 SF=0 ZF=0 AF=0 PF=0 CF=W",
			operands = {"r16"},
			name = "rdrand",
		},
	},
	['vpbroadcastd'] = {
		['xmm {kz},r64[3:0]'] = {
			func = function(op1, op2) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "r64[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, r64[3:0]",
			opcode = {"EVEX.128.66.0F38.W0", "7C", "/r"},
			metadata = "AVX512_F-VL X64",
			operands = {"xmm {kz}", "r64[3:0]"},
			name = "vpbroadcastd",
		},
		['ymm,m32'] = {
			func = function(op1, op2) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[3:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.W0", "58", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m32"},
			name = "vpbroadcastd",
		},
		['zmm {kz},r32[3:0]'] = {
			func = function(op1, op2) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "r32[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, r32[3:0]",
			opcode = {"EVEX.512.66.0F38.W0", "7C", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "r32[3:0]"},
			name = "vpbroadcastd",
		},
		['ymm {kz},xmm[3:0]'] = {
			func = function(op1, op2) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W0", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm[3:0]"},
			name = "vpbroadcastd",
		},
		['zmm {kz},m64'] = {
			func = function(op1, op2) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m64"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W0", "58", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m64"},
			name = "vpbroadcastd",
		},
		['ymm {kz},m64'] = {
			func = function(op1, op2) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m64"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W0", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m64"},
			name = "vpbroadcastd",
		},
		['ymm,xmm[3:0]'] = {
			func = function(op1, op2) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[3:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.W0", "58", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm[3:0]"},
			name = "vpbroadcastd",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vpbroadcastd",
		},
		['xmm,xmm[3:0]'] = {
			func = function(op1, op2) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.W0", "58", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm[3:0]"},
			name = "vpbroadcastd",
		},
		['zmm {kz},m32'] = {
			func = function(op1, op2) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W0", "58", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m32"},
			name = "vpbroadcastd",
		},
		['zmm {kz},xmm[3:0]'] = {
			func = function(op1, op2) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "xmm[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W0", "58", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "xmm[3:0]"},
			name = "vpbroadcastd",
		},
		['zmm {kz},r64[3:0]'] = {
			func = function(op1, op2) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "r64[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, r64[3:0]",
			opcode = {"EVEX.512.66.0F38.W0", "7C", "/r"},
			metadata = "AVX512_F X64",
			operands = {"zmm {kz}", "r64[3:0]"},
			name = "vpbroadcastd",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.W0", "58", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m64"},
			name = "vpbroadcastd",
		},
		['xmm {kz},r32[3:0]'] = {
			func = function(op1, op2) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "r32[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, r32[3:0]",
			opcode = {"EVEX.128.66.0F38.W0", "7C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "r32[3:0]"},
			name = "vpbroadcastd",
		},
		['ymm,m64'] = {
			func = function(op1, op2) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[3:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.W0", "58", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m64"},
			name = "vpbroadcastd",
		},
		['ymm {kz},r64[3:0]'] = {
			func = function(op1, op2) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "r64[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, r64[3:0]",
			opcode = {"EVEX.256.66.0F38.W0", "7C", "/r"},
			metadata = "AVX512_F-VL X64",
			operands = {"ymm {kz}", "r64[3:0]"},
			name = "vpbroadcastd",
		},
		['xmm {kz},xmm[3:0]'] = {
			func = function(op1, op2) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[3:0]"},
			name = "vpbroadcastd",
		},
		['ymm {kz},r32[3:0]'] = {
			func = function(op1, op2) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "r32[3:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, r32[3:0]",
			opcode = {"EVEX.256.66.0F38.W0", "7C", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "r32[3:0]"},
			name = "vpbroadcastd",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W0", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vpbroadcastd",
		},
		['ymm {kz},m32'] = {
			func = function(op1, op2) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W0", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m32"},
			name = "vpbroadcastd",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.W0", "58", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m32"},
			name = "vpbroadcastd",
		},
	},
	['vpaddb'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\xFC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "FC", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpaddb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xFC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "FC", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpaddb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xFC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "FC", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpaddb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xFC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "FC", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpaddb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xFC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "FC", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpaddb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xFC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "FC", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpaddb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\xFC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "FC", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpaddb",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xFC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "FC", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpaddb",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\xFC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "FC", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpaddb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xFC"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "FC", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpaddb",
		},
	},
	['pmovmskb'] = {
		['r32[0],mm'] = {
			func = function(op1, op2) return "\x0F\xD7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[0]", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32[0], mm",
			opcode = {"0F", "D7", "/r"},
			metadata = "MMX2",
			operands = {"r32[0]", "mm"},
			name = "pmovmskb",
		},
		['r64[0],mm'] = {
			func = function(op1, op2) return "\x0F\xD7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[0]", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64[0], mm",
			opcode = {"0F", "D7", "/r"},
			metadata = "MMX2 X64",
			operands = {"r64[0]", "mm"},
			name = "pmovmskb",
		},
		['r32[1:0],xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xD7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32[1:0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32[1:0], xmm",
			opcode = {"66", "0F", "D7", "/r"},
			metadata = "SSE2",
			operands = {"r32[1:0]", "xmm"},
			name = "pmovmskb",
		},
		['r64[1:0],xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xD7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64[1:0]", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64[1:0], xmm",
			opcode = {"66", "0F", "D7", "/r"},
			metadata = "SSE2 X64",
			operands = {"r64[1:0]", "xmm"},
			name = "pmovmskb",
		},
	},
	['pminuw'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "3A", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "pminuw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x3A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "38", "3A", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm"},
			name = "pminuw",
		},
	},
	['mpsadbw'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x42"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "42", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm", "i8"},
			name = "mpsadbw",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x42"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "3A", "42", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128", "u8"},
			name = "mpsadbw",
		},
	},
	['blsr'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r32", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W0", "F3", "/1"},
			metadata = "BMI              OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r32", "m32"},
			name = "blsr",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r32", "r32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W0", "F3", "/1"},
			metadata = "BMI              OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r32", "r32"},
			name = "blsr",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r32", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W0", "F3", "/1"},
			metadata = "BMI              OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r32", "m64"},
			name = "blsr",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r64", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W1", "F3", "/1"},
			metadata = "BMI X64          OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r64", "m64"},
			name = "blsr",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r64", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W1", "F3", "/1"},
			metadata = "BMI X64          OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r64", "m32"},
			name = "blsr",
		},
		['r64,r64'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 1) end,
			real_operands = {"r64", "r64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W1", "F3", "/1"},
			metadata = "BMI X64          OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r64", "r64"},
			name = "blsr",
		},
	},
	['fcmovne'] = {
		['st(i)'] = {
			func = function(op1) return "\xDB" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"DB", "C8+i"},
			metadata = "FPU CMOV         C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fcmovne",
		},
	},
	['pmullw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xD5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "D5", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "pmullw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xD5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "D5", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "pmullw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xD5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "D5", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "pmullw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xD5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "D5", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pmullw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xD5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "D5", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pmullw",
		},
	},
	['prefetch'] = {
		['m32'] = {
			func = function(op1) return "\x0F\x0D"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "0D", "/0"},
			metadata = "3DNOW",
			operands = {"m32"},
			name = "prefetch",
		},
		['m64'] = {
			func = function(op1) return "\x0F\x0D"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64",
			opcode = {"0F", "0D", "/0"},
			metadata = "3DNOW",
			operands = {"m64"},
			name = "prefetch",
		},
	},
	['vpmovuswb'] = {
		['xmm,ymm'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "10", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm", "ymm"},
			name = "vpmovuswb",
		},
		['xmm[7:0],xmm'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "10", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm[7:0]", "xmm"},
			name = "vpmovuswb",
		},
		['m256 {kz},zmm'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "10", "/r"},
			metadata = "AVX512_BW",
			operands = {"m256 {kz}", "zmm"},
			name = "vpmovuswb",
		},
		['ymm,zmm'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "10", "/r"},
			metadata = "AVX512_BW",
			operands = {"ymm", "zmm"},
			name = "vpmovuswb",
		},
		['m128 {kz},ymm'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "10", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"m128 {kz}", "ymm"},
			name = "vpmovuswb",
		},
		['m64 {kz},xmm'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "10", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"m64 {kz}", "xmm"},
			name = "vpmovuswb",
		},
		['m32,xmm'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "10", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"m32", "xmm"},
			name = "vpmovuswb",
		},
	},
	['and'] = {
		['r64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/4", "id"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "i32"},
			name = "and",
		},
		['m64,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/4", "id"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "u32"},
			name = "and",
		},
		['m32,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x21"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64,~r64",
			opcode = {"REX.W", "21", "/r"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "r64"},
			name = "and",
		},
		['m16,u16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"m16", "uw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, iw/uw",
			opcode = {"66", "81", "/4", "iw"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m16", "u16"},
			name = "and",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32,~r32/m32/m64",
			opcode = {"23", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "m32"},
			name = "and",
		},
		['r64,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r64", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64, ud",
			opcode = {"81", "/4", "id"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "u32"},
			name = "and",
		},
		['m32,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/4", "id"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "i32"},
			name = "and",
		},
		['ax,u16'] = {
			func = function(op1, op2) return "\x66\x25"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "uw"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:ax, iw/uw",
			opcode = {"66", "25", "iw"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"ax", "u16"},
			name = "and",
		},
		['r8,m8'] = {
			func = function(op1, op2) return "\x22"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "m8"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:~r8,~r8/m8",
			opcode = {"22", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r8", "m8"},
			name = "and",
		},
		['m32,r32'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64,~r32",
			opcode = {"21", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "r32"},
			name = "and",
		},
		['m16,r16'] = {
			func = function(op1, op2) return "\x66\x21"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r16/m16,~r16",
			opcode = {"66", "21", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m16", "r16"},
			name = "and",
		},
		['rax,u32'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"rax", "ud"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:rax, ud",
			opcode = {"25", "id"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"rax", "u32"},
			name = "and",
		},
		['rax,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x25"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"rax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:rax, id",
			opcode = {"REX.W", "25", "id"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"rax", "i32"},
			name = "and",
		},
		['eax,u32'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "ud"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:eax, id/ud",
			opcode = {"25", "id"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"eax", "u32"},
			name = "and",
		},
		['eax,i32'] = {
			func = function(op1, op2) return "\x25"..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"eax", "id"},
			encoding = "I",
			has_relative = false,
			operands2 = "X:eax, id/ud",
			opcode = {"25", "id"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"eax", "i32"},
			name = "and",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"80", "/4", "ib"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r8", "i8"},
			name = "and",
		},
		['r8,r8'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r8/m8,~r8",
			opcode = {"20", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r8", "r8"},
			name = "and",
		},
		['m32,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "83", "/4", "ib"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "u8"},
			name = "and",
		},
		['m64,r32'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64,~r32",
			opcode = {"21", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "r32"},
			name = "and",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\x80"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"80", "/4", "ib"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m8", "u8"},
			name = "and",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "83", "/4", "ib"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "i8"},
			name = "and",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r32,~r32/m32/m64",
			opcode = {"23", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "m64"},
			name = "and",
		},
		['r32,i32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"r32", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/4", "id"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "i32"},
			name = "and",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\x83"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib/ub",
			opcode = {"83", "/4", "ib"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "i8"},
			name = "and",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:~r16,~r16/m16",
			opcode = {"66", "23", "/r"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r16", "m16"},
			name = "and",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64,~r64/m32/m64",
			opcode = {"REX.W", "23", "/r"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "m64"},
			name = "and",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r32/m32/m64,~r32",
			opcode = {"21", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r32", "r32"},
			name = "and",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x23"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~r64,~r64/m32/m64",
			opcode = {"REX.W", "23", "/r"},
			metadata = "X64              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "m32"},
			name = "and",
		},
		['m64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x21"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64,~r64",
			opcode = {"REX.W", "21", "/r"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "r64"},
			name = "and",
		},
		['m64,i32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x81"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m64", "id"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, id",
			opcode = {"REX.W", "81", "/4", "id"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "i32"},
			name = "and",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:~r64/m32/m64,~r64",
			opcode = {"REX.W", "21", "/r"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r64", "r64"},
			name = "and",
		},
		['al,u8'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ub"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:al, ib/ub",
			opcode = {"24", "ib"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"al", "u8"},
			name = "and",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r16/m16,~r16",
			opcode = {"66", "21", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r16", "r16"},
			name = "and",
		},
		['m8,r8'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m8", "r8"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:~r8/m8,~r8",
			opcode = {"20", "/r"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m8", "r8"},
			name = "and",
		},
		['r16,i16'] = {
			func = function(op1, op2) return "\x66\x81"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"r16", "iw"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, iw/uw",
			opcode = {"66", "81", "/4", "iw"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r16", "i16"},
			name = "and",
		},
		['al,i8'] = {
			func = function(op1, op2) return "\x24"..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"al", "ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:al, ib/ub",
			opcode = {"24", "ib"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"al", "i8"},
			name = "and",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "83", "/4", "ib"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"r16", "i8"},
			name = "and",
		},
		['m16,u8'] = {
			func = function(op1, op2) return "\x66\x83"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "83", "/4", "ib"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m16", "u8"},
			name = "and",
		},
		['m64,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x83"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "83", "/4", "ib"},
			metadata = "X64 _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m64", "u8"},
			name = "and",
		},
		['m32,u32'] = {
			func = function(op1, op2) return "\x81"..x86_64.encode_modrm_sib(op1, 4)..x86_64.encode_int("int32_t", op2) end,
			real_operands = {"m32", "ud"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, id/ud",
			opcode = {"81", "/4", "id"},
			metadata = "ANY _XLock       OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"m32", "u32"},
			name = "and",
		},
		['ax,i16'] = {
			func = function(op1, op2) return "\x66\x25"..x86_64.encode_int("int16_t", op2) end,
			real_operands = {"ax", "iw"},
			encoding = "I",
			has_relative = false,
			operands2 = "x:ax, iw/uw",
			opcode = {"66", "25", "iw"},
			metadata = "ANY              OF=0 SF=W ZF=W AF=U PF=W CF=0",
			operands = {"ax", "i16"},
			name = "and",
		},
	},
	['pshufhw'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\xF3\x0F\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"F3", "0F", "70", "/r", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "xmm", "i8"},
			name = "pshufhw",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\xF3\x0F\x70"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, ib/ub",
			opcode = {"F3", "0F", "70", "/r", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "m128", "u8"},
			name = "pshufhw",
		},
	},
	['lwpins'] = {
		['r64,r32,i32'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r64", "r32", "id"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "R:r64, R:r32/m32/m64, id/ud",
			opcode = {"XOP.L0.P0.M0A.W1", "12", "/0", "id"},
			metadata = "LWP X64",
			operands = {"r64", "r32", "i32"},
			name = "lwpins",
		},
		['r32,m32,u32'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r32", "m32", "ud"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "R:r32, R:r32/m32/m64, id/ud",
			opcode = {"XOP.L0.P0.M0A.W0", "12", "/0", "id"},
			metadata = "LWP",
			operands = {"r32", "m32", "u32"},
			name = "lwpins",
		},
		['r32,r32,i32'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r32", "r32", "id"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "R:r32, R:r32/m32/m64, id/ud",
			opcode = {"XOP.L0.P0.M0A.W0", "12", "/0", "id"},
			metadata = "LWP",
			operands = {"r32", "r32", "i32"},
			name = "lwpins",
		},
		['r32,m64,u32'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r32", "m64", "ud"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "R:r32, R:r32/m32/m64, id/ud",
			opcode = {"XOP.L0.P0.M0A.W0", "12", "/0", "id"},
			metadata = "LWP",
			operands = {"r32", "m64", "u32"},
			name = "lwpins",
		},
		['r64,m64,u32'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r64", "m64", "ud"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "R:r64, R:r32/m32/m64, id/ud",
			opcode = {"XOP.L0.P0.M0A.W1", "12", "/0", "id"},
			metadata = "LWP X64",
			operands = {"r64", "m64", "u32"},
			name = "lwpins",
		},
		['r64,m32,u32'] = {
			func = function(op1, op2, op3) return "\x12"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int32_t", op3) end,
			real_operands = {"r64", "m32", "ud"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "R:r64, R:r32/m32/m64, id/ud",
			opcode = {"XOP.L0.P0.M0A.W1", "12", "/0", "id"},
			metadata = "LWP X64",
			operands = {"r64", "m32", "u32"},
			name = "lwpins",
		},
	},
	['vpmadcswd'] = {
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "B6", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vpmadcswd",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\xB6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M08.W0", "B6", "/r", "/is4"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vpmadcswd",
		},
	},
	['psignw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x38\x09"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "09", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m32"},
			name = "psignw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x38\x09"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "09", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "m64"},
			name = "psignw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x38\x09"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "38", "09", "/r"},
			metadata = "SSSE3",
			operands = {"mm", "mm"},
			name = "psignw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x09"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "09", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "m128"},
			name = "psignw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x09"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "09", "/r"},
			metadata = "SSSE3",
			operands = {"xmm", "xmm"},
			name = "psignw",
		},
	},
	['vcvttps2uqq'] = {
		['zmm {kz},ymm'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "ymm"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32 {sae}",
			opcode = {"EVEX.512.66.0F.W0", "78", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "ymm"},
			name = "vcvttps2uqq",
		},
		['xmm {kz},b32'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "78", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "b32"},
			name = "vcvttps2uqq",
		},
		['ymm {kz},b32'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.66.0F.W0", "78", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "b32"},
			name = "vcvttps2uqq",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.66.0F.W0", "78", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vcvttps2uqq",
		},
		['ymm {kz},xmm'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128/b32",
			opcode = {"EVEX.256.66.0F.W0", "78", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"ymm {kz}", "xmm"},
			name = "vcvttps2uqq",
		},
		['zmm {kz},b32 {sae}'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b32 {sae}"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32 {sae}",
			opcode = {"EVEX.512.66.0F.W0", "78", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "b32 {sae}"},
			name = "vcvttps2uqq",
		},
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256/b32 {sae}",
			opcode = {"EVEX.512.66.0F.W0", "78", "/r"},
			metadata = "AVX512_DQ",
			operands = {"zmm {kz}", "m256"},
			name = "vcvttps2uqq",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "78", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vcvttps2uqq",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "78", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vcvttps2uqq",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x78"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-HV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64/b32",
			opcode = {"EVEX.128.66.0F.W0", "78", "/r"},
			metadata = "AVX512_DQ-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vcvttps2uqq",
		},
	},
	['paddq'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "D4", "/r"},
			metadata = "SSE2",
			operands = {"mm", "m32"},
			name = "paddq",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "D4", "/r"},
			metadata = "SSE2",
			operands = {"mm", "m64"},
			name = "paddq",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "D4", "/r"},
			metadata = "SSE2",
			operands = {"mm", "mm"},
			name = "paddq",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "D4", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "paddq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xD4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "D4", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "paddq",
		},
	},
	['vmovss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "10", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			name = "vmovss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[3:0], m32/m64",
			opcode = {"VEX.LIG.F3.0F.WIG", "10", "/r"},
			metadata = "AVX",
			operands = {"xmm[3:0]", "m32"},
			name = "vmovss",
		},
		['xmm[3:0] {kz},m64'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "m64"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:xmm[3:0] {kz}, m32/m64",
			opcode = {"EVEX.LIG.F3.0F.W0", "10", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "m64"},
			name = "vmovss",
		},
		['xmm[3:0] {kz},m32'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0] {kz}", "m32"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:xmm[3:0] {kz}, m32/m64",
			opcode = {"EVEX.LIG.F3.0F.W0", "10", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[3:0] {kz}", "m32"},
			name = "vmovss",
		},
		['m32,xmm[3:0]'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "xmm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[3:0]",
			opcode = {"VEX.LIG.F3.0F.WIG", "11", "/r"},
			metadata = "AVX",
			operands = {"m32", "xmm[3:0]"},
			name = "vmovss",
		},
		['xmm,xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "10", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			name = "vmovss",
		},
		['m64,xmm[3:0]'] = {
			func = function(op1, op2) return "\x11"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "xmm[3:0]"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m32/m64, xmm[3:0]",
			opcode = {"VEX.LIG.F3.0F.WIG", "11", "/r"},
			metadata = "AVX",
			operands = {"m64", "xmm[3:0]"},
			name = "vmovss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\x10"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm[3:0], m32/m64",
			opcode = {"VEX.LIG.F3.0F.WIG", "10", "/r"},
			metadata = "AVX",
			operands = {"xmm[3:0]", "m64"},
			name = "vmovss",
		},
	},
	['addsd'] = {
		['xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "58", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "xmm[7:0]"},
			name = "addsd",
		},
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\xF2\x0F\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "58", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m64"},
			name = "addsd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\xF2\x0F\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "58", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m32"},
			name = "addsd",
		},
	},
	['psrlq'] = {
		['mm,u8'] = {
			func = function(op1, op2) return "\x0F\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "73", "/2", "ib"},
			metadata = "MMX",
			operands = {"mm", "u8"},
			name = "psrlq",
		},
		['xmm,i8'] = {
			func = function(op1, op2) return "\x66\x0F\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "73", "/2", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "i8"},
			name = "psrlq",
		},
		['mm,i8'] = {
			func = function(op1, op2) return "\x0F\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "73", "/2", "ib"},
			metadata = "MMX",
			operands = {"mm", "i8"},
			name = "psrlq",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "D3", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psrlq",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "D3", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "psrlq",
		},
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "D3", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "psrlq",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "D3", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "psrlq",
		},
		['xmm,u8'] = {
			func = function(op1, op2) return "\x66\x0F\x73"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "73", "/2", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "u8"},
			name = "psrlq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xD3"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "D3", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psrlq",
		},
	},
	['psrlw'] = {
		['mm,u8'] = {
			func = function(op1, op2) return "\x0F\x71"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "71", "/2", "ib"},
			metadata = "MMX",
			operands = {"mm", "u8"},
			name = "psrlw",
		},
		['xmm,i8'] = {
			func = function(op1, op2) return "\x66\x0F\x71"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "71", "/2", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "i8"},
			name = "psrlw",
		},
		['mm,i8'] = {
			func = function(op1, op2) return "\x0F\x71"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"mm", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:mm, ib/ub",
			opcode = {"0F", "71", "/2", "ib"},
			metadata = "MMX",
			operands = {"mm", "i8"},
			name = "psrlw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "D1", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "psrlw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "D1", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "psrlw",
		},
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "D1", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "psrlw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "D1", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "psrlw",
		},
		['xmm,u8'] = {
			func = function(op1, op2) return "\x66\x0F\x71"..x86_64.encode_modrm_sib(op1, 2)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"xmm", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:xmm, ib/ub",
			opcode = {"66", "0F", "71", "/2", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "u8"},
			name = "psrlw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xD1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "D1", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "psrlw",
		},
	},
	['xrstor64'] = {
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xAE"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64, <edx>, <eax>",
			opcode = {"REX.W", "0F", "AE", "/5"},
			metadata = "XSAVE X64        Volatile XCR=R",
			operands = {"m32"},
			name = "xrstor64",
		},
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xAE"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64, <edx>, <eax>",
			opcode = {"REX.W", "0F", "AE", "/5"},
			metadata = "XSAVE X64        Volatile XCR=R",
			operands = {"m64"},
			name = "xrstor64",
		},
	},
	['vgetexppd'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F38.W1", "42", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vgetexppd",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F38.W1", "42", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vgetexppd",
		},
		['xmm {kz},b64'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F38.W1", "42", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64"},
			name = "vgetexppd",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F38.W1", "42", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vgetexppd",
		},
		['ymm {kz},b64'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "b64"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64",
			opcode = {"EVEX.256.66.0F38.W1", "42", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b64"},
			name = "vgetexppd",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64",
			opcode = {"EVEX.128.66.0F38.W1", "42", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vgetexppd",
		},
		['zmm {kz},b64 {sae}'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "b64 {sae}"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F38.W1", "42", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b64 {sae}"},
			name = "vgetexppd",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F38.W1", "42", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vgetexppd",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x42"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64 {sae}",
			opcode = {"EVEX.512.66.0F38.W1", "42", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vgetexppd",
		},
	},
	['vfmsubaddps'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "5E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vfmsubaddps",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "5E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vfmsubaddps",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "5E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vfmsubaddps",
		},
		['ymm,ymm,ymm,m256'] = {
			func = function(op1, op2, op3, op4) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "m256"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "5E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "m256"},
			name = "vfmsubaddps",
		},
		['xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "5E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "m128"},
			name = "vfmsubaddps",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x5E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "5E", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vfmsubaddps",
		},
	},
	['xsaves64'] = {
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xC7"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"REX.W", "0F", "C7", "/5"},
			metadata = "XSAVES X64       Volatile XCR=R",
			operands = {"m32"},
			name = "xsaves64",
		},
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xC7"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"REX.W", "0F", "C7", "/5"},
			metadata = "XSAVES X64       Volatile XCR=R",
			operands = {"m64"},
			name = "xsaves64",
		},
	},
	['fldl2t'] = {
		[''] = {
			func = function(op1) return "\xD9\xE9" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "E9"},
			metadata = "FPU_PUSH         C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fldl2t",
		},
	},
	['addss'] = {
		['xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "58", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "xmm[3:0]"},
			name = "addss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "58", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m32"},
			name = "addss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "58", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m64"},
			name = "addss",
		},
	},
	['subss'] = {
		['xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "5C", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "xmm[3:0]"},
			name = "subss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "5C", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m32"},
			name = "subss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "5C", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m64"},
			name = "subss",
		},
	},
	['movntpd'] = {
		['m128,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x2B"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m128, xmm",
			opcode = {"66", "0F", "2B", "/r"},
			metadata = "SSE2",
			operands = {"m128", "xmm"},
			name = "movntpd",
		},
	},
	['xorpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "57", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "xorpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x57"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "57", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "xorpd",
		},
	},
	['pavgusb'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xBF" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "BF"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pavgusb",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xBF" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "BF"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pavgusb",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xBF" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "BF"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pavgusb",
		},
	},
	['vpgatherdd'] = {
		['ymm {k},m64y'] = {
			func = function(op1, op2) return "\x90" end,
			real_operands = {"ymm {k}", "m64y"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W0", "90"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "m64y"},
			name = "vpgatherdd",
		},
		['xmm,m64x,xmm'] = {
			func = function(op1, op2, op3) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64x", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64x, X:xmm",
			opcode = {"VEX.DDS.128.66.0F38.W0", "90", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m64x", "xmm"},
			name = "vpgatherdd",
		},
		['ymm,m64y,ymm'] = {
			func = function(op1, op2, op3) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64y", "ymm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:ymm, vm32/m64y, X:ymm",
			opcode = {"VEX.DDS.256.66.0F38.W0", "90", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m64y", "ymm"},
			name = "vpgatherdd",
		},
		['xmm {k},m64x'] = {
			func = function(op1, op2) return "\x90" end,
			real_operands = {"xmm {k}", "m64x"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W0", "90"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "m64x"},
			name = "vpgatherdd",
		},
		['ymm {k},vm32'] = {
			func = function(op1, op2) return "\x90" end,
			real_operands = {"ymm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:ymm {k}, vm32/m64y",
			opcode = {"EVEX.256.66.0F38.W0", "90"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {k}", "vm32"},
			name = "vpgatherdd",
		},
		['zmm {k},m64z'] = {
			func = function(op1, op2) return "\x90" end,
			real_operands = {"zmm {k}", "m64z"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W0", "90"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "m64z"},
			name = "vpgatherdd",
		},
		['ymm,vm32,ymm'] = {
			func = function(op1, op2, op3) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "vm32", "ymm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:ymm, vm32/m64y, X:ymm",
			opcode = {"VEX.DDS.256.66.0F38.W0", "90", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "vm32", "ymm"},
			name = "vpgatherdd",
		},
		['zmm {k},vm32'] = {
			func = function(op1, op2) return "\x90" end,
			real_operands = {"zmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:zmm {k}, vm32/m64z",
			opcode = {"EVEX.512.66.0F38.W0", "90"},
			metadata = "AVX512_F",
			operands = {"zmm {k}", "vm32"},
			name = "vpgatherdd",
		},
		['xmm {k},vm32'] = {
			func = function(op1, op2) return "\x90" end,
			real_operands = {"xmm {k}", "vm32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "X:xmm {k}, vm32/m64x",
			opcode = {"EVEX.128.66.0F38.W0", "90"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {k}", "vm32"},
			name = "vpgatherdd",
		},
		['xmm,vm32,xmm'] = {
			func = function(op1, op2, op3) return "\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "vm32", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "X:xmm, vm32/m64x, X:xmm",
			opcode = {"VEX.DDS.128.66.0F38.W0", "90", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "vm32", "xmm"},
			name = "vpgatherdd",
		},
	},
	['les'] = {
		['r32,m16_32'] = {
			func = function(op1, op2) return "\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m16_32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, m16_32",
			opcode = {"C4", "/r"},
			metadata = "X86              Volatile",
			operands = {"r32", "m16_32"},
			name = "les",
		},
		['r16,m16_16'] = {
			func = function(op1, op2) return "\x66\xC4"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16_16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, m16_16",
			opcode = {"66", "C4", "/r"},
			metadata = "X86              Volatile",
			operands = {"r16", "m16_16"},
			name = "les",
		},
	},
	['pfcmpeq'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xB0" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "B0"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pfcmpeq",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xB0" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "B0"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pfcmpeq",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xB0" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "B0"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pfcmpeq",
		},
	},
	['packsswb'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "63", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "packsswb",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "63", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "packsswb",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "63", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "packsswb",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "63", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "packsswb",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "63", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "packsswb",
		},
	},
	['vmovdqa64'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F.W1", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vmovdqa64",
		},
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F.W1", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vmovdqa64",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F.W1", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm", "ymm"},
			name = "vmovdqa64",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F.W1", "7F", "/r"},
			metadata = "AVX512_F",
			operands = {"m512 {kz}", "zmm"},
			name = "vmovdqa64",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F.W1", "6F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vmovdqa64",
		},
		['xmm {kz},xmm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F.W1", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm"},
			name = "vmovdqa64",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F.W1", "7F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm", "zmm"},
			name = "vmovdqa64",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.66.0F.W1", "6F", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vmovdqa64",
		},
		['xmm {kz},m128'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m128"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128",
			opcode = {"EVEX.128.66.0F.W1", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128"},
			name = "vmovdqa64",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F.W1", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vmovdqa64",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x6F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.66.0F.W1", "6F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vmovdqa64",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x7F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F.W1", "7F", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "xmm"},
			name = "vmovdqa64",
		},
	},
	['extrq'] = {
		['xmm,i8,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x78"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "ib", "ib"},
			encoding = "RII",
			has_relative = false,
			operands2 = "X:xmm, ib/ub, ib/ub",
			opcode = {"66", "0F", "78", "/0", "ib", "ib"},
			metadata = "SSE4A",
			operands = {"xmm", "i8", "i8"},
			name = "extrq",
		},
		['xmm,u8,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x78"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op3)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "ub", "ub"},
			encoding = "RII",
			has_relative = false,
			operands2 = "X:xmm, ib/ub, ib/ub",
			opcode = {"66", "0F", "78", "/0", "ib", "ib"},
			metadata = "SSE4A",
			operands = {"xmm", "u8", "u8"},
			name = "extrq",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm",
			opcode = {"66", "0F", "79", "/r"},
			metadata = "SSE4A",
			operands = {"xmm", "xmm"},
			name = "extrq",
		},
	},
	['xrstors64'] = {
		['m32'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xC7"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64, <edx>, <eax>",
			opcode = {"REX.W", "0F", "C7", "/3"},
			metadata = "XSAVES X64       Volatile XCR=R",
			operands = {"m32"},
			name = "xrstors64",
		},
		['m64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xC7"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64, <edx>, <eax>",
			opcode = {"REX.W", "0F", "C7", "/3"},
			metadata = "XSAVES X64       Volatile XCR=R",
			operands = {"m64"},
			name = "xrstors64",
		},
	},
	['vpmovusqd'] = {
		['xmm,ymm'] = {
			func = function(op1, op2) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm", "ymm"},
			name = "vpmovusqd",
		},
		['xmm[7:0],xmm'] = {
			func = function(op1, op2) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm[7:0]", "xmm"},
			name = "vpmovusqd",
		},
		['m256 {kz},zmm'] = {
			func = function(op1, op2) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "15", "/r"},
			metadata = "AVX512_F",
			operands = {"m256 {kz}", "zmm"},
			name = "vpmovusqd",
		},
		['ymm,zmm'] = {
			func = function(op1, op2) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "zmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, zmm",
			opcode = {"EVEX.512.F3.0F38.W0", "15", "/r"},
			metadata = "AVX512_F",
			operands = {"ymm", "zmm"},
			name = "vpmovusqd",
		},
		['m128 {kz},ymm'] = {
			func = function(op1, op2) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "ymm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, ymm",
			opcode = {"EVEX.256.F3.0F38.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m128 {kz}", "ymm"},
			name = "vpmovusqd",
		},
		['m64 {kz},xmm'] = {
			func = function(op1, op2) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64 {kz}", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64 {kz}", "xmm"},
			name = "vpmovusqd",
		},
		['m32,xmm'] = {
			func = function(op1, op2) return "\x15"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m32", "xmm"},
			encoding = "MR-HVM",
			has_relative = false,
			operands2 = "W:xmm[7:0]/m32/m64 {kz}, xmm",
			opcode = {"EVEX.128.F3.0F38.W0", "15", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m32", "xmm"},
			name = "vpmovusqd",
		},
	},
	['scasd'] = {
		[''] = {
			func = function() return "\xAF" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:<eax>, X:<es:zdi>",
			opcode = {"AF"},
			metadata = "ANY _Rep         OF=W SF=W ZF=W AF=W PF=W CF=W DF=R",
			operands = {},
			name = "scasd",
		},
	},
	['cdqe'] = {
		[''] = {
			func = function() return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x98" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<rax>",
			opcode = {"REX.W", "98"},
			metadata = "X64",
			operands = {},
			name = "cdqe",
		},
	},
	['vpshld'] = {
		['xmm,m128,xmm'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "96", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128", "xmm"},
			name = "vpshld",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"XOP.NDS.L0.P0.M09.W1", "96", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "m128"},
			name = "vpshld",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x96"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128, xmm",
			opcode = {"XOP.NDS.L0.P0.M09.W0", "96", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpshld",
		},
	},
	['haddpd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "7C", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "m128"},
			name = "haddpd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "7C", "/r"},
			metadata = "SSE3",
			operands = {"xmm", "xmm"},
			name = "haddpd",
		},
	},
	['vblendmd'] = {
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "64", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vblendmd",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "64", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vblendmd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "64", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vblendmd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "64", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vblendmd",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "64", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vblendmd",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "64", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vblendmd",
		},
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "64", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vblendmd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "64", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vblendmd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x64"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "64", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vblendmd",
		},
	},
	['pfrcpit1'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xA6" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "A6"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pfrcpit1",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xA6" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "A6"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pfrcpit1",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\xA6" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "A6"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pfrcpit1",
		},
	},
	['aesenclast'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "DD", "/r"},
			metadata = "AESNI",
			operands = {"xmm", "m128"},
			name = "aesenclast",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\xDD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "38", "DD", "/r"},
			metadata = "AESNI",
			operands = {"xmm", "xmm"},
			name = "aesenclast",
		},
	},
	['vpcompressw'] = {
		['m256 {kz},ymm'] = {
			func = function(op1, op2) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256 {kz}", "ymm"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F38.W1", "63", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"m256 {kz}", "ymm"},
			name = "vpcompressw",
		},
		['zmm,zmm'] = {
			func = function(op1, op2) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm", "zmm"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F38.W1", "63", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"zmm", "zmm"},
			name = "vpcompressw",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:ymm/m256 {kz}, ymm",
			opcode = {"EVEX.256.66.0F38.W1", "63", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"ymm", "ymm"},
			name = "vpcompressw",
		},
		['m128 {kz},xmm'] = {
			func = function(op1, op2) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128 {kz}", "xmm"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F38.W1", "63", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"m128 {kz}", "xmm"},
			name = "vpcompressw",
		},
		['m512 {kz},zmm'] = {
			func = function(op1, op2) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512 {kz}", "zmm"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:zmm/m512 {kz}, zmm",
			opcode = {"EVEX.512.66.0F38.W1", "63", "/r"},
			metadata = "AVX512_VBMI2",
			operands = {"m512 {kz}", "zmm"},
			name = "vpcompressw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x63"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm/m128 {kz}, xmm",
			opcode = {"EVEX.128.66.0F38.W1", "63", "/r"},
			metadata = "AVX512_VBMI2-VL",
			operands = {"xmm", "xmm"},
			name = "vpcompressw",
		},
	},
	['sha1rnds4'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x0F\x3A\xCC"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "xmm, xmm/m128, ib/ub",
			opcode = {"0F", "3A", "CC", "/r", "ib"},
			metadata = "SHA",
			operands = {"xmm", "xmm", "i8"},
			name = "sha1rnds4",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x0F\x3A\xCC"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "xmm, xmm/m128, ib/ub",
			opcode = {"0F", "3A", "CC", "/r", "ib"},
			metadata = "SHA",
			operands = {"xmm", "m128", "u8"},
			name = "sha1rnds4",
		},
	},
	['shld'] = {
		['m64,r64,u8'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xA4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m64", "r64", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64, ib/ub",
			opcode = {"REX.W", "0F", "A4", "/r", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m64", "r64", "u8"},
			name = "shld",
		},
		['r32,r32,cl'] = {
			func = function(op1, op2, op3) return "\x0F\xA5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32, cl",
			opcode = {"0F", "A5", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"r32", "r32", "cl"},
			name = "shld",
		},
		['m32,r64,cl'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xA5"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r64", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64, cl",
			opcode = {"REX.W", "0F", "A5", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m32", "r64", "cl"},
			name = "shld",
		},
		['m64,r32,cl'] = {
			func = function(op1, op2, op3) return "\x0F\xA5"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r32", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32, cl",
			opcode = {"0F", "A5", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m64", "r32", "cl"},
			name = "shld",
		},
		['r16,r16,cl'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xA5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16, cl",
			opcode = {"66", "0F", "A5", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"r16", "r16", "cl"},
			name = "shld",
		},
		['m32,r64,u8'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xA4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m32", "r64", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64, ib/ub",
			opcode = {"REX.W", "0F", "A4", "/r", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m32", "r64", "u8"},
			name = "shld",
		},
		['m32,r32,cl'] = {
			func = function(op1, op2, op3) return "\x0F\xA5"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m32", "r32", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32, cl",
			opcode = {"0F", "A5", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m32", "r32", "cl"},
			name = "shld",
		},
		['m64,r64,cl'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xA5"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m64", "r64", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64, cl",
			opcode = {"REX.W", "0F", "A5", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m64", "r64", "cl"},
			name = "shld",
		},
		['m64,r32,u8'] = {
			func = function(op1, op2, op3) return "\x0F\xA4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m64", "r32", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32, ib/ub",
			opcode = {"0F", "A4", "/r", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m64", "r32", "u8"},
			name = "shld",
		},
		['r32,r32,i8'] = {
			func = function(op1, op2, op3) return "\x0F\xA4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32", "r32", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32, ib/ub",
			opcode = {"0F", "A4", "/r", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"r32", "r32", "i8"},
			name = "shld",
		},
		['r64,r64,i8'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xA4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64", "r64", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64, ib/ub",
			opcode = {"REX.W", "0F", "A4", "/r", "ib"},
			metadata = "X64              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"r64", "r64", "i8"},
			name = "shld",
		},
		['r64,r64,cl'] = {
			func = function(op1, op2, op3) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xA5"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "X:r64/m32/m64, r64, cl",
			opcode = {"REX.W", "0F", "A5", "/r"},
			metadata = "X64              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"r64", "r64", "cl"},
			name = "shld",
		},
		['m32,r32,u8'] = {
			func = function(op1, op2, op3) return "\x0F\xA4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m32", "r32", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, r32, ib/ub",
			opcode = {"0F", "A4", "/r", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m32", "r32", "u8"},
			name = "shld",
		},
		['m16,r16,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xA4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m16", "r16", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "x:r16/m16, r16, ib/ub",
			opcode = {"66", "0F", "A4", "/r", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m16", "r16", "u8"},
			name = "shld",
		},
		['r16,r16,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xA4"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r16", "r16", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "x:r16/m16, r16, ib/ub",
			opcode = {"66", "0F", "A4", "/r", "ib"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"r16", "r16", "i8"},
			name = "shld",
		},
		['m16,r16,cl'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xA5"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m16", "r16", "cl"},
			encoding = "MR",
			has_relative = false,
			operands2 = "x:r16/m16, r16, cl",
			opcode = {"66", "0F", "A5", "/r"},
			metadata = "ANY              OF=W SF=W ZF=W AF=U PF=W CF=W",
			operands = {"m16", "r16", "cl"},
			name = "shld",
		},
	},
	['bsr'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"0F", "BD", "/r"},
			metadata = "ANY              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r32", "m32"},
			name = "bsr",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"0F", "BD", "/r"},
			metadata = "ANY              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r32", "r32"},
			name = "bsr",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"0F", "BD", "/r"},
			metadata = "ANY              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r32", "m64"},
			name = "bsr",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "BD", "/r"},
			metadata = "X64              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r64", "m64"},
			name = "bsr",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "BD", "/r"},
			metadata = "X64              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r64", "m32"},
			name = "bsr",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "BD", "/r"},
			metadata = "X64              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r64", "r64"},
			name = "bsr",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, r16/m16",
			opcode = {"66", "0F", "BD", "/r"},
			metadata = "ANY              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r16", "r16"},
			name = "bsr",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "w:r16, r16/m16",
			opcode = {"66", "0F", "BD", "/r"},
			metadata = "ANY              OF=U SF=U ZF=W AF=U PF=U CF=U",
			operands = {"r16", "m16"},
			name = "bsr",
		},
	},
	['vaddpd'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "58", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vaddpd",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vaddpd",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vaddpd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "58", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vaddpd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "58", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vaddpd",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "58", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vaddpd",
		},
		['zmm {kz},zmm,b64 {er}'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64 {er}"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64 {er}",
			opcode = {"EVEX.NDS.512.66.0F.W1", "58", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64 {er}"},
			name = "vaddpd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "58", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256"},
			name = "vaddpd",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vaddpd",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "58", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm"},
			name = "vaddpd",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vaddpd",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F.W1", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vaddpd",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F.W1", "58", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vaddpd",
		},
	},
	['cmovo'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "40", "/r"},
			metadata = "CMOV             OF=R",
			operands = {"r32", "m32"},
			name = "cmovo",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "40", "/r"},
			metadata = "CMOV             OF=R",
			operands = {"r32", "r32"},
			name = "cmovo",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r32, r32/m32/m64",
			opcode = {"0F", "40", "/r"},
			metadata = "CMOV             OF=R",
			operands = {"r32", "m64"},
			name = "cmovo",
		},
		['r64,m64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "40", "/r"},
			metadata = "CMOV X64         OF=R",
			operands = {"r64", "m64"},
			name = "cmovo",
		},
		['r64,m32'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "40", "/r"},
			metadata = "CMOV X64         OF=R",
			operands = {"r64", "m32"},
			name = "cmovo",
		},
		['r64,r64'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, true, op1.reg and x86_64.reginfo[op1.reg].extra, op2.reg and x86_64.reginfo[op2.reg].extra, op2.index and x86_64.reginfo[op2.index].extra).."\x0F\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:r64, r64/m32/m64",
			opcode = {"REX.W", "0F", "40", "/r"},
			metadata = "CMOV X64         OF=R",
			operands = {"r64", "r64"},
			name = "cmovo",
		},
		['r16,r16'] = {
			func = function(op1, op2) return "\x66\x0F\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "r16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "40", "/r"},
			metadata = "CMOV             OF=R",
			operands = {"r16", "r16"},
			name = "cmovo",
		},
		['r16,m16'] = {
			func = function(op1, op2) return "\x66\x0F\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r16", "m16"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:r16, r16/m16",
			opcode = {"66", "0F", "40", "/r"},
			metadata = "CMOV             OF=R",
			operands = {"r16", "m16"},
			name = "cmovo",
		},
	},
	['vfnmsubpd'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "7D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vfnmsubpd",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "7D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vfnmsubpd",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vfnmsubpd",
		},
		['ymm,ymm,ymm,m256'] = {
			func = function(op1, op2, op3, op4) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "m256"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F3A.W1", "7D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"ymm", "ymm", "ymm", "m256"},
			name = "vfnmsubpd",
		},
		['xmm,xmm,xmm,m128'] = {
			func = function(op1, op2, op3, op4) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "m128"},
			encoding = "RVSM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F3A.W1", "7D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "m128"},
			name = "vfnmsubpd",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x7D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "7D", "/r", "/is4"},
			metadata = "FMA4",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vfnmsubpd",
		},
	},
	['andn'] = {
		['r32,r32,r32'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "r32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r32, r32, r32/m32/m64",
			opcode = {"VEX.NDS.LZ.0F38.W0", "F2", "/r"},
			metadata = "BMI              OF=0 SF=W ZF=W AF=U PF=U CF=0",
			operands = {"r32", "r32", "r32"},
			name = "andn",
		},
		['r32,r32,m32'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r32, r32, r32/m32/m64",
			opcode = {"VEX.NDS.LZ.0F38.W0", "F2", "/r"},
			metadata = "BMI              OF=0 SF=W ZF=W AF=U PF=U CF=0",
			operands = {"r32", "r32", "m32"},
			name = "andn",
		},
		['r64,r64,r64'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "r64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r64, r64, r64/m32/m64",
			opcode = {"VEX.NDS.LZ.0F38.W1", "F2", "/r"},
			metadata = "BMI X64          OF=0 SF=W ZF=W AF=U PF=U CF=0",
			operands = {"r64", "r64", "r64"},
			name = "andn",
		},
		['r64,r64,m64'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r64, r64, r64/m32/m64",
			opcode = {"VEX.NDS.LZ.0F38.W1", "F2", "/r"},
			metadata = "BMI X64          OF=0 SF=W ZF=W AF=U PF=U CF=0",
			operands = {"r64", "r64", "m64"},
			name = "andn",
		},
		['r64,r64,m32'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r64, r64, r64/m32/m64",
			opcode = {"VEX.NDS.LZ.0F38.W1", "F2", "/r"},
			metadata = "BMI X64          OF=0 SF=W ZF=W AF=U PF=U CF=0",
			operands = {"r64", "r64", "m32"},
			name = "andn",
		},
		['r32,r32,m64'] = {
			func = function(op1, op2, op3) return "\xF2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:r32, r32, r32/m32/m64",
			opcode = {"VEX.NDS.LZ.0F38.W0", "F2", "/r"},
			metadata = "BMI              OF=0 SF=W ZF=W AF=U PF=U CF=0",
			operands = {"r32", "r32", "m64"},
			name = "andn",
		},
	},
	['stosb'] = {
		[''] = {
			func = function() return "\xAA" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<es:zdi>, R:<al>",
			opcode = {"AA"},
			metadata = "ANY _Rep         DF=R",
			operands = {},
			name = "stosb",
		},
	},
	['ficom'] = {
		['m64int'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m64int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/2"},
			metadata = "FPU              C0=W C1=0 C2=W C3=W",
			operands = {"m64int"},
			name = "ficom",
		},
		['m16int'] = {
			func = function(op1) return "\xDE"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m16int"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m16int",
			opcode = {"DE", "/2"},
			metadata = "FPU              C0=W C1=0 C2=W C3=W",
			operands = {"m16int"},
			name = "ficom",
		},
		['m32'] = {
			func = function(op1) return "\xDA"..x86_64.encode_modrm_sib(op1, 2) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:m32/m64int",
			opcode = {"DA", "/2"},
			metadata = "FPU              C0=W C1=0 C2=W C3=W",
			operands = {"m32"},
			name = "ficom",
		},
	},
	['ja'] = {
		['i8'] = {
			func = function(op1) return "\x77"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"77", "cb"},
			metadata = "ANY              Control=Branch CF=R ZF=R",
			operands = {"string"},
			name = "ja",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x87"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "87", "cw"},
			metadata = "X86              Control=Branch CF=R ZF=R",
			operands = {"string"},
			name = "ja",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x87"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "87", "cd"},
			metadata = "ANY              Control=Branch CF=R ZF=R",
			operands = {"string"},
			name = "ja",
		},
		['string'] = {
			func = function(op1) return "\x0F\x87"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "87", "cd"},
			metadata = "ANY              Control=Branch CF=R ZF=R",
			operands = {"string"},
			name = "ja",
		},
	},
	['js'] = {
		['i8'] = {
			func = function(op1) return "\x78"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"78", "cb"},
			metadata = "ANY              Control=Branch SF=R",
			operands = {"string"},
			name = "js",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x88"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "88", "cw"},
			metadata = "X86              Control=Branch SF=R",
			operands = {"string"},
			name = "js",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x88"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "88", "cd"},
			metadata = "ANY              Control=Branch SF=R",
			operands = {"string"},
			name = "js",
		},
		['string'] = {
			func = function(op1) return "\x0F\x88"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "88", "cd"},
			metadata = "ANY              Control=Branch SF=R",
			operands = {"string"},
			name = "js",
		},
	},
	['vphsubwd'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "E2", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vphsubwd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xE2"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "E2", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vphsubwd",
		},
	},
	['fclex'] = {
		[''] = {
			func = function(op1) return "\x9B\xDB\xE2" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"9B", "DB", "E2"},
			metadata = "FPU              C0=U C1=U C2=U C3=U",
			operands = {""},
			name = "fclex",
		},
	},
	['vshufpd'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F.WIG", "C6", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vshufpd",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F.WIG", "C6", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vshufpd",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F.W1", "C6", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "vshufpd",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F.W1", "C6", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "vshufpd",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F.W1", "C6", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "vshufpd",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F.WIG", "C6", "/r", "ib"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vshufpd",
		},
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F.WIG", "C6", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vshufpd",
		},
		['zmm {kz},zmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F.W1", "C6", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32", "u8"},
			name = "vshufpd",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F.W1", "C6", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "vshufpd",
		},
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F.W1", "C6", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "vshufpd",
		},
		['ymm {kz},ymm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F.W1", "C6", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32", "u8"},
			name = "vshufpd",
		},
		['xmm {kz},xmm,b32,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "b32", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F.W1", "C6", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32", "u8"},
			name = "vshufpd",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\xC6"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F.W1", "C6", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "vshufpd",
		},
	},
	['jnle'] = {
		['string'] = {
			func = function(op1) return "\x0F\x8F"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"string"},
			encoding = "D",
			has_relative = false,
			operands2 = "rel32",
			opcode = {"0F", "8F", "cd"},
			metadata = "ANY              Control=Branch ZF=R SF=R OF=R",
			operands = {"string"},
			name = "jnle",
		},
	},
	['vpminsb'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "38", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpminsb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "38", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpminsb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "38", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpminsb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "38", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpminsb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "38", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpminsb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "38", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpminsb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "38", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpminsb",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "38", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpminsb",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "38", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpminsb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x38"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "38", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpminsb",
		},
	},
	['fcmovnb'] = {
		['st(i)'] = {
			func = function(op1) return "\xDB" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"DB", "C0+i"},
			metadata = "FPU CMOV         C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fcmovnb",
		},
	},
	['cmppd'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "C2", "/r", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "xmm", "i8"},
			name = "cmppd",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\xC2"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, ib/ub",
			opcode = {"66", "0F", "C2", "/r", "ib"},
			metadata = "SSE2",
			operands = {"xmm", "m128", "u8"},
			name = "cmppd",
		},
	},
	['vphsubbw'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "E1", "/r"},
			metadata = "XOP",
			operands = {"xmm", "m128"},
			name = "vphsubbw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xE1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"XOP.L0.P0.M09.W0", "E1", "/r"},
			metadata = "XOP",
			operands = {"xmm", "xmm"},
			name = "vphsubbw",
		},
	},
	['push'] = {
		['m16'] = {
			func = function(op1) return "\x66\xFF"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m16"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r16/m16",
			opcode = {"66", "FF", "/6"},
			metadata = "ANY",
			operands = {"m16"},
			name = "push",
		},
		['gs'] = {
			func = function(op1) return "\x0F\xA8" end,
			real_operands = {"gs"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:gs",
			opcode = {"0F", "A8"},
			metadata = "ANY",
			operands = {"gs"},
			name = "push",
		},
		['u32'] = {
			func = function(op1) return "\x68"..x86_64.encode_int("int32_t", op1) end,
			real_operands = {"ud"},
			encoding = "I",
			has_relative = false,
			operands2 = "id/ud",
			opcode = {"68", "id"},
			metadata = "X86",
			operands = {"u32"},
			name = "push",
		},
		['r16'] = {
			func = function(op1) return "\x66"..string.char(0x50 + x86_64.reginfo[op1.reg].index) end,
			real_operands = {"r16"},
			encoding = "O",
			has_relative = false,
			operands2 = "R:r16",
			opcode = {"66", "50+r"},
			metadata = "ANY",
			operands = {"r16"},
			name = "push",
		},
		['i8'] = {
			func = function(op1) return "\x6A"..x86_64.encode_int("int8_t", op1) end,
			real_operands = {"ib"},
			encoding = "I",
			has_relative = false,
			operands2 = "ib",
			opcode = {"6A", "ib"},
			metadata = "ANY",
			operands = {"i8"},
			name = "push",
		},
		['cs'] = {
			func = function(op1) return "\x0E" end,
			real_operands = {"cs"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:cs",
			opcode = {"0E"},
			metadata = "X86",
			operands = {"cs"},
			name = "push",
		},
		['i32'] = {
			func = function(op1) return "\x68"..x86_64.encode_int("int32_t", op1) end,
			real_operands = {"id"},
			encoding = "I",
			has_relative = false,
			operands2 = "id",
			opcode = {"68", "id"},
			metadata = "X64",
			operands = {"i32"},
			name = "push",
		},
		['es'] = {
			func = function(op1) return "\x06" end,
			real_operands = {"es"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:es",
			opcode = {"06"},
			metadata = "X86",
			operands = {"es"},
			name = "push",
		},
		['r64'] = {
			func = function(op1) return string.char(0x50 + x86_64.reginfo[op1.reg].index) end,
			real_operands = {"r64"},
			encoding = "O",
			has_relative = false,
			operands2 = "R:r64",
			opcode = {"50+r"},
			metadata = "X64",
			operands = {"r64"},
			name = "push",
		},
		['r32'] = {
			func = function(op1) return string.char(0x50 + x86_64.reginfo[op1.reg].index) end,
			real_operands = {"r32"},
			encoding = "O",
			has_relative = false,
			operands2 = "R:r32",
			opcode = {"50+r"},
			metadata = "X86",
			operands = {"r32"},
			name = "push",
		},
		['m32'] = {
			func = function(op1) return "\xFF"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r64/m32/m64",
			opcode = {"FF", "/6"},
			metadata = "X64",
			operands = {"m32"},
			name = "push",
		},
		['ss'] = {
			func = function(op1) return "\x16" end,
			real_operands = {"ss"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:ss",
			opcode = {"16"},
			metadata = "X86",
			operands = {"ss"},
			name = "push",
		},
		['i16'] = {
			func = function(op1) return "\x66\x68"..x86_64.encode_int("int16_t", op1) end,
			real_operands = {"iw"},
			encoding = "I",
			has_relative = false,
			operands2 = "iw",
			opcode = {"66", "68", "iw"},
			metadata = "ANY",
			operands = {"i16"},
			name = "push",
		},
		['fs'] = {
			func = function(op1) return "\x0F\xA0" end,
			real_operands = {"fs"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:fs",
			opcode = {"0F", "A0"},
			metadata = "ANY",
			operands = {"fs"},
			name = "push",
		},
		['m64'] = {
			func = function(op1) return "\xFF"..x86_64.encode_modrm_sib(op1, 6) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "R:r64/m32/m64",
			opcode = {"FF", "/6"},
			metadata = "X64",
			operands = {"m64"},
			name = "push",
		},
		['ds'] = {
			func = function(op1) return "\x1E" end,
			real_operands = {"ds"},
			encoding = "NONE",
			has_relative = false,
			operands2 = "R:ds",
			opcode = {"1E"},
			metadata = "X86",
			operands = {"ds"},
			name = "push",
		},
	},
	['movdq2q'] = {
		['mm,xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\xD6"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, xmm[7:0]",
			opcode = {"F2", "0F", "D6", "/r"},
			metadata = "SSE2",
			operands = {"mm", "xmm[7:0]"},
			name = "movdq2q",
		},
	},
	['rdseed'] = {
		['r32'] = {
			func = function(op1) return "\x0F\xC7"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r32",
			opcode = {"0F", "C7", "/7"},
			metadata = "RDSEED           Volatile OF=0 SF=0 ZF=0 AF=0 PF=0 CF=W",
			operands = {"r32"},
			name = "rdseed",
		},
		['r64'] = {
			func = function(op1) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\x0F\xC7"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:r64",
			opcode = {"REX.W", "0F", "C7", "/7"},
			metadata = "RDSEED X64       Volatile OF=0 SF=0 ZF=0 AF=0 PF=0 CF=W",
			operands = {"r64"},
			name = "rdseed",
		},
		['r16'] = {
			func = function(op1) return "\x66\x0F\xC7"..x86_64.encode_modrm_sib(op1, 7) end,
			real_operands = {"r16"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r16",
			opcode = {"66", "0F", "C7", "/7"},
			metadata = "RDSEED           Volatile OF=0 SF=0 ZF=0 AF=0 PF=0 CF=W",
			operands = {"r16"},
			name = "rdseed",
		},
	},
	['fptan'] = {
		[''] = {
			func = function(op1) return "\xD9\xF2" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"D9", "F2"},
			metadata = "FPU_POP          C0=U C1=W C2=W C3=U",
			operands = {""},
			name = "fptan",
		},
	},
	['setnp'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9B", "/r"},
			metadata = "ANY              PF=R",
			operands = {"m8"},
			name = "setnp",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x9B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9B", "/r"},
			metadata = "ANY              PF=R",
			operands = {"r8"},
			name = "setnp",
		},
	},
	['pand'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "DB", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "pand",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "DB", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "pand",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "DB", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "pand",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "DB", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pand",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "DB", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pand",
		},
	},
	['maxss'] = {
		['xmm[3:0],xmm[3:0]'] = {
			func = function(op1, op2) return "\xF3\x0F\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "5F", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "xmm[3:0]"},
			name = "maxss",
		},
		['xmm[3:0],m32'] = {
			func = function(op1, op2) return "\xF3\x0F\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "5F", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m32"},
			name = "maxss",
		},
		['xmm[3:0],m64'] = {
			func = function(op1, op2) return "\xF3\x0F\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[3:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[3:0], xmm[3:0]/m32/m64",
			opcode = {"F3", "0F", "5F", "/r"},
			metadata = "SSE",
			operands = {"xmm[3:0]", "m64"},
			name = "maxss",
		},
	},
	['vrndscalepd'] = {
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "09", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vrndscalepd",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "09", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vrndscalepd",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "09", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vrndscalepd",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "09", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vrndscalepd",
		},
		['xmm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.128.66.0F3A.W1", "09", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b64", "u8"},
			name = "vrndscalepd",
		},
		['ymm {kz},b64,u8'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b64", "ub"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.256.66.0F3A.W1", "09", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b64", "u8"},
			name = "vrndscalepd",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub {sae}",
			opcode = {"EVEX.512.66.0F3A.W1", "09", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vrndscalepd",
		},
		['zmm {kz},b64,ub {sae}'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b64", "ub {sae}"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub {sae}",
			opcode = {"EVEX.512.66.0F3A.W1", "09", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b64", "ub {sae}"},
			name = "vrndscalepd",
		},
		['zmm {kz},m512,ub {sae}'] = {
			func = function(op1, op2, op3) return "\x09"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub {sae}"},
			encoding = "RMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b64, ib/ub {sae}",
			opcode = {"EVEX.512.66.0F3A.W1", "09", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "ub {sae}"},
			name = "vrndscalepd",
		},
	},
	['vpmulld'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "40", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmulld",
		},
		['xmm {kz},xmm,b32'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "40", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b32"},
			name = "vpmulld",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "40", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmulld",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "40", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmulld",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "40", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmulld",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "40", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpmulld",
		},
		['zmm {kz},zmm,b32'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "40", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b32"},
			name = "vpmulld",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "40", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmulld",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "40", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmulld",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "40", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpmulld",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b32",
			opcode = {"EVEX.NDS.512.66.0F38.W0", "40", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmulld",
		},
		['ymm {kz},ymm,b32'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b32"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b32",
			opcode = {"EVEX.NDS.256.66.0F38.W0", "40", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b32"},
			name = "vpmulld",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x40"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b32",
			opcode = {"EVEX.NDS.128.66.0F38.W0", "40", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmulld",
		},
	},
	['vdppd'] = {
		['xmm,xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x41"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "m128", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.WIG", "41", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128", "u8"},
			name = "vdppd",
		},
		['xmm,xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x41"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm", "xmm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, ib/ub",
			opcode = {"VEX.NDS.128.66.0F3A.WIG", "41", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm", "i8"},
			name = "vdppd",
		},
	},
	['vcvttsd2si'] = {
		['r32,xmm[7:0]'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "xmm[7:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F2.0F.W0", "2C", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "xmm[7:0]"},
			name = "vcvttsd2si",
		},
		['r64,m64 {sae}'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64 {sae}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F2.0F.W1", "2C", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m64 {sae}"},
			name = "vcvttsd2si",
		},
		['r64,xmm[7:0]'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "xmm[7:0]"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F2.0F.W1", "2C", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "xmm[7:0]"},
			name = "vcvttsd2si",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64",
			opcode = {"VEX.LIG.F2.0F.W1", "2C", "/r"},
			metadata = "AVX X64",
			operands = {"r64", "m64"},
			name = "vcvttsd2si",
		},
		['r32,m64 {sae}'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64 {sae}"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F2.0F.W0", "2C", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m64 {sae}"},
			name = "vcvttsd2si",
		},
		['r32,m32'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F2.0F.W0", "2C", "/r"},
			metadata = "AVX512_F",
			operands = {"r32", "m32"},
			name = "vcvttsd2si",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM-T1F",
			has_relative = false,
			operands2 = "W:r64, xmm[7:0]/m32/m64 {sae}",
			opcode = {"EVEX.LIG.F2.0F.W1", "2C", "/r"},
			metadata = "AVX512_F X64",
			operands = {"r64", "m32"},
			name = "vcvttsd2si",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x2C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:r32, xmm[7:0]/m32/m64",
			opcode = {"VEX.LIG.F2.0F.W0", "2C", "/r"},
			metadata = "AVX",
			operands = {"r32", "m64"},
			name = "vcvttsd2si",
		},
	},
	['vminss'] = {
		['xmm {kz},xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[3:0]"},
			name = "vminss",
		},
		['xmm,xmm[15:4],xmm[3:0]'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "5D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "xmm[3:0]"},
			name = "vminss",
		},
		['xmm {kz},xmm[15:4],m64 {sae}'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64 {sae}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[15:4]", "m64 {sae}"},
			name = "vminss",
		},
		['xmm,xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "5D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m32"},
			name = "vminss",
		},
		['xmm,xmm[15:4],m64'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[3:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F3.0F.WIG", "5D", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m64"},
			name = "vminss",
		},
		['xmm {kz},xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x5D"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[3:0]/m32/m64 {sae}",
			opcode = {"EVEX.NDS.LIG.F3.0F.W0", "5D", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			name = "vminss",
		},
	},
	['rdtscp'] = {
		[''] = {
			func = function() return "\x0F\x01\xF9" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "W:<edx>, W:<eax>, W:<ecx>",
			opcode = {"0F", "01", "F9"},
			metadata = "RDTSCP           Volatile",
			operands = {},
			name = "rdtscp",
		},
	},
	['vextractf128'] = {
		['xmm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x19"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "ymm", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:xmm/m128, ymm, ib/ub",
			opcode = {"VEX.256.66.0F3A.W0", "19", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "ymm", "i8"},
			name = "vextractf128",
		},
		['m128,ymm,u8'] = {
			func = function(op1, op2, op3) return "\x19"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m128", "ymm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:xmm/m128, ymm, ib/ub",
			opcode = {"VEX.256.66.0F3A.W0", "19", "/r", "ib"},
			metadata = "AVX",
			operands = {"m128", "ymm", "u8"},
			name = "vextractf128",
		},
	},
	['jl'] = {
		['i8'] = {
			func = function(op1) return "\x7C"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"7C", "cb"},
			metadata = "ANY              Control=Branch SF=R OF=R",
			operands = {"string"},
			name = "jl",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x8C"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "8C", "cw"},
			metadata = "X86              Control=Branch SF=R OF=R",
			operands = {"string"},
			name = "jl",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x8C"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "8C", "cd"},
			metadata = "ANY              Control=Branch SF=R OF=R",
			operands = {"string"},
			name = "jl",
		},
		['string'] = {
			func = function(op1) return "\x0F\x8C"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "8C", "cd"},
			metadata = "ANY              Control=Branch SF=R OF=R",
			operands = {"string"},
			name = "jl",
		},
	},
	['jnc'] = {
		['string'] = {
			func = function(op1) return "\x0F\x83"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"string"},
			encoding = "D",
			has_relative = false,
			operands2 = "rel32",
			opcode = {"0F", "83", "cd"},
			metadata = "ANY              Control=Branch CF=R",
			operands = {"string"},
			name = "jnc",
		},
	},
	['fcmovbe'] = {
		['st(i)'] = {
			func = function(op1) return "\xDA" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"DA", "D0+i"},
			metadata = "FPU CMOV         C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fcmovbe",
		},
	},
	['pminub'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xDA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "DA", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m32"},
			name = "pminub",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xDA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "DA", "/r"},
			metadata = "MMX2",
			operands = {"mm", "m64"},
			name = "pminub",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xDA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "DA", "/r"},
			metadata = "MMX2",
			operands = {"mm", "mm"},
			name = "pminub",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xDA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "DA", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "pminub",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xDA"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "DA", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "pminub",
		},
	},
	['vaddsd'] = {
		['xmm,xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "58", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "xmm[7:0]"},
			name = "vaddsd",
		},
		['xmm {kz},xmm[15:8],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "58", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "xmm[7:0]"},
			name = "vaddsd",
		},
		['xmm {kz},xmm[15:8],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "58", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m64 {er}"},
			name = "vaddsd",
		},
		['xmm,xmm[15:8],m64'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "58", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m64"},
			name = "vaddsd",
		},
		['xmm,xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:8]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "58", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m32"},
			name = "vaddsd",
		},
		['xmm {kz},xmm[15:8],m32'] = {
			func = function(op1, op2, op3) return "\x58"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:8], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "58", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:8]", "m32"},
			name = "vaddsd",
		},
	},
	['vpand'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "DB", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpand",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F.WIG", "DB", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpand",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "DB", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpand",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "DB", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpand",
		},
	},
	['vmaskmovdqu'] = {
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:xmm, xmm, X:<ds:zdi>",
			opcode = {"VEX.128.66.0F.WIG", "F7", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm"},
			name = "vmaskmovdqu",
		},
	},
	['bextr'] = {
		['r64,m64,r64'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64", "r64"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, r64",
			opcode = {"VEX.NDS.LZ.0F38.W1", "F7", "/r"},
			metadata = "BMI X64          OF=0 SF=U ZF=W AF=U PF=U CF=0",
			operands = {"r64", "m64", "r64"},
			name = "bextr",
		},
		['r32,r32,r32'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32", "r32"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, r32",
			opcode = {"VEX.NDS.LZ.0F38.W0", "F7", "/r"},
			metadata = "BMI              OF=0 SF=U ZF=W AF=U PF=U CF=0",
			operands = {"r32", "r32", "r32"},
			name = "bextr",
		},
		['r32,m32,r32'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32", "r32"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, r32",
			opcode = {"VEX.NDS.LZ.0F38.W0", "F7", "/r"},
			metadata = "BMI              OF=0 SF=U ZF=W AF=U PF=U CF=0",
			operands = {"r32", "m32", "r32"},
			name = "bextr",
		},
		['r64,r64,r64'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64", "r64"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, r64",
			opcode = {"VEX.NDS.LZ.0F38.W1", "F7", "/r"},
			metadata = "BMI X64          OF=0 SF=U ZF=W AF=U PF=U CF=0",
			operands = {"r64", "r64", "r64"},
			name = "bextr",
		},
		['r32,m64,r32'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64", "r32"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64, r32",
			opcode = {"VEX.NDS.LZ.0F38.W0", "F7", "/r"},
			metadata = "BMI              OF=0 SF=U ZF=W AF=U PF=U CF=0",
			operands = {"r32", "m64", "r32"},
			name = "bextr",
		},
		['r64,m32,r64'] = {
			func = function(op1, op2, op3) return "\xF7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32", "r64"},
			encoding = "RMV",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64, r64",
			opcode = {"VEX.NDS.LZ.0F38.W1", "F7", "/r"},
			metadata = "BMI X64          OF=0 SF=U ZF=W AF=U PF=U CF=0",
			operands = {"r64", "m32", "r64"},
			name = "bextr",
		},
	},
	['lfence'] = {
		[''] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 5) end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"0F", "AE", "/5"},
			metadata = "SSE2 Volatile",
			operands = {""},
			name = "lfence",
		},
	},
	['pextrd'] = {
		['m32,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m32", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, xmm, ib/ub",
			opcode = {"66", "0F", "3A", "16", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"m32", "xmm", "u8"},
			name = "pextrd",
		},
		['r64[3:0],xmm,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[3:0]", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64[3:0], xmm, ib/ub",
			opcode = {"66", "0F", "3A", "16", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"r64[3:0]", "xmm", "u8"},
			name = "pextrd",
		},
		['m64,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"m64", "xmm", "ub"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, xmm, ib/ub",
			opcode = {"66", "0F", "3A", "16", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"m64", "xmm", "u8"},
			name = "pextrd",
		},
		['r64[3:0],xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r64[3:0]", "xmm", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r64[3:0], xmm, ib/ub",
			opcode = {"66", "0F", "3A", "16", "/r", "ib"},
			metadata = "SSE4_1 X64",
			operands = {"r64[3:0]", "xmm", "i8"},
			name = "pextrd",
		},
		['r32[3:0],xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x16"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"r32[3:0]", "xmm", "ib"},
			encoding = "MRI",
			has_relative = false,
			operands2 = "W:r32[3:0]/m32/m64, xmm, ib/ub",
			opcode = {"66", "0F", "3A", "16", "/r", "ib"},
			metadata = "SSE4_1",
			operands = {"r32[3:0]", "xmm", "i8"},
			name = "pextrd",
		},
	},
	['valignq'] = {
		['zmm {kz},zmm,zmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "zmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "03", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm", "i8"},
			name = "valignq",
		},
		['ymm {kz},ymm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "03", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64", "u8"},
			name = "valignq",
		},
		['xmm {kz},xmm,m128,u8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "m128", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "03", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128", "u8"},
			name = "valignq",
		},
		['xmm {kz},xmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "03", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64", "u8"},
			name = "valignq",
		},
		['ymm {kz},ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "ymm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "03", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm", "i8"},
			name = "valignq",
		},
		['zmm {kz},zmm,m512,u8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "m512", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "03", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512", "u8"},
			name = "valignq",
		},
		['zmm {kz},zmm,b64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"zmm {kz}", "zmm", "b64", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512/b64, ib/ub",
			opcode = {"EVEX.NDS.512.66.0F3A.W1", "03", "/r", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64", "u8"},
			name = "valignq",
		},
		['xmm {kz},xmm,xmm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm {kz}", "xmm", "xmm", "ib"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128/b64, ib/ub",
			opcode = {"EVEX.NDS.128.66.0F3A.W1", "03", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm", "i8"},
			name = "valignq",
		},
		['ymm {kz},ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x03"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm {kz}", "ymm", "m256", "ub"},
			encoding = "RVMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256/b64, ib/ub",
			opcode = {"EVEX.NDS.256.66.0F3A.W1", "03", "/r", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256", "u8"},
			name = "valignq",
		},
	},
	['blendvps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, <xmm0>",
			opcode = {"66", "0F", "38", "14", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "m128"},
			name = "blendvps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x38\x14"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128, <xmm0>",
			opcode = {"66", "0F", "38", "14", "/r"},
			metadata = "SSE4_1",
			operands = {"xmm", "xmm"},
			name = "blendvps",
		},
	},
	['maxsd'] = {
		['xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2) return "\xF2\x0F\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "5F", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "xmm[7:0]"},
			name = "maxsd",
		},
		['xmm[7:0],m64'] = {
			func = function(op1, op2) return "\xF2\x0F\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "5F", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m64"},
			name = "maxsd",
		},
		['xmm[7:0],m32'] = {
			func = function(op1, op2) return "\xF2\x0F\x5F"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"F2", "0F", "5F", "/r"},
			metadata = "SSE2",
			operands = {"xmm[7:0]", "m32"},
			name = "maxsd",
		},
	},
	['vpshufb'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "00", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpshufb",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "00", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpshufb",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "00", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpshufb",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "00", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpshufb",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "00", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpshufb",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "00", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpshufb",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, ymm/m256",
			opcode = {"EVEX.NDS.256.66.0F38.WIG", "00", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpshufb",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "00", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpshufb",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, zmm/m512",
			opcode = {"EVEX.NDS.512.66.0F38.WIG", "00", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpshufb",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x00"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F38.WIG", "00", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpshufb",
		},
	},
	['setno'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "91", "/r"},
			metadata = "ANY              OF=R",
			operands = {"m8"},
			name = "setno",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x91"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "91", "/r"},
			metadata = "ANY              OF=R",
			operands = {"r8"},
			name = "setno",
		},
	},
	['punpckhbw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "68", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "punpckhbw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "68", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "punpckhbw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:mm, mm/m32/m64",
			opcode = {"0F", "68", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "punpckhbw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "68", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "punpckhbw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x68"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"66", "0F", "68", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "punpckhbw",
		},
	},
	['paddsw'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\xED"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "ED", "/r"},
			metadata = "MMX",
			operands = {"mm", "m32"},
			name = "paddsw",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\xED"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "ED", "/r"},
			metadata = "MMX",
			operands = {"mm", "m64"},
			name = "paddsw",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\xED"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~mm, ~mm/m32/m64",
			opcode = {"0F", "ED", "/r"},
			metadata = "MMX",
			operands = {"mm", "mm"},
			name = "paddsw",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\xED"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "ED", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "paddsw",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\xED"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"66", "0F", "ED", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "paddsw",
		},
	},
	['andps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"0F", "54", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "andps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x54"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:~xmm, ~xmm/m128",
			opcode = {"0F", "54", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "andps",
		},
	},
	['vmovntdq'] = {
		['m512,zmm'] = {
			func = function(op1, op2) return "\xE7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m512", "zmm"},
			encoding = "MR-FVM",
			has_relative = false,
			operands2 = "W:m512, zmm",
			opcode = {"EVEX.512.66.0F.W0", "E7", "/r"},
			metadata = "AVX512_F",
			operands = {"m512", "zmm"},
			name = "vmovntdq",
		},
		['m128,xmm'] = {
			func = function(op1, op2) return "\xE7"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m128, xmm",
			opcode = {"VEX.128.66.0F.WIG", "E7", "/r"},
			metadata = "AVX",
			operands = {"m128", "xmm"},
			name = "vmovntdq",
		},
		['m256,ymm'] = {
			func = function(op1, op2) return "\xE7"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256", "ymm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:m256, ymm",
			opcode = {"VEX.256.66.0F.WIG", "E7", "/r"},
			metadata = "AVX",
			operands = {"m256", "ymm"},
			name = "vmovntdq",
		},
	},
	['movapd'] = {
		['m128,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x29"..x86_64.encode_modrm_sib(op2, op1) end,
			real_operands = {"m128", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"66", "0F", "29", "/r"},
			metadata = "SSE2",
			operands = {"m128", "xmm"},
			name = "movapd",
		},
		['xmm,m128'] = {
			func = function(op1, op2) return "\x66\x0F\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"66", "0F", "28", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "m128"},
			name = "movapd",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x66\x0F\x29"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "MR",
			has_relative = false,
			operands2 = "W:xmm/m128, xmm",
			opcode = {"66", "0F", "29", "/r"},
			metadata = "SSE2",
			operands = {"xmm", "xmm"},
			name = "movapd",
		},
	},
	['pfrcp'] = {
		['mm,m32'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x96" end,
			real_operands = {"mm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "96"},
			metadata = "3DNOW",
			operands = {"mm", "m32"},
			name = "pfrcp",
		},
		['mm,m64'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x96" end,
			real_operands = {"mm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "96"},
			metadata = "3DNOW",
			operands = {"mm", "m64"},
			name = "pfrcp",
		},
		['mm,mm'] = {
			func = function(op1, op2) return "\x0F\x0F"..x86_64.encode_modrm_sib(op1, op2).."\x96" end,
			real_operands = {"mm", "mm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:mm, mm/m32/m64",
			opcode = {"0F", "0F", "/r", "96"},
			metadata = "3DNOW",
			operands = {"mm", "mm"},
			name = "pfrcp",
		},
	},
	['vpscatterqd'] = {
		['m64y {k},xmm'] = {
			func = function(op1, op2) return "\xA1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64y {k}", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, xmm",
			opcode = {"EVEX.256.66.0F38.W0", "A1", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64y {k}", "xmm"},
			name = "vpscatterqd",
		},
		['m64x {k},xmm'] = {
			func = function(op1, op2) return "\xA1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64x {k}", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64x {k}, xmm",
			opcode = {"EVEX.128.66.0F38.W0", "A1", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"m64x {k}", "xmm"},
			name = "vpscatterqd",
		},
		['vm32,ymm'] = {
			func = function(op1, op2) return "\xA1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64z {k}, ymm",
			opcode = {"EVEX.512.66.0F38.W0", "A1", "/r"},
			metadata = "AVX512_F",
			operands = {"vm32", "ymm"},
			name = "vpscatterqd",
		},
		['vm32,xmm'] = {
			func = function(op1, op2) return "\xA1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"vm32", "xmm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64y {k}, xmm",
			opcode = {"EVEX.256.66.0F38.W0", "A1", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"vm32", "xmm"},
			name = "vpscatterqd",
		},
		['m64z {k},ymm'] = {
			func = function(op1, op2) return "\xA1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m64z {k}", "ymm"},
			encoding = "MR-T1S",
			has_relative = false,
			operands2 = "W:vm32/m64z {k}, ymm",
			opcode = {"EVEX.512.66.0F38.W0", "A1", "/r"},
			metadata = "AVX512_F",
			operands = {"m64z {k}", "ymm"},
			name = "vpscatterqd",
		},
	},
	['vptestmq'] = {
		['k {k},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "27", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "zmm"},
			name = "vptestmq",
		},
		['k {k},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "b64"},
			name = "vptestmq",
		},
		['k {k},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "27", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "m512"},
			name = "vptestmq",
		},
		['k {k},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "xmm"},
			name = "vptestmq",
		},
		['k {k},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, xmm, xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "xmm", "m128"},
			name = "vptestmq",
		},
		['k {k},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "m256"},
			name = "vptestmq",
		},
		['k {k},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "b64"},
			name = "vptestmq",
		},
		['k {k},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, zmm, zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "27", "/r"},
			metadata = "AVX512_F",
			operands = {"k {k}", "zmm", "b64"},
			name = "vptestmq",
		},
		['k {k},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x27"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k {k}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:k {k}, ymm, ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "27", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"k {k}", "ymm", "ymm"},
			name = "vptestmq",
		},
	},
	['vaesimc'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.66.0F38.WIG", "DB", "/r"},
			metadata = "AVX AESNI",
			operands = {"xmm", "m128"},
			name = "vaesimc",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\xDB"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm/m128",
			opcode = {"VEX.128.66.0F38.WIG", "DB", "/r"},
			metadata = "AVX AESNI",
			operands = {"xmm", "xmm"},
			name = "vaesimc",
		},
	},
	['jng'] = {
		['string'] = {
			func = function(op1) return "\x0F\x8E"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"string"},
			encoding = "D",
			has_relative = false,
			operands2 = "rel32",
			opcode = {"0F", "8E", "cd"},
			metadata = "ANY              Control=Branch ZF=R SF=R OF=R",
			operands = {"string"},
			name = "jng",
		},
	},
	['rol'] = {
		['m16,u8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m16", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/0", "ib"},
			metadata = "ANY              CF=W OF=W",
			operands = {"m16", "u8"},
			name = "rol",
		},
		['m8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/0"},
			metadata = "ANY              CF=W OF=W",
			operands = {"m8", "1"},
			name = "rol",
		},
		['m32,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m32", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/0", "ib"},
			metadata = "X64              CF=W OF=W",
			operands = {"m32", "u8"},
			name = "rol",
		},
		['m8,u8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m8", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/0", "ib"},
			metadata = "ANY              CF=W OF=W",
			operands = {"m8", "u8"},
			name = "rol",
		},
		['r8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/0"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r8", "cl"},
			name = "rol",
		},
		['r16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/0"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r16", "cl"},
			name = "rol",
		},
		['m16,cl'] = {
			func = function(op1, op2) return "\x66\xD3"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m16", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, cl",
			opcode = {"66", "D3", "/0"},
			metadata = "ANY              CF=W OF=W",
			operands = {"m16", "cl"},
			name = "rol",
		},
		['r32,i8'] = {
			func = function(op1, op2) return "\xC1"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r32", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r32/m32/m64, ib/ub",
			opcode = {"C1", "/0", "ib"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r32", "i8"},
			name = "rol",
		},
		['r32,cl'] = {
			func = function(op1, op2) return "\xD3"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, cl",
			opcode = {"D3", "/0"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r32", "cl"},
			name = "rol",
		},
		['r32,1'] = {
			func = function(op1, op2) return "\xD1"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r32/m32/m64, 1",
			opcode = {"D1", "/0"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r32", "1"},
			name = "rol",
		},
		['m64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/0"},
			metadata = "X64              CF=W OF=W",
			operands = {"m64", "cl"},
			name = "rol",
		},
		['m64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/0"},
			metadata = "X64              CF=W OF=W",
			operands = {"m64", "1"},
			name = "rol",
		},
		['r16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/0"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r16", "1"},
			name = "rol",
		},
		['r64,i8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r64", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/0", "ib"},
			metadata = "X64              CF=W OF=W",
			operands = {"r64", "i8"},
			name = "rol",
		},
		['r64,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r64", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/0"},
			metadata = "X64              CF=W OF=W",
			operands = {"r64", "cl"},
			name = "rol",
		},
		['r64,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r64", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/0"},
			metadata = "X64              CF=W OF=W",
			operands = {"r64", "1"},
			name = "rol",
		},
		['m64,u8'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xC1"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"m64", "ub"},
			encoding = "MI",
			has_relative = false,
			operands2 = "X:r64/m32/m64, ib/ub",
			opcode = {"REX.W", "C1", "/0", "ib"},
			metadata = "X64              CF=W OF=W",
			operands = {"m64", "u8"},
			name = "rol",
		},
		['m8,cl'] = {
			func = function(op1, op2) return "\xD2"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m8", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, cl",
			opcode = {"D2", "/0"},
			metadata = "ANY              CF=W OF=W",
			operands = {"m8", "cl"},
			name = "rol",
		},
		['m32,1'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD1"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m32", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, 1",
			opcode = {"REX.W", "D1", "/0"},
			metadata = "X64              CF=W OF=W",
			operands = {"m32", "1"},
			name = "rol",
		},
		['r8,1'] = {
			func = function(op1, op2) return "\xD0"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"r8", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r8/m8, 1",
			opcode = {"D0", "/0"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r8", "1"},
			name = "rol",
		},
		['m32,cl'] = {
			func = function(op1, op2) return x86_64.encode_rex(true, false, op1.reg and x86_64.reginfo[op1.reg].extra).."\xD3"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m32", "cl"},
			encoding = "M",
			has_relative = false,
			operands2 = "X:r64/m32/m64, cl",
			opcode = {"REX.W", "D3", "/0"},
			metadata = "X64              CF=W OF=W",
			operands = {"m32", "cl"},
			name = "rol",
		},
		['m16,1'] = {
			func = function(op1, op2) return "\x66\xD1"..x86_64.encode_modrm_sib(op1, 0) end,
			real_operands = {"m16", "1"},
			encoding = "M",
			has_relative = false,
			operands2 = "x:r16/m16, 1",
			opcode = {"66", "D1", "/0"},
			metadata = "ANY              CF=W OF=W",
			operands = {"m16", "1"},
			name = "rol",
		},
		['r16,i8'] = {
			func = function(op1, op2) return "\x66\xC1"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r16", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r16/m16, ib/ub",
			opcode = {"66", "C1", "/0", "ib"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r16", "i8"},
			name = "rol",
		},
		['r8,i8'] = {
			func = function(op1, op2) return "\xC0"..x86_64.encode_modrm_sib(op1, 0)..x86_64.encode_int("int8_t", op2) end,
			real_operands = {"r8", "ib"},
			encoding = "MI",
			has_relative = false,
			operands2 = "x:r8/m8, ib/ub",
			opcode = {"C0", "/0", "ib"},
			metadata = "ANY              CF=W OF=W",
			operands = {"r8", "i8"},
			name = "rol",
		},
	},
	['fdivrp'] = {
		[''] = {
			func = function(op1) return "\xDE\xF1" end,
			real_operands = {""},
			encoding = "NONE",
			has_relative = false,
			operands2 = "",
			opcode = {"DE", "F1"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {""},
			name = "fdivrp",
		},
		['st(i)'] = {
			func = function(op1) return "\xDE" end,
			real_operands = {"st(i)"},
			encoding = "O",
			has_relative = false,
			operands2 = "st(i)",
			opcode = {"DE", "F0+i"},
			metadata = "FPU_POP          C0=U C1=W C2=U C3=U",
			operands = {"st(i)"},
			name = "fdivrp",
		},
	},
	['vbroadcastf64x4'] = {
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x1B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-T4",
			has_relative = false,
			operands2 = "W:zmm {kz}, m256",
			opcode = {"EVEX.512.66.0F38.W1", "1B", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m256"},
			name = "vbroadcastf64x4",
		},
	},
	['vfnmadd231sd'] = {
		['xmm[7:0],xmm[7:0],m64'] = {
			func = function(op1, op2, op3) return "\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "BD", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m64"},
			name = "vfnmadd231sd",
		},
		['xmm[7:0],xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "BD", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "m32"},
			name = "vfnmadd231sd",
		},
		['xmm[7:0],xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "x:xmm[7:0], xmm[7:0], xmm[7:0]/m32/m64",
			opcode = {"VEX.DDS.LIG.66.0F38.W1", "BD", "/r"},
			metadata = "FMA",
			operands = {"xmm[7:0]", "xmm[7:0]", "xmm[7:0]"},
			name = "vfnmadd231sd",
		},
		['xmm[7:0] {kz},xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "BD", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "xmm[7:0]"},
			name = "vfnmadd231sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m64 {er}'] = {
			func = function(op1, op2, op3) return "\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "BD", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m64 {er}"},
			name = "vfnmadd231sd",
		},
		['xmm[7:0] {kz},xmm[7:0],m32'] = {
			func = function(op1, op2, op3) return "\xBD"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "x:xmm[7:0] {kz}, xmm[7:0], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.DDS.LIG.66.0F38.W1", "BD", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm[7:0] {kz}", "xmm[7:0]", "m32"},
			name = "vfnmadd231sd",
		},
	},
	['seto'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "90", "/r"},
			metadata = "ANY              OF=R",
			operands = {"m8"},
			name = "seto",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x90"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "90", "/r"},
			metadata = "ANY              OF=R",
			operands = {"r8"},
			name = "seto",
		},
	},
	['vmwrite'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\x0F\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r32, R:r32/m32/m64",
			opcode = {"0F", "79", "/r"},
			metadata = "VMX X86          PRIVILEGE=L0",
			operands = {"r32", "m32"},
			name = "vmwrite",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\x0F\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "r32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r32, R:r32/m32/m64",
			opcode = {"0F", "79", "/r"},
			metadata = "VMX X86          PRIVILEGE=L0",
			operands = {"r32", "r32"},
			name = "vmwrite",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\x0F\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r32", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r32, R:r32/m32/m64",
			opcode = {"0F", "79", "/r"},
			metadata = "VMX X86          PRIVILEGE=L0",
			operands = {"r32", "m64"},
			name = "vmwrite",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\x0F\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r64, R:r64/m32/m64",
			opcode = {"0F", "79", "/r"},
			metadata = "VMX X64          PRIVILEGE=L0",
			operands = {"r64", "m64"},
			name = "vmwrite",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\x0F\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r64, R:r64/m32/m64",
			opcode = {"0F", "79", "/r"},
			metadata = "VMX X64          PRIVILEGE=L0",
			operands = {"r64", "m32"},
			name = "vmwrite",
		},
		['r64,r64'] = {
			func = function(op1, op2) return "\x0F\x79"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r64", "r64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "R:r64, R:r64/m32/m64",
			opcode = {"0F", "79", "/r"},
			metadata = "VMX X64          PRIVILEGE=L0",
			operands = {"r64", "r64"},
			name = "vmwrite",
		},
	},
	['vpbroadcastq'] = {
		['xmm {kz},r64[7:0]'] = {
			func = function(op1, op2) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "r64[7:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, r64[7:0]",
			opcode = {"EVEX.128.66.0F38.W1", "7C", "/r"},
			metadata = "AVX512_F-VL X64",
			operands = {"xmm {kz}", "r64[7:0]"},
			name = "vpbroadcastq",
		},
		['ymm,m32'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[7:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.W0", "59", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m32"},
			name = "vpbroadcastq",
		},
		['ymm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[7:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.W0", "59", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm[7:0]"},
			name = "vpbroadcastq",
		},
		['zmm {kz},m64'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m64"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W1", "59", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m64"},
			name = "vpbroadcastq",
		},
		['ymm {kz},m64'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m64"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W1", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m64"},
			name = "vpbroadcastq",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W1", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vpbroadcastq",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.W0", "59", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm[7:0]"},
			name = "vpbroadcastq",
		},
		['zmm {kz},m32'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W1", "59", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m32"},
			name = "vpbroadcastq",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.W0", "59", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m32"},
			name = "vpbroadcastq",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.W0", "59", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "m64"},
			name = "vpbroadcastq",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W1", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vpbroadcastq",
		},
		['ymm,m64'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[7:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.W0", "59", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m64"},
			name = "vpbroadcastq",
		},
		['ymm {kz},r64[7:0]'] = {
			func = function(op1, op2) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "r64[7:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, r64[7:0]",
			opcode = {"EVEX.256.66.0F38.W1", "7C", "/r"},
			metadata = "AVX512_F-VL X64",
			operands = {"ymm {kz}", "r64[7:0]"},
			name = "vpbroadcastq",
		},
		['ymm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm[7:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W1", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm[7:0]"},
			name = "vpbroadcastq",
		},
		['zmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "xmm[7:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.512.66.0F38.W1", "59", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "xmm[7:0]"},
			name = "vpbroadcastq",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.W1", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vpbroadcastq",
		},
		['ymm {kz},m32'] = {
			func = function(op1, op2) return "\x59"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m32"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.W1", "59", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m32"},
			name = "vpbroadcastq",
		},
		['zmm {kz},r64[7:0]'] = {
			func = function(op1, op2) return "\x7C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "r64[7:0]"},
			encoding = "RM-T1S",
			has_relative = false,
			operands2 = "W:zmm {kz}, r64[7:0]",
			opcode = {"EVEX.512.66.0F38.W1", "7C", "/r"},
			metadata = "AVX512_F X64",
			operands = {"zmm {kz}", "r64[7:0]"},
			name = "vpbroadcastq",
		},
	},
	['vpcmpestrm'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x60"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<xmm0>,<eax>,<edx>",
			opcode = {"VEX.128.66.0F3A.WIG", "60", "/r", "ib"},
			metadata = "AVX OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "xmm", "i8"},
			name = "vpcmpestrm",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x60"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<xmm0>,<eax>,<edx>",
			opcode = {"VEX.128.66.0F3A.WIG", "60", "/r", "ib"},
			metadata = "AVX OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "m128", "u8"},
			name = "vpcmpestrm",
		},
	},
	['blsi'] = {
		['r32,m32'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r32", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W0", "F3", "/3"},
			metadata = "BMI              OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r32", "m32"},
			name = "blsi",
		},
		['r32,r32'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r32", "r32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W0", "F3", "/3"},
			metadata = "BMI              OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r32", "r32"},
			name = "blsi",
		},
		['r32,m64'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r32", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r32, r32/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W0", "F3", "/3"},
			metadata = "BMI              OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r32", "m64"},
			name = "blsi",
		},
		['r64,m64'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r64", "m64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W1", "F3", "/3"},
			metadata = "BMI X64          OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r64", "m64"},
			name = "blsi",
		},
		['r64,m32'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r64", "m32"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W1", "F3", "/3"},
			metadata = "BMI X64          OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r64", "m32"},
			name = "blsi",
		},
		['r64,r64'] = {
			func = function(op1, op2) return "\xF3"..x86_64.encode_modrm_sib(op1, 3) end,
			real_operands = {"r64", "r64"},
			encoding = "VM",
			has_relative = false,
			operands2 = "W:r64, r64/m32/m64",
			opcode = {"VEX.NDD.LZ.0F38.W1", "F3", "/3"},
			metadata = "BMI X64          OF=0 SF=W ZF=W AF=U PF=U CF=W",
			operands = {"r64", "r64"},
			name = "blsi",
		},
	},
	['vperm2i128'] = {
		['ymm,ymm,ymm,i8'] = {
			func = function(op1, op2, op3, op4) return "\x46"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "ymm", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "46", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm", "i8"},
			name = "vperm2i128",
		},
		['ymm,ymm,m256,u8'] = {
			func = function(op1, op2, op3, op4) return "\x46"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"ymm", "ymm", "m256", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ib/ub",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "46", "/r", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256", "u8"},
			name = "vperm2i128",
		},
	},
	['subps'] = {
		['xmm,m128'] = {
			func = function(op1, op2) return "\x0F\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"0F", "5C", "/r"},
			metadata = "SSE",
			operands = {"xmm", "m128"},
			name = "subps",
		},
		['xmm,xmm'] = {
			func = function(op1, op2) return "\x0F\x5C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "X:xmm, xmm/m128",
			opcode = {"0F", "5C", "/r"},
			metadata = "SSE",
			operands = {"xmm", "xmm"},
			name = "subps",
		},
	},
	['vprold'] = {
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W0", "72", "/1", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vprold",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W0", "72", "/1", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vprold",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W0", "72", "/1", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vprold",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W0", "72", "/1", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vprold",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W0", "72", "/1", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vprold",
		},
		['zmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "b32", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W0", "72", "/1", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "b32", "u8"},
			name = "vprold",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512/b32, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.W0", "72", "/1", "ib"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vprold",
		},
		['xmm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "b32", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128/b32, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.W0", "72", "/1", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "b32", "u8"},
			name = "vprold",
		},
		['ymm {kz},b32,u8'] = {
			func = function(op1, op2, op3) return "\x72"..x86_64.encode_modrm_sib(op1, 1)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "b32", "ub"},
			encoding = "VMI-FV",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256/b32, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.W0", "72", "/1", "ib"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "b32", "u8"},
			name = "vprold",
		},
	},
	['kandd'] = {
		['k[3:0],k[3:0],k[3:0]'] = {
			func = function(op1, op2, op3) return "\x41"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"k[3:0]", "k[3:0]", "k[3:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:k[3:0],~k[3:0],~k[3:0]",
			opcode = {"VEX.L1.66.0F.W1", "41", "/r"},
			metadata = "AVX512_BW",
			operands = {"k[3:0]", "k[3:0]", "k[3:0]"},
			name = "kandd",
		},
	},
	['vblendvpd'] = {
		['ymm,ymm,m256,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "4B", "/r", "/is4"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "m256", "ymm"},
			name = "vblendvpd",
		},
		['xmm,xmm,xmm,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "4B", "/r", "/is4"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm", "xmm"},
			name = "vblendvpd",
		},
		['ymm,ymm,ymm,ymm'] = {
			func = function(op1, op2, op3, op4) return "\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm", "ymm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256, ymm",
			opcode = {"VEX.NDS.256.66.0F3A.W0", "4B", "/r", "/is4"},
			metadata = "AVX",
			operands = {"ymm", "ymm", "ymm", "ymm"},
			name = "vblendvpd",
		},
		['xmm,xmm,m128,xmm'] = {
			func = function(op1, op2, op3, op4) return "\x4B"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128", "xmm"},
			encoding = "RVMS",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128, xmm",
			opcode = {"VEX.NDS.128.66.0F3A.W0", "4B", "/r", "/is4"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128", "xmm"},
			name = "vblendvpd",
		},
	},
	['vpmovsxbw'] = {
		['zmm {kz},ymm'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "ymm"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256",
			opcode = {"EVEX.512.66.0F38.WIG", "20", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "ymm"},
			name = "vpmovsxbw",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "20", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[7:0]"},
			name = "vpmovsxbw",
		},
		['zmm {kz},m256'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m256"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, ymm/m256",
			opcode = {"EVEX.512.66.0F38.WIG", "20", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "m256"},
			name = "vpmovsxbw",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "20", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m64"},
			name = "vpmovsxbw",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "20", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m32"},
			name = "vpmovsxbw",
		},
		['ymm {kz},m128'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m128"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128",
			opcode = {"EVEX.256.66.0F38.WIG", "20", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "m128"},
			name = "vpmovsxbw",
		},
		['ymm {kz},xmm'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm/m128",
			opcode = {"EVEX.256.66.0F38.WIG", "20", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "xmm"},
			name = "vpmovsxbw",
		},
		['ymm,m128'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m128"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.66.0F38.WIG", "20", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m128"},
			name = "vpmovsxbw",
		},
		['ymm,xmm'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm/m128",
			opcode = {"VEX.256.66.0F38.WIG", "20", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm"},
			name = "vpmovsxbw",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "20", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vpmovsxbw",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "20", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vpmovsxbw",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x20"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-HVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "20", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vpmovsxbw",
		},
	},
	['vmovlhps'] = {
		['xmm,xmm[7:0],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x16"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0], xmm[7:0]",
			opcode = {"EVEX.NDS.128.0F.W0", "16", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm", "xmm[7:0]", "xmm[7:0]"},
			name = "vmovlhps",
		},
	},
	['jbe'] = {
		['i8'] = {
			func = function(op1) return "\x76"..x86_64.encode_int('int8_t', op1) end,
			real_operands = {"rel8"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel8",
			opcode = {"76", "cb"},
			metadata = "ANY              Control=Branch CF=R ZF=R",
			operands = {"string"},
			name = "jbe",
		},
		['i16'] = {
			func = function(op1) return "\x66\x0F\x86"..x86_64.encode_int('int16_t', op1) end,
			real_operands = {"rel16"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel16",
			opcode = {"66", "0F", "86", "cw"},
			metadata = "X86              Control=Branch CF=R ZF=R",
			operands = {"string"},
			name = "jbe",
		},
		['i32'] = {
			func = function(op1) return "\x0F\x86"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "86", "cd"},
			metadata = "ANY              Control=Branch CF=R ZF=R",
			operands = {"string"},
			name = "jbe",
		},
		['string'] = {
			func = function(op1) return "\x0F\x86"..x86_64.encode_int('int32_t', op1) end,
			real_operands = {"rel32"},
			encoding = "D",
			has_relative = true,
			operands2 = "rel32",
			opcode = {"0F", "86", "cd"},
			metadata = "ANY              Control=Branch CF=R ZF=R",
			operands = {"string"},
			name = "jbe",
		},
	},
	['vroundsd'] = {
		['xmm,xmm[15:8],xmm[7:0],i8'] = {
			func = function(op1, op2, op3, op4) return "\x0B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm[15:8]", "xmm[7:0]", "ib"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64, ib/ub",
			opcode = {"VEX.NDS.LIG.66.0F3A.WIG", "0B", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "xmm[7:0]", "i8"},
			name = "vroundsd",
		},
		['xmm,xmm[15:8],m64,u8'] = {
			func = function(op1, op2, op3, op4) return "\x0B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm[15:8]", "m64", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64, ib/ub",
			opcode = {"VEX.NDS.LIG.66.0F3A.WIG", "0B", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m64", "u8"},
			name = "vroundsd",
		},
		['xmm,xmm[15:8],m32,u8'] = {
			func = function(op1, op2, op3, op4) return "\x0B"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op4) end,
			real_operands = {"xmm", "xmm[15:8]", "m32", "ub"},
			encoding = "RVMI",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:8], xmm[7:0]/m32/m64, ib/ub",
			opcode = {"VEX.NDS.LIG.66.0F3A.WIG", "0B", "/r", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:8]", "m32", "u8"},
			name = "vroundsd",
		},
	},
	['vphaddw'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x01"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "01", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vphaddw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x01"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "01", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vphaddw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x01"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "01", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vphaddw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x01"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "01", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vphaddw",
		},
	},
	['vphsubd'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x06"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "06", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vphsubd",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x06"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "06", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vphsubd",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x06"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "06", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vphsubd",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x06"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "06", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vphsubd",
		},
	},
	['vmovddup'] = {
		['ymm {kz},ymm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm"},
			encoding = "RM-DUP",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.F2.0F.W1", "12", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm"},
			name = "vmovddup",
		},
		['xmm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.F2.0F.WIG", "12", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[7:0]"},
			name = "vmovddup",
		},
		['ymm,ymm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.F2.0F.WIG", "12", "/r"},
			metadata = "AVX",
			operands = {"ymm", "ymm"},
			name = "vmovddup",
		},
		['ymm,m256'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m256"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, ymm/m256",
			opcode = {"VEX.256.F2.0F.WIG", "12", "/r"},
			metadata = "AVX",
			operands = {"ymm", "m256"},
			name = "vmovddup",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.F2.0F.WIG", "12", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m64"},
			name = "vmovddup",
		},
		['zmm {kz},m512'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m512"},
			encoding = "RM-DUP",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.F2.0F.W1", "12", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m512"},
			name = "vmovddup",
		},
		['zmm {kz},zmm'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm"},
			encoding = "RM-DUP",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512",
			opcode = {"EVEX.512.F2.0F.W1", "12", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm"},
			name = "vmovddup",
		},
		['ymm {kz},m256'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m256"},
			encoding = "RM-DUP",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256",
			opcode = {"EVEX.256.F2.0F.W1", "12", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m256"},
			name = "vmovddup",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[7:0]/m32/m64",
			opcode = {"VEX.128.F2.0F.WIG", "12", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m32"},
			name = "vmovddup",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-DUP",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.F2.0F.W1", "12", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vmovddup",
		},
		['xmm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[7:0]"},
			encoding = "RM-DUP",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.F2.0F.W1", "12", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[7:0]"},
			name = "vmovddup",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x12"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-DUP",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.128.F2.0F.W1", "12", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vmovddup",
		},
	},
	['vpmaskmovq'] = {
		['m128,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x8E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m128", "xmm", "xmm"},
			encoding = "MVR",
			has_relative = false,
			operands2 = "X:m128, xmm, xmm",
			opcode = {"VEX.NDS.128.66.0F38.W1", "8E", "/r"},
			metadata = "AVX2",
			operands = {"m128", "xmm", "xmm"},
			name = "vpmaskmovq",
		},
		['m256,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x8E"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m256", "ymm", "ymm"},
			encoding = "MVR",
			has_relative = false,
			operands2 = "X:m256, ymm, ymm",
			opcode = {"VEX.NDS.256.66.0F38.W1", "8E", "/r"},
			metadata = "AVX2",
			operands = {"m256", "ymm", "ymm"},
			name = "vpmaskmovq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x8C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, m128",
			opcode = {"VEX.NDS.128.66.0F38.W1", "8C", "/r"},
			metadata = "AVX2",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmaskmovq",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x8C"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, m256",
			opcode = {"VEX.NDS.256.66.0F38.W1", "8C", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmaskmovq",
		},
	},
	['setp'] = {
		['m8'] = {
			func = function(op1) return "\x0F\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"m8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9A", "/r"},
			metadata = "ANY              PF=R",
			operands = {"m8"},
			name = "setp",
		},
		['r8'] = {
			func = function(op1) return "\x0F\x9A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"r8"},
			encoding = "M",
			has_relative = false,
			operands2 = "w:r8/m8",
			opcode = {"0F", "9A", "/r"},
			metadata = "ANY              PF=R",
			operands = {"r8"},
			name = "setp",
		},
	},
	['xsave'] = {
		['m32'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m32"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"0F", "AE", "/4"},
			metadata = "XSAVE            Volatile XCR=R",
			operands = {"m32"},
			name = "xsave",
		},
		['m64'] = {
			func = function(op1) return "\x0F\xAE"..x86_64.encode_modrm_sib(op1, 4) end,
			real_operands = {"m64"},
			encoding = "M",
			has_relative = false,
			operands2 = "W:m32/m64, <edx>, <eax>",
			opcode = {"0F", "AE", "/4"},
			metadata = "XSAVE            Volatile XCR=R",
			operands = {"m64"},
			name = "xsave",
		},
	},
	['vpsllw'] = {
		['xmm,xmm,u8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "71", "/6", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "u8"},
			name = "vpsllw",
		},
		['xmm {kz},xmm,i8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "xmm", "ib"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.WIG", "71", "/6", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "i8"},
			name = "vpsllw",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "F1", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpsllw",
		},
		['ymm,ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "F1", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "xmm"},
			name = "vpsllw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "F1", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpsllw",
		},
		['ymm,ymm,i8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "71", "/6", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "i8"},
			name = "vpsllw",
		},
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:xmm, xmm, ib/ub",
			opcode = {"VEX.NDD.128.66.0F.WIG", "71", "/6", "ib"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "i8"},
			name = "vpsllw",
		},
		['zmm {kz},zmm,m128'] = {
			func = function(op1, op2, op3) return "\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "F1", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "m128"},
			name = "vpsllw",
		},
		['xmm {kz},m128,u8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm {kz}", "m128", "ub"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm/m128, ib/ub",
			opcode = {"EVEX.NDD.128.66.0F.WIG", "71", "/6", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "m128", "u8"},
			name = "vpsllw",
		},
		['ymm {kz},ymm,m128'] = {
			func = function(op1, op2, op3) return "\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "F1", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "m128"},
			name = "vpsllw",
		},
		['zmm {kz},m512,u8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "m512", "ub"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.WIG", "71", "/6", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "m512", "u8"},
			name = "vpsllw",
		},
		['ymm {kz},ymm,xmm'] = {
			func = function(op1, op2, op3) return "\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm, xmm/m128",
			opcode = {"EVEX.NDS.256.66.0F.WIG", "F1", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "xmm"},
			name = "vpsllw",
		},
		['ymm {kz},ymm,i8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "ymm", "ib"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.WIG", "71", "/6", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "ymm", "i8"},
			name = "vpsllw",
		},
		['zmm {kz},zmm,xmm'] = {
			func = function(op1, op2, op3) return "\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "xmm"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm, xmm/m128",
			opcode = {"EVEX.NDS.512.66.0F.WIG", "F1", "/r"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "xmm"},
			name = "vpsllw",
		},
		['ymm,ymm,u8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm", "ymm", "ub"},
			encoding = "VMI",
			has_relative = false,
			operands2 = "W:ymm, ymm, ib/ub",
			opcode = {"VEX.NDD.256.66.0F.WIG", "71", "/6", "ib"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "u8"},
			name = "vpsllw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F.WIG", "F1", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpsllw",
		},
		['ymm {kz},m256,u8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"ymm {kz}", "m256", "ub"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, ymm/m256, ib/ub",
			opcode = {"EVEX.NDD.256.66.0F.WIG", "71", "/6", "ib"},
			metadata = "AVX512_BW-VL",
			operands = {"ymm {kz}", "m256", "u8"},
			name = "vpsllw",
		},
		['zmm {kz},zmm,i8'] = {
			func = function(op1, op2, op3) return "\x71"..x86_64.encode_modrm_sib(op1, 6)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"zmm {kz}", "zmm", "ib"},
			encoding = "VMI-FVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, zmm/m512, ib/ub",
			opcode = {"EVEX.NDD.512.66.0F.WIG", "71", "/6", "ib"},
			metadata = "AVX512_BW",
			operands = {"zmm {kz}", "zmm", "i8"},
			name = "vpsllw",
		},
		['ymm,ymm,m128'] = {
			func = function(op1, op2, op3) return "\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, xmm/m128",
			opcode = {"VEX.NDS.256.66.0F.WIG", "F1", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m128"},
			name = "vpsllw",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\xF1"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-M128",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm, xmm/m128",
			opcode = {"EVEX.NDS.128.66.0F.WIG", "F1", "/r"},
			metadata = "AVX512_BW-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpsllw",
		},
	},
	['vpmovsxbd'] = {
		['zmm {kz},m128'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "m128"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm/m128",
			opcode = {"EVEX.512.66.0F38.WIG", "21", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "m128"},
			name = "vpmovsxbd",
		},
		['xmm,xmm[3:0]'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[3:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "21", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[3:0]"},
			name = "vpmovsxbd",
		},
		['zmm {kz},xmm'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "xmm"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:zmm {kz}, xmm/m128",
			opcode = {"EVEX.512.66.0F38.WIG", "21", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "xmm"},
			name = "vpmovsxbd",
		},
		['ymm,m32'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[7:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "21", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m32"},
			name = "vpmovsxbd",
		},
		['ymm,xmm[7:0]'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "xmm[7:0]"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[7:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "21", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "xmm[7:0]"},
			name = "vpmovsxbd",
		},
		['xmm {kz},xmm[3:0]'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[3:0]"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "21", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm[3:0]"},
			name = "vpmovsxbd",
		},
		['xmm,m64'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "21", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m64"},
			name = "vpmovsxbd",
		},
		['ymm,m64'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "m64"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:ymm, xmm[7:0]/m32/m64",
			opcode = {"VEX.256.66.0F38.WIG", "21", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "m64"},
			name = "vpmovsxbd",
		},
		['xmm {kz},m64'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m64"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "21", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m64"},
			name = "vpmovsxbd",
		},
		['ymm {kz},xmm[7:0]'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "xmm[7:0]"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "21", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "xmm[7:0]"},
			name = "vpmovsxbd",
		},
		['ymm {kz},m64'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m64"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "21", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m64"},
			name = "vpmovsxbd",
		},
		['xmm {kz},m32'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "m32"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[3:0]/m32/m64",
			opcode = {"EVEX.128.66.0F38.WIG", "21", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "m32"},
			name = "vpmovsxbd",
		},
		['ymm {kz},m32'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "m32"},
			encoding = "RM-QVM",
			has_relative = false,
			operands2 = "W:ymm {kz}, xmm[7:0]/m32/m64",
			opcode = {"EVEX.256.66.0F38.WIG", "21", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "m32"},
			name = "vpmovsxbd",
		},
		['xmm,m32'] = {
			func = function(op1, op2) return "\x21"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "m32"},
			encoding = "RM",
			has_relative = false,
			operands2 = "W:xmm, xmm[3:0]/m32/m64",
			opcode = {"VEX.128.66.0F38.WIG", "21", "/r"},
			metadata = "AVX",
			operands = {"xmm", "m32"},
			name = "vpmovsxbd",
		},
	},
	['vcvtsd2ss'] = {
		['xmm {kz},xmm[15:4],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "xmm[7:0]"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "5A", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "xmm[7:0]"},
			name = "vcvtsd2ss",
		},
		['xmm,xmm[15:4],xmm[7:0]'] = {
			func = function(op1, op2, op3) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "xmm[7:0]"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "5A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "xmm[7:0]"},
			name = "vcvtsd2ss",
		},
		['xmm {kz},xmm[15:4],m64 {er}'] = {
			func = function(op1, op2, op3) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m64 {er}"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "5A", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m64 {er}"},
			name = "vcvtsd2ss",
		},
		['xmm,xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m32"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "5A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m32"},
			name = "vcvtsd2ss",
		},
		['xmm,xmm[15:4],m64'] = {
			func = function(op1, op2, op3) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm[15:4]", "m64"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm[15:4], xmm[7:0]/m32/m64",
			opcode = {"VEX.NDS.LIG.F2.0F.WIG", "5A", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm[15:4]", "m64"},
			name = "vcvtsd2ss",
		},
		['xmm {kz},xmm[15:4],m32'] = {
			func = function(op1, op2, op3) return "\x5A"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			encoding = "RVM-T1S",
			has_relative = false,
			operands2 = "W:xmm {kz}, xmm[15:4], xmm[7:0]/m32/m64 {er}",
			opcode = {"EVEX.NDS.LIG.F2.0F.W1", "5A", "/r"},
			metadata = "AVX512_F",
			operands = {"xmm {kz}", "xmm[15:4]", "m32"},
			name = "vcvtsd2ss",
		},
	},
	['vphsubsw'] = {
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x07"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "07", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vphsubsw",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x07"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm, ymm, ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "07", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vphsubsw",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x07"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "07", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vphsubsw",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x07"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm, xmm, xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "07", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vphsubsw",
		},
	},
	['vpmuldq'] = {
		['zmm {kz},zmm,zmm'] = {
			func = function(op1, op2, op3) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "zmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "28", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "zmm"},
			name = "vpmuldq",
		},
		['xmm {kz},xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "xmm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "28", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "xmm"},
			name = "vpmuldq",
		},
		['ymm {kz},ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "ymm"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "28", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "ymm"},
			name = "vpmuldq",
		},
		['xmm,xmm,m128'] = {
			func = function(op1, op2, op3) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "m128"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "28", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "m128"},
			name = "vpmuldq",
		},
		['xmm,xmm,xmm'] = {
			func = function(op1, op2, op3) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm", "xmm", "xmm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:xmm,~xmm,~xmm/m128",
			opcode = {"VEX.NDS.128.66.0F38.WIG", "28", "/r"},
			metadata = "AVX",
			operands = {"xmm", "xmm", "xmm"},
			name = "vpmuldq",
		},
		['zmm {kz},zmm,b64'] = {
			func = function(op1, op2, op3) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "28", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "b64"},
			name = "vpmuldq",
		},
		['zmm {kz},zmm,m512'] = {
			func = function(op1, op2, op3) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"zmm {kz}", "zmm", "m512"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:zmm {kz},~zmm,~zmm/m512/b64",
			opcode = {"EVEX.NDS.512.66.0F38.W1", "28", "/r"},
			metadata = "AVX512_F",
			operands = {"zmm {kz}", "zmm", "m512"},
			name = "vpmuldq",
		},
		['ymm,ymm,m256'] = {
			func = function(op1, op2, op3) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "m256"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "28", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "m256"},
			name = "vpmuldq",
		},
		['xmm {kz},xmm,b64'] = {
			func = function(op1, op2, op3) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "28", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "b64"},
			name = "vpmuldq",
		},
		['ymm,ymm,ymm'] = {
			func = function(op1, op2, op3) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm", "ymm", "ymm"},
			encoding = "RVM",
			has_relative = false,
			operands2 = "W:ymm,~ymm,~ymm/m256",
			opcode = {"VEX.NDS.256.66.0F38.WIG", "28", "/r"},
			metadata = "AVX2",
			operands = {"ymm", "ymm", "ymm"},
			name = "vpmuldq",
		},
		['ymm {kz},ymm,b64'] = {
			func = function(op1, op2, op3) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "b64"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "28", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "b64"},
			name = "vpmuldq",
		},
		['ymm {kz},ymm,m256'] = {
			func = function(op1, op2, op3) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"ymm {kz}", "ymm", "m256"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:ymm {kz},~ymm,~ymm/m256/b64",
			opcode = {"EVEX.NDS.256.66.0F38.W1", "28", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"ymm {kz}", "ymm", "m256"},
			name = "vpmuldq",
		},
		['xmm {kz},xmm,m128'] = {
			func = function(op1, op2, op3) return "\x28"..x86_64.encode_modrm_sib(op1, op2) end,
			real_operands = {"xmm {kz}", "xmm", "m128"},
			encoding = "RVM-FV",
			has_relative = false,
			operands2 = "W:xmm {kz},~xmm,~xmm/m128/b64",
			opcode = {"EVEX.NDS.128.66.0F38.W1", "28", "/r"},
			metadata = "AVX512_F-VL",
			operands = {"xmm {kz}", "xmm", "m128"},
			name = "vpmuldq",
		},
	},
	['cwde'] = {
		[''] = {
			func = function() return "\x98" end,
			real_operands = {},
			encoding = "NONE",
			has_relative = false,
			operands2 = "X:<eax>",
			opcode = {"98"},
			metadata = "ANY",
			operands = {},
			name = "cwde",
		},
	},
	['pcmpistri'] = {
		['xmm,xmm,i8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x63"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "xmm", "ib"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<ecx>",
			opcode = {"66", "0F", "3A", "63", "/r", "ib"},
			metadata = "SSE4_2 OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "xmm", "i8"},
			name = "pcmpistri",
		},
		['xmm,m128,u8'] = {
			func = function(op1, op2, op3) return "\x66\x0F\x3A\x63"..x86_64.encode_modrm_sib(op1, op2)..x86_64.encode_int("int8_t", op3) end,
			real_operands = {"xmm", "m128", "ub"},
			encoding = "RMI",
			has_relative = false,
			operands2 = "R:xmm, xmm/m128, ib/ub, W:<ecx>",
			opcode = {"66", "0F", "3A", "63", "/r", "ib"},
			metadata = "SSE4_2 OF=W SF=W ZF=W AF=0 PF=0 CF=W",
			operands = {"xmm", "m128", "u8"},
			name = "pcmpistri",
		},
	},
}
return map